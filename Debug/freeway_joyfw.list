
freeway_joyfw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  08009e20  08009e20  00019e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a59c  0800a59c  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800a59c  0800a59c  0001a59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5a4  0800a5a4  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a5a4  0800a5a4  0001a5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5ac  0800a5ac  0001a5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800a5b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c0  20000200  0800a7b0  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015c0  0800a7b0  000215c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fdd  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b64  00000000  00000000  0003520d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00037d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  00038938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023958  00000000  00000000  00039408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc58  00000000  00000000  0005cd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d49ea  00000000  00000000  0006a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f3a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000419c  00000000  00000000  0013f3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009e04 	.word	0x08009e04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	08009e04 	.word	0x08009e04

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	0a5a      	lsrs	r2, r3, #9
 8000ef0:	490f      	ldr	r1, [pc, #60]	; (8000f30 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000ef2:	fba1 1202 	umull	r1, r2, r1, r2
 8000ef6:	09d2      	lsrs	r2, r2, #7
 8000ef8:	490e      	ldr	r1, [pc, #56]	; (8000f34 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000efa:	fb01 f202 	mul.w	r2, r1, r2
 8000efe:	1a9b      	subs	r3, r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	0a5b      	lsrs	r3, r3, #9
 8000f08:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	09db      	lsrs	r3, r3, #7
 8000f10:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	441a      	add	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	601a      	str	r2, [r3, #0]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	00044b83 	.word	0x00044b83
 8000f34:	3b9aca00 	.word	0x3b9aca00

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3c:	f003 fa42 	bl	80043c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 f828 	bl	8000f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f44:	f000 f938 	bl	80011b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f48:	f000 f90e 	bl	8001168 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f4c:	f000 f890 	bl	8001070 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000f50:	f000 f8e0 	bl	8001114 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, XY, 2);
 8000f54:	2202      	movs	r2, #2
 8000f56:	490b      	ldr	r1, [pc, #44]	; (8000f84 <main+0x4c>)
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <main+0x50>)
 8000f5a:	f003 fb0d 	bl	8004578 <HAL_ADC_Start_DMA>

  setup();
 8000f5e:	f001 ffd1 	bl	8002f04 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  x_val = XY[0];
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <main+0x4c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <main+0x54>)
 8000f68:	6013      	str	r3, [r2, #0]
	  y_val = XY[1];
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <main+0x4c>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <main+0x58>)
 8000f70:	6013      	str	r3, [r2, #0]
	  loop(x_val, y_val);
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <main+0x54>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <main+0x58>)
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 ffe5 	bl	8002f4c <loop>
  {
 8000f82:	e7ee      	b.n	8000f62 <main+0x2a>
 8000f84:	20001558 	.word	0x20001558
 8000f88:	20001560 	.word	0x20001560
 8000f8c:	200014f4 	.word	0x200014f4
 8000f90:	200015a8 	.word	0x200015a8

08000f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b094      	sub	sp, #80	; 0x50
 8000f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	2234      	movs	r2, #52	; 0x34
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f006 fa36 	bl	8007414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <SystemClock_Config+0xd4>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	4a29      	ldr	r2, [pc, #164]	; (8001068 <SystemClock_Config+0xd4>)
 8000fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <SystemClock_Config+0xd4>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <SystemClock_Config+0xd8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fe0:	4a22      	ldr	r2, [pc, #136]	; (800106c <SystemClock_Config+0xd8>)
 8000fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <SystemClock_Config+0xd8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffc:	2310      	movs	r3, #16
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001000:	2302      	movs	r3, #2
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001004:	2300      	movs	r3, #0
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001008:	2308      	movs	r3, #8
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 800100c:	2354      	movs	r3, #84	; 0x54
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001014:	2302      	movs	r3, #2
 8001016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4618      	mov	r0, r3
 8001022:	f004 ff47 	bl	8005eb4 <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800102c:	f000 f952 	bl	80012d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2302      	movs	r3, #2
 8001036:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001040:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001046:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	2102      	movs	r1, #2
 800104e:	4618      	mov	r0, r3
 8001050:	f004 fcba 	bl	80059c8 <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800105a:	f000 f93b 	bl	80012d4 <Error_Handler>
  }
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	; 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_ADC1_Init+0x98>)
 8001084:	4a21      	ldr	r2, [pc, #132]	; (800110c <MX_ADC1_Init+0x9c>)
 8001086:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <MX_ADC1_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <MX_ADC1_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_ADC1_Init+0x98>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_ADC1_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_ADC1_Init+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_ADC1_Init+0x98>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <MX_ADC1_Init+0x98>)
 80010b0:	4a17      	ldr	r2, [pc, #92]	; (8001110 <MX_ADC1_Init+0xa0>)
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_ADC1_Init+0x98>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_ADC1_Init+0x98>)
 80010bc:	2201      	movs	r2, #1
 80010be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_ADC1_Init+0x98>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_ADC1_Init+0x98>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ce:	480e      	ldr	r0, [pc, #56]	; (8001108 <MX_ADC1_Init+0x98>)
 80010d0:	f003 fa0e 	bl	80044f0 <HAL_ADC_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010da:	f000 f8fb 	bl	80012d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ea:	463b      	mov	r3, r7
 80010ec:	4619      	mov	r1, r3
 80010ee:	4806      	ldr	r0, [pc, #24]	; (8001108 <MX_ADC1_Init+0x98>)
 80010f0:	f003 fb52 	bl	8004798 <HAL_ADC_ConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010fa:	f000 f8eb 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20001560 	.word	0x20001560
 800110c:	40012000 	.word	0x40012000
 8001110:	0f000001 	.word	0x0f000001

08001114 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_USART3_UART_Init+0x4c>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <MX_USART3_UART_Init+0x50>)
 800111c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MX_USART3_UART_Init+0x4c>)
 8001120:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001124:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_USART3_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_USART3_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_USART3_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_USART3_UART_Init+0x4c>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_USART3_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_USART3_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_USART3_UART_Init+0x4c>)
 800114c:	f005 f90c 	bl	8006368 <HAL_UART_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001156:	f000 f8bd 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200014b4 	.word	0x200014b4
 8001164:	40004800 	.word	0x40004800

08001168 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_DMA_Init+0x4c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <MX_DMA_Init+0x4c>)
 8001178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <MX_DMA_Init+0x4c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	200c      	movs	r0, #12
 8001190:	f003 fe8d 	bl	8004eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001194:	200c      	movs	r0, #12
 8001196:	f003 fea6 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	200e      	movs	r0, #14
 80011a0:	f003 fe85 	bl	8004eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80011a4:	200e      	movs	r0, #14
 80011a6:	f003 fe9e 	bl	8004ee6 <HAL_NVIC_EnableIRQ>

}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <MX_GPIO_Init+0x108>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a3a      	ldr	r2, [pc, #232]	; (80012c0 <MX_GPIO_Init+0x108>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <MX_GPIO_Init+0x108>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <MX_GPIO_Init+0x108>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a33      	ldr	r2, [pc, #204]	; (80012c0 <MX_GPIO_Init+0x108>)
 80011f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <MX_GPIO_Init+0x108>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <MX_GPIO_Init+0x108>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a2c      	ldr	r2, [pc, #176]	; (80012c0 <MX_GPIO_Init+0x108>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <MX_GPIO_Init+0x108>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <MX_GPIO_Init+0x108>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a25      	ldr	r2, [pc, #148]	; (80012c0 <MX_GPIO_Init+0x108>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <MX_GPIO_Init+0x108>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800123e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <MX_GPIO_Init+0x10c>)
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	481d      	ldr	r0, [pc, #116]	; (80012c8 <MX_GPIO_Init+0x110>)
 8001254:	f004 f9f4 	bl	8005640 <HAL_GPIO_Init>

  /*Configure GPIO pin : e_stop_Pin */
  GPIO_InitStruct.Pin = e_stop_Pin;
 8001258:	2320      	movs	r3, #32
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_GPIO_Init+0x10c>)
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(e_stop_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4818      	ldr	r0, [pc, #96]	; (80012cc <MX_GPIO_Init+0x114>)
 800126c:	f004 f9e8 	bl	8005640 <HAL_GPIO_Init>

  /*Configure GPIO pin : joy_pin_Pin */
  GPIO_InitStruct.Pin = joy_pin_Pin;
 8001270:	2308      	movs	r3, #8
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_GPIO_Init+0x10c>)
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(joy_pin_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4813      	ldr	r0, [pc, #76]	; (80012d0 <MX_GPIO_Init+0x118>)
 8001284:	f004 f9dc 	bl	8005640 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	2009      	movs	r0, #9
 800128e:	f003 fe0e 	bl	8004eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001292:	2009      	movs	r0, #9
 8001294:	f003 fe27 	bl	8004ee6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	2017      	movs	r0, #23
 800129e:	f003 fe06 	bl	8004eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012a2:	2017      	movs	r0, #23
 80012a4:	f003 fe1f 	bl	8004ee6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2028      	movs	r0, #40	; 0x28
 80012ae:	f003 fdfe 	bl	8004eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012b2:	2028      	movs	r0, #40	; 0x28
 80012b4:	f003 fe17 	bl	8004ee6 <HAL_NVIC_EnableIRQ>

}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800
 80012c4:	10110000 	.word	0x10110000
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <_ZN3ros3MsgC1Ev+0x1c>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	0800a188 	.word	0x0800a188

08001324 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
      data()
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ffe8 	bl	8001304 <_ZN3ros3MsgC1Ev>
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3304      	adds	r3, #4
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ffcf 	bl	80012e2 <_ZN3ros4TimeC1Ev>
    {
    }
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	0800a170 	.word	0x0800a170

08001354 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6859      	ldr	r1, [r3, #4]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	4413      	add	r3, r2
 800136c:	b2ca      	uxtb	r2, r1
 800136e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	0a19      	lsrs	r1, r3, #8
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3301      	adds	r3, #1
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	4413      	add	r3, r2
 800137e:	b2ca      	uxtb	r2, r1
 8001380:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	0c19      	lsrs	r1, r3, #16
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3302      	adds	r3, #2
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	4413      	add	r3, r2
 8001390:	b2ca      	uxtb	r2, r1
 8001392:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	0e19      	lsrs	r1, r3, #24
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3303      	adds	r3, #3
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	4413      	add	r3, r2
 80013a2:	b2ca      	uxtb	r2, r1
 80013a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3304      	adds	r3, #4
 80013aa:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6899      	ldr	r1, [r3, #8]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	4413      	add	r3, r2
 80013b6:	b2ca      	uxtb	r2, r1
 80013b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	0a19      	lsrs	r1, r3, #8
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3301      	adds	r3, #1
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	b2ca      	uxtb	r2, r1
 80013ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	0c19      	lsrs	r1, r3, #16
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3302      	adds	r3, #2
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	b2ca      	uxtb	r2, r1
 80013dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	0e19      	lsrs	r1, r3, #24
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3303      	adds	r3, #3
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	b2ca      	uxtb	r2, r1
 80013ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3304      	adds	r3, #4
 80013f4:	60fb      	str	r3, [r7, #12]
      return offset;
 80013f6:	68fb      	ldr	r3, [r7, #12]
    }
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3301      	adds	r3, #1
 8001428:	6839      	ldr	r1, [r7, #0]
 800142a:	440b      	add	r3, r1
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3302      	adds	r3, #2
 800143e:	6839      	ldr	r1, [r7, #0]
 8001440:	440b      	add	r3, r1
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	041b      	lsls	r3, r3, #16
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3303      	adds	r3, #3
 8001454:	6839      	ldr	r1, [r7, #0]
 8001456:	440b      	add	r3, r1
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	061b      	lsls	r3, r3, #24
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3304      	adds	r3, #4
 8001466:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3301      	adds	r3, #1
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	440b      	add	r3, r1
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3302      	adds	r3, #2
 8001494:	6839      	ldr	r1, [r7, #0]
 8001496:	440b      	add	r3, r1
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	041b      	lsls	r3, r3, #16
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3303      	adds	r3, #3
 80014aa:	6839      	ldr	r1, [r7, #0]
 80014ac:	440b      	add	r3, r1
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3304      	adds	r3, #4
 80014bc:	60fb      	str	r3, [r7, #12]
     return offset;
 80014be:	68fb      	ldr	r3, [r7, #12]
    }
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	08009e20 	.word	0x08009e20

080014e8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	08009e30 	.word	0x08009e30

08001504 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fef8 	bl	8001304 <_ZN3ros3MsgC1Ev>
 8001514:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	809a      	strh	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a06      	ldr	r2, [pc, #24]	; (8001548 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
    {
    }
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	0800a158 	.word	0x0800a158
 8001548:	08009e54 	.word	0x08009e54

0800154c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	8899      	ldrh	r1, [r3, #4]
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	4413      	add	r3, r2
 8001564:	b2ca      	uxtb	r2, r1
 8001566:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	889b      	ldrh	r3, [r3, #4]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	b299      	uxth	r1, r3
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	3301      	adds	r3, #1
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	4413      	add	r3, r2
 8001578:	b2ca      	uxtb	r2, r1
 800157a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	3302      	adds	r3, #2
 8001580:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fe42 	bl	8000210 <strlen>
 800158c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	4413      	add	r3, r2
 8001594:	69b9      	ldr	r1, [r7, #24]
 8001596:	4618      	mov	r0, r3
 8001598:	f001 fdc2 	bl	8003120 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	3304      	adds	r3, #4
 80015a0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	18d0      	adds	r0, r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4619      	mov	r1, r3
 80015b0:	f005 ff22 	bl	80073f8 <memcpy>
      offset += length_topic_name;
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4413      	add	r3, r2
 80015ba:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe fe25 	bl	8000210 <strlen>
 80015c6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	6979      	ldr	r1, [r7, #20]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f001 fda5 	bl	8003120 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	18d0      	adds	r0, r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f005 ff05 	bl	80073f8 <memcpy>
      offset += length_message_type;
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	4413      	add	r3, r2
 80015f4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe fe08 	bl	8000210 <strlen>
 8001600:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	4413      	add	r3, r2
 8001608:	6939      	ldr	r1, [r7, #16]
 800160a:	4618      	mov	r0, r3
 800160c:	f001 fd88 	bl	8003120 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	3304      	adds	r3, #4
 8001614:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	18d0      	adds	r0, r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4619      	mov	r1, r3
 8001624:	f005 fee8 	bl	80073f8 <memcpy>
      offset += length_md5sum;
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4413      	add	r3, r2
 800162e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001636:	68f9      	ldr	r1, [r7, #12]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	4413      	add	r3, r2
 800163e:	b2ca      	uxtb	r2, r1
 8001640:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	0a19      	lsrs	r1, r3, #8
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3301      	adds	r3, #1
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	b2ca      	uxtb	r2, r1
 8001650:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	0c19      	lsrs	r1, r3, #16
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3302      	adds	r3, #2
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	4413      	add	r3, r2
 800165e:	b2ca      	uxtb	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	0e19      	lsrs	r1, r3, #24
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3303      	adds	r3, #3
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	4413      	add	r3, r2
 800166e:	b2ca      	uxtb	r2, r1
 8001670:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	61fb      	str	r3, [r7, #28]
      return offset;
 8001678:	69fb      	ldr	r3, [r7, #28]
    }
 800167a:	4618      	mov	r0, r3
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001682:	b580      	push	{r7, lr}
 8001684:	b08a      	sub	sp, #40	; 0x28
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	4413      	add	r3, r2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b29a      	uxth	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	889b      	ldrh	r3, [r3, #4]
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	3301      	adds	r3, #1
 80016a8:	6839      	ldr	r1, [r7, #0]
 80016aa:	440b      	add	r3, r1
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	4313      	orrs	r3, r2
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	3302      	adds	r3, #2
 80016c0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	441a      	add	r2, r3
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fd44 	bl	800315c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	3304      	adds	r3, #4
 80016d8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	4413      	add	r3, r2
 80016e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d20c      	bcs.n	8001704 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	441a      	add	r2, r3
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6839      	ldr	r1, [r7, #0]
 80016f6:	440b      	add	r3, r1
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	3301      	adds	r3, #1
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
 8001702:	e7ec      	b.n	80016de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	4413      	add	r3, r2
 800170a:	3b01      	subs	r3, #1
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	4413      	add	r3, r2
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	3b01      	subs	r3, #1
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	441a      	add	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	4413      	add	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	441a      	add	r2, r3
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f001 fd11 	bl	800315c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	3304      	adds	r3, #4
 800173e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	623b      	str	r3, [r7, #32]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4413      	add	r3, r2
 800174a:	6a3a      	ldr	r2, [r7, #32]
 800174c:	429a      	cmp	r2, r3
 800174e:	d20c      	bcs.n	800176a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	441a      	add	r2, r3
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	3b01      	subs	r3, #1
 800175a:	6839      	ldr	r1, [r7, #0]
 800175c:	440b      	add	r3, r1
 800175e:	7812      	ldrb	r2, [r2, #0]
 8001760:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	3301      	adds	r3, #1
 8001766:	623b      	str	r3, [r7, #32]
 8001768:	e7ec      	b.n	8001744 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4413      	add	r3, r2
 8001770:	3b01      	subs	r3, #1
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	4413      	add	r3, r2
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	3b01      	subs	r3, #1
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	441a      	add	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4413      	add	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	441a      	add	r2, r3
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f001 fcde 	bl	800315c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	3304      	adds	r3, #4
 80017a4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d20c      	bcs.n	80017d0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	441a      	add	r2, r3
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	3b01      	subs	r3, #1
 80017c0:	6839      	ldr	r1, [r7, #0]
 80017c2:	440b      	add	r3, r1
 80017c4:	7812      	ldrb	r2, [r2, #0]
 80017c6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	3301      	adds	r3, #1
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	e7ec      	b.n	80017aa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4413      	add	r3, r2
 80017d6:	3b01      	subs	r3, #1
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	441a      	add	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4413      	add	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	6839      	ldr	r1, [r7, #0]
 80017fe:	440a      	add	r2, r1
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	3301      	adds	r3, #1
 800180c:	6839      	ldr	r1, [r7, #0]
 800180e:	440b      	add	r3, r1
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	4313      	orrs	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	3302      	adds	r3, #2
 800181e:	6839      	ldr	r1, [r7, #0]
 8001820:	440b      	add	r3, r1
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	041b      	lsls	r3, r3, #16
 8001826:	4313      	orrs	r3, r2
 8001828:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	3303      	adds	r3, #3
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	440b      	add	r3, r1
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	061b      	lsls	r3, r3, #24
 8001838:	4313      	orrs	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	3304      	adds	r3, #4
 8001846:	61bb      	str	r3, [r7, #24]
     return offset;
 8001848:	69bb      	ldr	r3, [r7, #24]
    }
 800184a:	4618      	mov	r0, r3
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	08009e58 	.word	0x08009e58

08001870 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	08009e74 	.word	0x08009e74

0800188c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fd34 	bl	8001304 <_ZN3ros3MsgC1Ev>
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	711a      	strb	r2, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80018ac:	609a      	str	r2, [r3, #8]
    {
    }
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	0800a140 	.word	0x0800a140
 80018bc:	08009e54 	.word	0x08009e54

080018c0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	7912      	ldrb	r2, [r2, #4]
 80018d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3301      	adds	r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fc93 	bl	8000210 <strlen>
 80018ea:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f001 fc13 	bl	8003120 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3304      	adds	r3, #4
 80018fe:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	18d0      	adds	r0, r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	4619      	mov	r1, r3
 800190e:	f005 fd73 	bl	80073f8 <memcpy>
      offset += length_msg;
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
      return offset;
 800191a:	68fb      	ldr	r3, [r7, #12]
    }
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	4413      	add	r3, r2
 8001938:	781a      	ldrb	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	3301      	adds	r3, #1
 8001942:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	441a      	add	r2, r3
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f001 fc03 	bl	800315c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	3304      	adds	r3, #4
 800195a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4413      	add	r3, r2
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	429a      	cmp	r2, r3
 800196a:	d20c      	bcs.n	8001986 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	441a      	add	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3b01      	subs	r3, #1
 8001976:	6839      	ldr	r1, [r7, #0]
 8001978:	440b      	add	r3, r1
 800197a:	7812      	ldrb	r2, [r2, #0]
 800197c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	e7ec      	b.n	8001960 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	3b01      	subs	r3, #1
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	4413      	add	r3, r2
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	3b01      	subs	r3, #1
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	441a      	add	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
     return offset;
 80019aa:	693b      	ldr	r3, [r7, #16]
    }
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	08009e98 	.word	0x08009e98

080019d0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	08009eac 	.word	0x08009eac

080019ec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fc84 	bl	8001304 <_ZN3ros3MsgC1Ev>
 80019fc:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	61da      	str	r2, [r3, #28]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	0800a128 	.word	0x0800a128

08001a34 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6859      	ldr	r1, [r3, #4]
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	b2ca      	uxtb	r2, r1
 8001a4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	0a19      	lsrs	r1, r3, #8
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	3301      	adds	r3, #1
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b2ca      	uxtb	r2, r1
 8001a60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	0c19      	lsrs	r1, r3, #16
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	b2ca      	uxtb	r2, r1
 8001a72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	0e19      	lsrs	r1, r3, #24
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	3303      	adds	r3, #3
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	4413      	add	r3, r2
 8001a82:	b2ca      	uxtb	r2, r1
 8001a84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	3304      	adds	r3, #4
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	6a3a      	ldr	r2, [r7, #32]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d22b      	bcs.n	8001af2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001aa8:	6939      	ldr	r1, [r7, #16]
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	b2ca      	uxtb	r2, r1
 8001ab2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	0a19      	lsrs	r1, r3, #8
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	3301      	adds	r3, #1
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	b2ca      	uxtb	r2, r1
 8001ac2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	0c19      	lsrs	r1, r3, #16
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	3302      	adds	r3, #2
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	b2ca      	uxtb	r2, r1
 8001ad2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	0e19      	lsrs	r1, r3, #24
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	3303      	adds	r3, #3
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	b2ca      	uxtb	r2, r1
 8001ae2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	3301      	adds	r3, #1
 8001aee:	623b      	str	r3, [r7, #32]
 8001af0:	e7ce      	b.n	8001a90 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6919      	ldr	r1, [r3, #16]
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	b2ca      	uxtb	r2, r1
 8001afe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	0a19      	lsrs	r1, r3, #8
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	3301      	adds	r3, #1
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b2ca      	uxtb	r2, r1
 8001b10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	0c19      	lsrs	r1, r3, #16
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	b2ca      	uxtb	r2, r1
 8001b22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	0e19      	lsrs	r1, r3, #24
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	3303      	adds	r3, #3
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	4413      	add	r3, r2
 8001b32:	b2ca      	uxtb	r2, r1
 8001b34:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	3304      	adds	r3, #4
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d22b      	bcs.n	8001ba2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699a      	ldr	r2, [r3, #24]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001b58:	68f9      	ldr	r1, [r7, #12]
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	b2ca      	uxtb	r2, r1
 8001b62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	0a19      	lsrs	r1, r3, #8
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	b2ca      	uxtb	r2, r1
 8001b72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	0c19      	lsrs	r1, r3, #16
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	b2ca      	uxtb	r2, r1
 8001b82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	0e19      	lsrs	r1, r3, #24
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	3303      	adds	r3, #3
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	b2ca      	uxtb	r2, r1
 8001b92:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	3304      	adds	r3, #4
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	61fb      	str	r3, [r7, #28]
 8001ba0:	e7ce      	b.n	8001b40 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69d9      	ldr	r1, [r3, #28]
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	b2ca      	uxtb	r2, r1
 8001bae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	0a19      	lsrs	r1, r3, #8
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	3301      	adds	r3, #1
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2ca      	uxtb	r2, r1
 8001bc0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	0c19      	lsrs	r1, r3, #16
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	3302      	adds	r3, #2
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	b2ca      	uxtb	r2, r1
 8001bd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	0e19      	lsrs	r1, r3, #24
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	3303      	adds	r3, #3
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	4413      	add	r3, r2
 8001be2:	b2ca      	uxtb	r2, r1
 8001be4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	3304      	adds	r3, #4
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d228      	bcs.n	8001c4c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fb02 	bl	8000210 <strlen>
 8001c0c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	6979      	ldr	r1, [r7, #20]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f001 fa82 	bl	8003120 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	3304      	adds	r3, #4
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	18d0      	adds	r0, r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	4619      	mov	r1, r3
 8001c38:	f005 fbde 	bl	80073f8 <memcpy>
      offset += length_stringsi;
 8001c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	4413      	add	r3, r2
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	3301      	adds	r3, #1
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	e7d1      	b.n	8001bf0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3728      	adds	r7, #40	; 0x28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b08e      	sub	sp, #56	; 0x38
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	4413      	add	r3, r2
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c70:	3301      	adds	r3, #1
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	4413      	add	r3, r2
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	6a3a      	ldr	r2, [r7, #32]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c82:	3302      	adds	r3, #2
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	041b      	lsls	r3, r3, #16
 8001c8c:	6a3a      	ldr	r2, [r7, #32]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c94:	3303      	adds	r3, #3
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	061b      	lsls	r3, r3, #24
 8001c9e:	6a3a      	ldr	r2, [r7, #32]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	6a3a      	ldr	r2, [r7, #32]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d90a      	bls.n	8001cca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	f006 f81a 	bl	8007cf8 <realloc>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a3a      	ldr	r2, [r7, #32]
 8001cce:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d236      	bcs.n	8001d4c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ce6:	6839      	ldr	r1, [r7, #0]
 8001ce8:	440a      	add	r2, r1
 8001cea:	7812      	ldrb	r2, [r2, #0]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	6839      	ldr	r1, [r7, #0]
 8001cf8:	440b      	add	r3, r1
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d06:	3302      	adds	r3, #2
 8001d08:	6839      	ldr	r1, [r7, #0]
 8001d0a:	440b      	add	r3, r1
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	041b      	lsls	r3, r3, #16
 8001d10:	4313      	orrs	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d18:	3303      	adds	r3, #3
 8001d1a:	6839      	ldr	r1, [r7, #0]
 8001d1c:	440b      	add	r3, r1
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	061b      	lsls	r3, r3, #24
 8001d22:	4313      	orrs	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2e:	3304      	adds	r3, #4
 8001d30:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	3208      	adds	r2, #8
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d46:	3301      	adds	r3, #1
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30
 8001d4a:	e7c3      	b.n	8001cd4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d58:	3301      	adds	r3, #1
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7c:	3303      	adds	r3, #3
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	4413      	add	r3, r2
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8e:	3304      	adds	r3, #4
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d90a      	bls.n	8001db2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699a      	ldr	r2, [r3, #24]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f005 ffa6 	bl	8007cf8 <realloc>
 8001dac:	4602      	mov	r2, r0
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001db8:	2300      	movs	r3, #0
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d236      	bcs.n	8001e34 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dce:	6839      	ldr	r1, [r7, #0]
 8001dd0:	440a      	add	r2, r1
 8001dd2:	7812      	ldrb	r2, [r2, #0]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ddc:	3301      	adds	r3, #1
 8001dde:	6839      	ldr	r1, [r7, #0]
 8001de0:	440b      	add	r3, r1
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dee:	3302      	adds	r3, #2
 8001df0:	6839      	ldr	r1, [r7, #0]
 8001df2:	440b      	add	r3, r1
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	041b      	lsls	r3, r3, #16
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e00:	3303      	adds	r3, #3
 8001e02:	6839      	ldr	r1, [r7, #0]
 8001e04:	440b      	add	r3, r1
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	061b      	lsls	r3, r3, #24
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e16:	3304      	adds	r3, #4
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	3214      	adds	r2, #20
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2e:	3301      	adds	r3, #1
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e32:	e7c3      	b.n	8001dbc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	4413      	add	r3, r2
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e40:	3301      	adds	r3, #1
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e52:	3302      	adds	r3, #2
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	041b      	lsls	r3, r3, #16
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e64:	3303      	adds	r3, #3
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	061b      	lsls	r3, r3, #24
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e76:	3304      	adds	r3, #4
 8001e78:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d90a      	bls.n	8001e9a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4610      	mov	r0, r2
 8001e90:	f005 ff32 	bl	8007cf8 <realloc>
 8001e94:	4602      	mov	r2, r0
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d23f      	bcs.n	8001f2e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	441a      	add	r2, r3
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f001 f94e 	bl	800315c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d20c      	bcs.n	8001ef0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	441a      	add	r2, r3
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	6839      	ldr	r1, [r7, #0]
 8001ee2:	440b      	add	r3, r1
 8001ee4:	7812      	ldrb	r2, [r2, #0]
 8001ee6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	3301      	adds	r3, #1
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	e7ec      	b.n	8001eca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f02:	3b01      	subs	r3, #1
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	441a      	add	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4413      	add	r3, r2
 8001f12:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	3220      	adds	r2, #32
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f28:	3301      	adds	r3, #1
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f2c:	e7ba      	b.n	8001ea4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001f30:	4618      	mov	r0, r3
 8001f32:	3738      	adds	r7, #56	; 0x38
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	0800a04c 	.word	0x0800a04c

08001f54 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	08009ed0 	.word	0x08009ed0

08001f70 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	611a      	str	r2, [r3, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68d8      	ldr	r0, [r3, #12]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6891      	ldr	r1, [r2, #8]
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	4798      	blx	r3
 8001fbc:	4603      	mov	r3, r0
  };
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
  }
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <_ZN13STM32HardwareC1Ev+0x34>)
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	200014b4 	.word	0x200014b4

0800203c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f804 	bl	8002052 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3304      	adds	r3, #4
 8002062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002066:	4619      	mov	r1, r3
 8002068:	f004 fa38 	bl	80064dc <HAL_UART_Receive_DMA>
    }
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800207c:	f04f 33ff 	mov.w	r3, #4294967295
 8002080:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ffa8 	bl	8001fde <_ZN13STM32Hardware10getRdmaIndEv>
 800208e:	4603      	mov	r3, r0
 8002090:	429c      	cmp	r4, r3
 8002092:	bf14      	ite	ne
 8002094:	2301      	movne	r3, #1
 8002096:	2300      	moveq	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d012      	beq.n	80020c4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80020a4:	1c59      	adds	r1, r3, #1
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	791b      	ldrb	r3, [r3, #4]
 80020b2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80020ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 80020c4:	68fb      	ldr	r3, [r7, #12]
    }
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd90      	pop	{r4, r7, pc}
	...

080020d0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d108      	bne.n	80020f8 <_ZN13STM32Hardware5flushEv+0x28>
 80020e6:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <_ZN13STM32Hardware5flushEv+0xe4>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	f083 0301 	eor.w	r3, r3, #1
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <_ZN13STM32Hardware5flushEv+0x28>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <_ZN13STM32Hardware5flushEv+0x2a>
 80020f8:	2300      	movs	r3, #0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d055      	beq.n	80021aa <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <_ZN13STM32Hardware5flushEv+0xe4>)
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002110:	429a      	cmp	r2, r3
 8002112:	d047      	beq.n	80021a4 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002124:	429a      	cmp	r2, r3
 8002126:	d217      	bcs.n	8002158 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800212e:	b29a      	uxth	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002136:	b29b      	uxth	r3, r3
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002146:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	89fa      	ldrh	r2, [r7, #14]
 8002150:	4619      	mov	r1, r3
 8002152:	f004 f957 	bl	8006404 <HAL_UART_Transmit_DMA>
 8002156:	e01f      	b.n	8002198 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 800215e:	b29b      	uxth	r3, r3
 8002160:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002164:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002170:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4413      	add	r3, r2
 8002178:	89fa      	ldrh	r2, [r7, #14]
 800217a:	4619      	mov	r1, r3
 800217c:	f004 f942 	bl	8006404 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, tbuf, twind);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002190:	b29b      	uxth	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	f004 f936 	bl	8006404 <HAL_UART_Transmit_DMA>
			//HAL_UART_Transmit_DMA(huart, &(tbuf), twind);
		  }
          tfind = twind;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <_ZN13STM32Hardware5flushEv+0xe4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
      }
    }
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000021c 	.word	0x2000021c

080021b8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
      int n = length;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ce:	bfa8      	it	ge
 80021d0:	f44f 6380 	movge.w	r3, #1024	; 0x400
 80021d4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80021dc:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	4293      	cmp	r3, r2
 80021e4:	bf28      	it	cs
 80021e6:	4613      	movcs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80021f0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4413      	add	r3, r2
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f005 f8fb 	bl	80073f8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	4413      	add	r3, r2
 800220c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

      if(n != n_tail){
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	429a      	cmp	r2, r3
 800221c:	d00b      	beq.n	8002236 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	18d1      	adds	r1, r2, r3
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	461a      	mov	r2, r3
 8002232:	f005 f8e1 	bl	80073f8 <memcpy>
      }

      flush();
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f7ff ff4a 	bl	80020d0 <_ZN13STM32Hardware5flushEv>
    }
 800223c:	bf00      	nop
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	f002 f920 	bl	8004490 <HAL_GetTick>
 8002250:	4603      	mov	r3, r0
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f84c 	bl	8001304 <_ZN3ros3MsgC1Ev>
 800226c:	4a0e      	ldr	r2, [pc, #56]	; (80022a8 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	0800a0e4 	.word	0x0800a0e4

080022ac <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022ac:	b480      	push	{r7}
 80022ae:	b08b      	sub	sp, #44	; 0x2c
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80022c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ca:	6838      	ldr	r0, [r7, #0]
 80022cc:	4401      	add	r1, r0
 80022ce:	b2d3      	uxtb	r3, r2
 80022d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80022d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	0a02      	lsrs	r2, r0, #8
 80022e0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80022e4:	0a0b      	lsrs	r3, r1, #8
 80022e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022e8:	3101      	adds	r1, #1
 80022ea:	6838      	ldr	r0, [r7, #0]
 80022ec:	4401      	add	r1, r0
 80022ee:	b2d3      	uxtb	r3, r2
 80022f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80022f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	0c02      	lsrs	r2, r0, #16
 8002300:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002304:	0c0b      	lsrs	r3, r1, #16
 8002306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002308:	3102      	adds	r1, #2
 800230a:	6838      	ldr	r0, [r7, #0]
 800230c:	4401      	add	r1, r0
 800230e:	b2d3      	uxtb	r3, r2
 8002310:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	0e02      	lsrs	r2, r0, #24
 8002320:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002324:	0e0b      	lsrs	r3, r1, #24
 8002326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002328:	3103      	adds	r1, #3
 800232a:	6838      	ldr	r0, [r7, #0]
 800232c:	4401      	add	r1, r0
 800232e:	b2d3      	uxtb	r3, r2
 8002330:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002332:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	000a      	movs	r2, r1
 8002340:	2300      	movs	r3, #0
 8002342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002344:	3104      	adds	r1, #4
 8002346:	6838      	ldr	r0, [r7, #0]
 8002348:	4401      	add	r1, r0
 800234a:	b2d3      	uxtb	r3, r2
 800234c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800234e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	0a0a      	lsrs	r2, r1, #8
 800235c:	2300      	movs	r3, #0
 800235e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002360:	3105      	adds	r1, #5
 8002362:	6838      	ldr	r0, [r7, #0]
 8002364:	4401      	add	r1, r0
 8002366:	b2d3      	uxtb	r3, r2
 8002368:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800236a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	0c0a      	lsrs	r2, r1, #16
 8002378:	2300      	movs	r3, #0
 800237a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800237c:	3106      	adds	r1, #6
 800237e:	6838      	ldr	r0, [r7, #0]
 8002380:	4401      	add	r1, r0
 8002382:	b2d3      	uxtb	r3, r2
 8002384:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002386:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	0e0a      	lsrs	r2, r1, #24
 8002394:	2300      	movs	r3, #0
 8002396:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002398:	3107      	adds	r1, #7
 800239a:	6838      	ldr	r0, [r7, #0]
 800239c:	4401      	add	r1, r0
 800239e:	b2d3      	uxtb	r3, r2
 80023a0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	3308      	adds	r3, #8
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80023b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b8:	6838      	ldr	r0, [r7, #0]
 80023ba:	4401      	add	r1, r0
 80023bc:	b2d3      	uxtb	r3, r2
 80023be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80023c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	0a02      	lsrs	r2, r0, #8
 80023ce:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80023d2:	0a0b      	lsrs	r3, r1, #8
 80023d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023d6:	3101      	adds	r1, #1
 80023d8:	6838      	ldr	r0, [r7, #0]
 80023da:	4401      	add	r1, r0
 80023dc:	b2d3      	uxtb	r3, r2
 80023de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80023e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	0c02      	lsrs	r2, r0, #16
 80023ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80023f2:	0c0b      	lsrs	r3, r1, #16
 80023f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023f6:	3102      	adds	r1, #2
 80023f8:	6838      	ldr	r0, [r7, #0]
 80023fa:	4401      	add	r1, r0
 80023fc:	b2d3      	uxtb	r3, r2
 80023fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002400:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	0e02      	lsrs	r2, r0, #24
 800240e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002412:	0e0b      	lsrs	r3, r1, #24
 8002414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002416:	3103      	adds	r1, #3
 8002418:	6838      	ldr	r0, [r7, #0]
 800241a:	4401      	add	r1, r0
 800241c:	b2d3      	uxtb	r3, r2
 800241e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002420:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	000a      	movs	r2, r1
 800242e:	2300      	movs	r3, #0
 8002430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002432:	3104      	adds	r1, #4
 8002434:	6838      	ldr	r0, [r7, #0]
 8002436:	4401      	add	r1, r0
 8002438:	b2d3      	uxtb	r3, r2
 800243a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800243c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	0a0a      	lsrs	r2, r1, #8
 800244a:	2300      	movs	r3, #0
 800244c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800244e:	3105      	adds	r1, #5
 8002450:	6838      	ldr	r0, [r7, #0]
 8002452:	4401      	add	r1, r0
 8002454:	b2d3      	uxtb	r3, r2
 8002456:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002458:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	0c0a      	lsrs	r2, r1, #16
 8002466:	2300      	movs	r3, #0
 8002468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800246a:	3106      	adds	r1, #6
 800246c:	6838      	ldr	r0, [r7, #0]
 800246e:	4401      	add	r1, r0
 8002470:	b2d3      	uxtb	r3, r2
 8002472:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002474:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	0e0a      	lsrs	r2, r1, #24
 8002482:	2300      	movs	r3, #0
 8002484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002486:	3107      	adds	r1, #7
 8002488:	6838      	ldr	r0, [r7, #0]
 800248a:	4401      	add	r1, r0
 800248c:	b2d3      	uxtb	r3, r2
 800248e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	3308      	adds	r3, #8
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800249c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80024a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a6:	6838      	ldr	r0, [r7, #0]
 80024a8:	4401      	add	r1, r0
 80024aa:	b2d3      	uxtb	r3, r2
 80024ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80024ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	0a02      	lsrs	r2, r0, #8
 80024bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80024c0:	0a0b      	lsrs	r3, r1, #8
 80024c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024c4:	3101      	adds	r1, #1
 80024c6:	6838      	ldr	r0, [r7, #0]
 80024c8:	4401      	add	r1, r0
 80024ca:	b2d3      	uxtb	r3, r2
 80024cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80024ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	0c02      	lsrs	r2, r0, #16
 80024dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024e0:	0c0b      	lsrs	r3, r1, #16
 80024e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024e4:	3102      	adds	r1, #2
 80024e6:	6838      	ldr	r0, [r7, #0]
 80024e8:	4401      	add	r1, r0
 80024ea:	b2d3      	uxtb	r3, r2
 80024ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80024ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	0e02      	lsrs	r2, r0, #24
 80024fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002500:	0e0b      	lsrs	r3, r1, #24
 8002502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002504:	3103      	adds	r1, #3
 8002506:	6838      	ldr	r0, [r7, #0]
 8002508:	4401      	add	r1, r0
 800250a:	b2d3      	uxtb	r3, r2
 800250c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800250e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	000a      	movs	r2, r1
 800251c:	2300      	movs	r3, #0
 800251e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002520:	3104      	adds	r1, #4
 8002522:	6838      	ldr	r0, [r7, #0]
 8002524:	4401      	add	r1, r0
 8002526:	b2d3      	uxtb	r3, r2
 8002528:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800252a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	0a0a      	lsrs	r2, r1, #8
 8002538:	2300      	movs	r3, #0
 800253a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800253c:	3105      	adds	r1, #5
 800253e:	6838      	ldr	r0, [r7, #0]
 8002540:	4401      	add	r1, r0
 8002542:	b2d3      	uxtb	r3, r2
 8002544:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002546:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	0c0a      	lsrs	r2, r1, #16
 8002554:	2300      	movs	r3, #0
 8002556:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002558:	3106      	adds	r1, #6
 800255a:	6838      	ldr	r0, [r7, #0]
 800255c:	4401      	add	r1, r0
 800255e:	b2d3      	uxtb	r3, r2
 8002560:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002562:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	0e0a      	lsrs	r2, r1, #24
 8002570:	2300      	movs	r3, #0
 8002572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002574:	3107      	adds	r1, #7
 8002576:	6838      	ldr	r0, [r7, #0]
 8002578:	4401      	add	r1, r0
 800257a:	b2d3      	uxtb	r3, r2
 800257c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	3308      	adds	r3, #8
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002586:	4618      	mov	r0, r3
 8002588:	372c      	adds	r7, #44	; 0x2c
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002592:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002596:	b0bb      	sub	sp, #236	; 0xec
 8002598:	af00      	add	r7, sp, #0
 800259a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800259e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    {
      int offset = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80025b4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80025b8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80025bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025c0:	4413      	add	r3, r2
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	ea40 0402 	orr.w	r4, r0, r2
 80025ce:	ea41 0503 	orr.w	r5, r1, r3
 80025d2:	e9c7 4536 	strd	r4, r5, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025d6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80025da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025e4:	4413      	add	r3, r2
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	f04f 0000 	mov.w	r0, #0
 80025f2:	f04f 0100 	mov.w	r1, #0
 80025f6:	0219      	lsls	r1, r3, #8
 80025f8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80025fc:	0210      	lsls	r0, r2, #8
 80025fe:	ea44 0a00 	orr.w	sl, r4, r0
 8002602:	ea45 0b01 	orr.w	fp, r5, r1
 8002606:	e9c7 ab36 	strd	sl, fp, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800260a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800260e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002612:	1c9a      	adds	r2, r3, #2
 8002614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002618:	4413      	add	r3, r2
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	f04f 0000 	mov.w	r0, #0
 8002626:	f04f 0100 	mov.w	r1, #0
 800262a:	0419      	lsls	r1, r3, #16
 800262c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002630:	0410      	lsls	r0, r2, #16
 8002632:	ea44 0300 	orr.w	r3, r4, r0
 8002636:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800263a:	ea45 0301 	orr.w	r3, r5, r1
 800263e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002642:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002646:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800264a:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800264e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002652:	1cda      	adds	r2, r3, #3
 8002654:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002658:	4413      	add	r3, r2
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8002666:	ea4f 6802 	mov.w	r8, r2, lsl #24
 800266a:	ea40 0308 	orr.w	r3, r0, r8
 800266e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002672:	ea41 0309 	orr.w	r3, r1, r9
 8002676:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800267a:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800267e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002682:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800268a:	1d1a      	adds	r2, r3, #4
 800268c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002690:	4413      	add	r3, r2
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	f04f 0000 	mov.w	r0, #0
 800269e:	f04f 0100 	mov.w	r1, #0
 80026a2:	0011      	movs	r1, r2
 80026a4:	2000      	movs	r0, #0
 80026a6:	ea44 0300 	orr.w	r3, r4, r0
 80026aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80026ae:	ea45 0301 	orr.w	r3, r5, r1
 80026b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026b6:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80026ba:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80026be:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80026c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c6:	1d5a      	adds	r2, r3, #5
 80026c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	f04f 0000 	mov.w	r0, #0
 80026da:	f04f 0100 	mov.w	r1, #0
 80026de:	0211      	lsls	r1, r2, #8
 80026e0:	2000      	movs	r0, #0
 80026e2:	ea44 0300 	orr.w	r3, r4, r0
 80026e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026ea:	ea45 0301 	orr.w	r3, r5, r1
 80026ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80026f2:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80026f6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80026fa:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80026fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002702:	1d9a      	adds	r2, r3, #6
 8002704:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002708:	4413      	add	r3, r2
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	f04f 0000 	mov.w	r0, #0
 8002716:	f04f 0100 	mov.w	r1, #0
 800271a:	0411      	lsls	r1, r2, #16
 800271c:	2000      	movs	r0, #0
 800271e:	ea44 0300 	orr.w	r3, r4, r0
 8002722:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002726:	ea45 0301 	orr.w	r3, r5, r1
 800272a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800272e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002732:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002736:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800273a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800273e:	1dda      	adds	r2, r3, #7
 8002740:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002744:	4413      	add	r3, r2
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	f04f 0000 	mov.w	r0, #0
 8002752:	f04f 0100 	mov.w	r1, #0
 8002756:	0611      	lsls	r1, r2, #24
 8002758:	2000      	movs	r0, #0
 800275a:	ea44 0300 	orr.w	r3, r4, r0
 800275e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002762:	ea45 0301 	orr.w	r3, r5, r1
 8002766:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800276a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800276e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->x = u_x.real;
 8002772:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800277a:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800277e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002782:	3308      	adds	r3, #8
 8002784:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002794:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002798:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800279c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027a0:	4413      	add	r3, r2
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	ea40 0402 	orr.w	r4, r0, r2
 80027ae:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80027b2:	430b      	orrs	r3, r1
 80027b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80027b8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80027bc:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027c0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80027c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027ce:	4413      	add	r3, r2
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	f04f 0000 	mov.w	r0, #0
 80027dc:	f04f 0100 	mov.w	r1, #0
 80027e0:	0219      	lsls	r1, r3, #8
 80027e2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80027e6:	0210      	lsls	r0, r2, #8
 80027e8:	ea44 0300 	orr.w	r3, r4, r0
 80027ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027f0:	ea45 0301 	orr.w	r3, r5, r1
 80027f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027f8:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80027fc:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002800:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002808:	1c9a      	adds	r2, r3, #2
 800280a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800280e:	4413      	add	r3, r2
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	f04f 0000 	mov.w	r0, #0
 800281c:	f04f 0100 	mov.w	r1, #0
 8002820:	0419      	lsls	r1, r3, #16
 8002822:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002826:	0410      	lsls	r0, r2, #16
 8002828:	ea44 0300 	orr.w	r3, r4, r0
 800282c:	67bb      	str	r3, [r7, #120]	; 0x78
 800282e:	ea45 0301 	orr.w	r3, r5, r1
 8002832:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002834:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002838:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800283c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002844:	1cda      	adds	r2, r3, #3
 8002846:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800284a:	4413      	add	r3, r2
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	0a14      	lsrs	r4, r2, #8
 8002856:	677c      	str	r4, [r7, #116]	; 0x74
 8002858:	0613      	lsls	r3, r2, #24
 800285a:	673b      	str	r3, [r7, #112]	; 0x70
 800285c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002860:	4623      	mov	r3, r4
 8002862:	4303      	orrs	r3, r0
 8002864:	66bb      	str	r3, [r7, #104]	; 0x68
 8002866:	462b      	mov	r3, r5
 8002868:	430b      	orrs	r3, r1
 800286a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800286c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002870:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002874:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800287c:	1d1a      	adds	r2, r3, #4
 800287e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002882:	4413      	add	r3, r2
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	b2da      	uxtb	r2, r3
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	f04f 0000 	mov.w	r0, #0
 8002890:	f04f 0100 	mov.w	r1, #0
 8002894:	0011      	movs	r1, r2
 8002896:	2000      	movs	r0, #0
 8002898:	ea44 0300 	orr.w	r3, r4, r0
 800289c:	663b      	str	r3, [r7, #96]	; 0x60
 800289e:	ea45 0301 	orr.w	r3, r5, r1
 80028a2:	667b      	str	r3, [r7, #100]	; 0x64
 80028a4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80028a8:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80028ac:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80028b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b4:	1d5a      	adds	r2, r3, #5
 80028b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028ba:	4413      	add	r3, r2
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	f04f 0000 	mov.w	r0, #0
 80028c8:	f04f 0100 	mov.w	r1, #0
 80028cc:	0211      	lsls	r1, r2, #8
 80028ce:	2000      	movs	r0, #0
 80028d0:	ea44 0300 	orr.w	r3, r4, r0
 80028d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80028d6:	ea45 0301 	orr.w	r3, r5, r1
 80028da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028dc:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80028e0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80028e4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80028e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ec:	1d9a      	adds	r2, r3, #6
 80028ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028f2:	4413      	add	r3, r2
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	f04f 0000 	mov.w	r0, #0
 8002900:	f04f 0100 	mov.w	r1, #0
 8002904:	0411      	lsls	r1, r2, #16
 8002906:	2000      	movs	r0, #0
 8002908:	ea44 0300 	orr.w	r3, r4, r0
 800290c:	653b      	str	r3, [r7, #80]	; 0x50
 800290e:	ea45 0301 	orr.w	r3, r5, r1
 8002912:	657b      	str	r3, [r7, #84]	; 0x54
 8002914:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8002918:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800291c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002924:	1dda      	adds	r2, r3, #7
 8002926:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800292a:	4413      	add	r3, r2
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	f04f 0000 	mov.w	r0, #0
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	0611      	lsls	r1, r2, #24
 800293e:	2000      	movs	r0, #0
 8002940:	ea44 0300 	orr.w	r3, r4, r0
 8002944:	64bb      	str	r3, [r7, #72]	; 0x48
 8002946:	ea45 0301 	orr.w	r3, r5, r1
 800294a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800294c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002950:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->y = u_y.real;
 8002954:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002958:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800295c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002964:	3308      	adds	r3, #8
 8002966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800297a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800297e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	ea40 0402 	orr.w	r4, r0, r2
 8002990:	643c      	str	r4, [r7, #64]	; 0x40
 8002992:	430b      	orrs	r3, r1
 8002994:	647b      	str	r3, [r7, #68]	; 0x44
 8002996:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800299a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800299e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80029a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029ac:	4413      	add	r3, r2
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	f04f 0000 	mov.w	r0, #0
 80029ba:	f04f 0100 	mov.w	r1, #0
 80029be:	0219      	lsls	r1, r3, #8
 80029c0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80029c4:	0210      	lsls	r0, r2, #8
 80029c6:	ea44 0300 	orr.w	r3, r4, r0
 80029ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80029cc:	ea45 0301 	orr.w	r3, r5, r1
 80029d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80029d6:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029da:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80029de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e2:	1c9a      	adds	r2, r3, #2
 80029e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029e8:	4413      	add	r3, r2
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	f04f 0000 	mov.w	r0, #0
 80029f6:	f04f 0100 	mov.w	r1, #0
 80029fa:	0419      	lsls	r1, r3, #16
 80029fc:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002a00:	0410      	lsls	r0, r2, #16
 8002a02:	ea44 0300 	orr.w	r3, r4, r0
 8002a06:	633b      	str	r3, [r7, #48]	; 0x30
 8002a08:	ea45 0301 	orr.w	r3, r5, r1
 8002a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a0e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002a12:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a1e:	1cda      	adds	r2, r3, #3
 8002a20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a24:	4413      	add	r3, r2
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	0a14      	lsrs	r4, r2, #8
 8002a30:	62fc      	str	r4, [r7, #44]	; 0x2c
 8002a32:	0613      	lsls	r3, r2, #24
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a36:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002a3a:	4623      	mov	r3, r4
 8002a3c:	4303      	orrs	r3, r0
 8002a3e:	623b      	str	r3, [r7, #32]
 8002a40:	462b      	mov	r3, r5
 8002a42:	430b      	orrs	r3, r1
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
 8002a46:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002a4a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002a4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a56:	3304      	adds	r3, #4
 8002a58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a5c:	4413      	add	r3, r2
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	b2dc      	uxtb	r4, r3
 8002a62:	f04f 0500 	mov.w	r5, #0
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	0023      	movs	r3, r4
 8002a70:	2200      	movs	r2, #0
 8002a72:	ea40 0402 	orr.w	r4, r0, r2
 8002a76:	61bc      	str	r4, [r7, #24]
 8002a78:	430b      	orrs	r3, r1
 8002a7a:	61fb      	str	r3, [r7, #28]
 8002a7c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002a80:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002a84:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a8c:	3305      	adds	r3, #5
 8002a8e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a92:	4413      	add	r3, r2
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	b2dc      	uxtb	r4, r3
 8002a98:	f04f 0500 	mov.w	r5, #0
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	0223      	lsls	r3, r4, #8
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	ea40 0402 	orr.w	r4, r0, r2
 8002aac:	613c      	str	r4, [r7, #16]
 8002aae:	430b      	orrs	r3, r1
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002ab6:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002aba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac2:	3306      	adds	r3, #6
 8002ac4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ac8:	4413      	add	r3, r2
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	b2dc      	uxtb	r4, r3
 8002ace:	f04f 0500 	mov.w	r5, #0
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	0423      	lsls	r3, r4, #16
 8002adc:	2200      	movs	r2, #0
 8002ade:	ea40 0402 	orr.w	r4, r0, r2
 8002ae2:	60bc      	str	r4, [r7, #8]
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002aec:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002af0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af8:	3307      	adds	r3, #7
 8002afa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002afe:	4413      	add	r3, r2
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	b2dc      	uxtb	r4, r3
 8002b04:	f04f 0500 	mov.w	r5, #0
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	0623      	lsls	r3, r4, #24
 8002b12:	2200      	movs	r2, #0
 8002b14:	ea40 0402 	orr.w	r4, r0, r2
 8002b18:	603c      	str	r4, [r7, #0]
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b22:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      this->z = u_z.real;
 8002b26:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002b2a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8002b2e:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b36:	3308      	adds	r3, #8
 8002b38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     return offset;
 8002b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    }
 8002b40:	4618      	mov	r0, r3
 8002b42:	37ec      	adds	r7, #236	; 0xec
 8002b44:	46bd      	mov	sp, r7
 8002b46:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002b4a:	4770      	bx	lr

08002b4c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	08009ef4 	.word	0x08009ef4

08002b68 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	08009f0c 	.word	0x08009f0c

08002b84 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe fbb8 	bl	8001304 <_ZN3ros3MsgC1Ev>
 8002b94:	4a08      	ldr	r2, [pc, #32]	; (8002bb8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fb5c 	bl	800225c <_ZN13geometry_msgs7Vector3C1Ev>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3328      	adds	r3, #40	; 0x28
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fb57 	bl	800225c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	0800a0cc 	.word	0x0800a0cc

08002bbc <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f103 0008 	add.w	r0, r3, #8
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f7ff fb68 	bl	80022ac <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4413      	add	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f7ff fb5b 	bl	80022ac <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
      return offset;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
    }
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f103 0008 	add.w	r0, r3, #8
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	4413      	add	r3, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	f7ff fcb5 	bl	8002592 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f7ff fca8 	bl	8002592 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002c42:	4602      	mov	r2, r0
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4413      	add	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
     return offset;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
    }
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	08009f30 	.word	0x08009f30

08002c70 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	08009f44 	.word	0x08009f44

08002c8c <_ZN13freeway_joyfw10stm_fw_msgC1Ev>:
      typedef bool _e_stop_status_type;
      _e_stop_status_type e_stop_status;
      typedef geometry_msgs::Twist _cmd_vel_mcu_type;
      _cmd_vel_mcu_type cmd_vel_mcu;

    stm_fw_msg():
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
      am_status(0),
      e_stop_status(0),
      cmd_vel_mcu()
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe fb34 	bl	8001304 <_ZN3ros3MsgC1Ev>
 8002c9c:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <_ZN13freeway_joyfw10stm_fw_msgC1Ev+0x38>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	711a      	strb	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	715a      	strb	r2, [r3, #5]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ff66 	bl	8002b84 <_ZN13geometry_msgs5TwistC1Ev>
    {
    }
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	0800a0b4 	.word	0x0800a0b4

08002cc8 <_ZNK13freeway_joyfw10stm_fw_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_am_status;
      u_am_status.real = this->am_status;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	791b      	ldrb	r3, [r3, #4]
 8002cda:	743b      	strb	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_am_status.base >> (8 * 0)) & 0xFF;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	7c3a      	ldrb	r2, [r7, #16]
 8002ce4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->am_status);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_e_stop_status;
      u_e_stop_status.real = this->e_stop_status;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	795b      	ldrb	r3, [r3, #5]
 8002cf0:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_e_stop_status.base >> (8 * 0)) & 0xFF;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	7b3a      	ldrb	r2, [r7, #12]
 8002cfa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->e_stop_status);
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	617b      	str	r3, [r7, #20]
      offset += this->cmd_vel_mcu.serialize(outbuffer + offset);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f103 0008 	add.w	r0, r3, #8
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f7ff ff54 	bl	8002bbc <_ZNK13geometry_msgs5Twist9serializeEPh>
 8002d14:	4602      	mov	r2, r0
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	4413      	add	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]
      return offset;
 8002d1c:	697b      	ldr	r3, [r7, #20]
    }
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <_ZN13freeway_joyfw10stm_fw_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_am_status;
      u_am_status.base = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	743b      	strb	r3, [r7, #16]
      u_am_status.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d38:	7c3a      	ldrb	r2, [r7, #16]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	6839      	ldr	r1, [r7, #0]
 8002d3e:	440b      	add	r3, r1
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	743b      	strb	r3, [r7, #16]
      this->am_status = u_am_status.real;
 8002d48:	7c3a      	ldrb	r2, [r7, #16]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->am_status);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3301      	adds	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
      union {
        bool real;
        uint8_t base;
      } u_e_stop_status;
      u_e_stop_status.base = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	733b      	strb	r3, [r7, #12]
      u_e_stop_status.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002d58:	7b3a      	ldrb	r2, [r7, #12]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	6839      	ldr	r1, [r7, #0]
 8002d5e:	440b      	add	r3, r1
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	733b      	strb	r3, [r7, #12]
      this->e_stop_status = u_e_stop_status.real;
 8002d68:	7b3a      	ldrb	r2, [r7, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	715a      	strb	r2, [r3, #5]
      offset += sizeof(this->e_stop_status);
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	3301      	adds	r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
      offset += this->cmd_vel_mcu.deserialize(inbuffer + offset);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f103 0008 	add.w	r0, r3, #8
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	f7ff ff41 	bl	8002c08 <_ZN13geometry_msgs5Twist11deserializeEPh>
 8002d86:	4602      	mov	r2, r0
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
     return offset;
 8002d8e:	697b      	ldr	r3, [r7, #20]
    }
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_ZN13freeway_joyfw10stm_fw_msg7getTypeEv>:

    const char * getType(){ return "freeway_joyfw/stm_fw_msg"; };
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <_ZN13freeway_joyfw10stm_fw_msg7getTypeEv+0x18>)
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	08009f68 	.word	0x08009f68

08002db4 <_ZN13freeway_joyfw10stm_fw_msg6getMD5Ev>:
    const char * getMD5(){ return "fa2d9ef9f2382f4119166968f815e551"; };
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <_ZN13freeway_joyfw10stm_fw_msg6getMD5Ev+0x18>)
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	08009f84 	.word	0x08009f84

08002dd0 <_ZN13freeway_joyfw10stm_am_msgC1Ev>:
  {
    public:
      typedef bool _am_status2_type;
      _am_status2_type am_status2;

    stm_am_msg():
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
      am_status2(0)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fa92 	bl	8001304 <_ZN3ros3MsgC1Ev>
 8002de0:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <_ZN13freeway_joyfw10stm_am_msgC1Ev+0x28>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	711a      	strb	r2, [r3, #4]
    {
    }
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	0800a09c 	.word	0x0800a09c

08002dfc <_ZNK13freeway_joyfw10stm_am_msg9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_am_status2;
      u_am_status2.real = this->am_status2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	791b      	ldrb	r3, [r3, #4]
 8002e0e:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_am_status2.base >> (8 * 0)) & 0xFF;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	4413      	add	r3, r2
 8002e16:	7a3a      	ldrb	r2, [r7, #8]
 8002e18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->am_status2);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
      return offset;
 8002e20:	68fb      	ldr	r3, [r7, #12]
    }
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <_ZN13freeway_joyfw10stm_am_msg11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_am_status2;
      u_am_status2.base = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	723b      	strb	r3, [r7, #8]
      u_am_status2.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e40:	7a3a      	ldrb	r2, [r7, #8]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6839      	ldr	r1, [r7, #0]
 8002e46:	440b      	add	r3, r1
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	723b      	strb	r3, [r7, #8]
      this->am_status2 = u_am_status2.real;
 8002e50:	7a3a      	ldrb	r2, [r7, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->am_status2);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
     return offset;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
    }
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <_ZN13freeway_joyfw10stm_am_msg7getTypeEv>:

    const char * getType(){ return "freeway_joyfw/stm_am_msg"; };
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <_ZN13freeway_joyfw10stm_am_msg7getTypeEv+0x18>)
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	08009fa8 	.word	0x08009fa8

08002e88 <_ZN13freeway_joyfw10stm_am_msg6getMD5Ev>:
    const char * getMD5(){ return "7d69f08cbd0079f4e385def6382afcb2"; };
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <_ZN13freeway_joyfw10stm_am_msg6getMD5Ev+0x18>)
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	08009fc4 	.word	0x08009fc4

08002ea4 <_Z12am_status_cbRKN13freeway_joyfw10stm_am_msgE>:
bool axis_B = true;
double l_scale_ = 0.3;
double a_scale_ = 0.4;

// Subscriber:
void am_status_cb(const freeway_joyfw::stm_am_msg &msg) {
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	bool tf = msg.am_status2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	791b      	ldrb	r3, [r3, #4]
 8002eb0:	73fb      	strb	r3, [r7, #15]
	*am_status = tf;
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <_Z12am_status_cbRKN13freeway_joyfw10stm_am_msgE+0x24>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	7bfa      	ldrb	r2, [r7, #15]
 8002eb8:	701a      	strb	r2, [r3, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20001410 	.word	0x20001410

08002ecc <map>:
ros::Subscriber<freeway_joyfw::stm_am_msg> am_status_sub("freeway/am_status", &am_status_cb);

long map(uint32_t a, long b, long c, long d, long e) {
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
	return (a - b)*(e - d)/(c - b) + d;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	69b9      	ldr	r1, [r7, #24]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	1a8a      	subs	r2, r1, r2
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	1a8a      	subs	r2, r1, r2
 8002ef0:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4413      	add	r3, r2
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <setup>:

uint32_t previous_time;
uint32_t pub_period_time = 50;

// Setup node:
void setup(void) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  nh.initNode();
 8002f08:	4809      	ldr	r0, [pc, #36]	; (8002f30 <setup+0x2c>)
 8002f0a:	f000 fa1d 	bl	8003348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
//  nh.advertiseService(server);
//  nh.advertiseService(server2);
  nh.subscribe(am_status_sub);
 8002f0e:	4909      	ldr	r1, [pc, #36]	; (8002f34 <setup+0x30>)
 8002f10:	4807      	ldr	r0, [pc, #28]	; (8002f30 <setup+0x2c>)
 8002f12:	f000 fa3e 	bl	8003392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_>
  nh.advertise(freeway_diagnostics);
 8002f16:	4908      	ldr	r1, [pc, #32]	; (8002f38 <setup+0x34>)
 8002f18:	4805      	ldr	r0, [pc, #20]	; (8002f30 <setup+0x2c>)
 8002f1a:	f000 fa65 	bl	80033e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
  //nh.advertiseService(server2);
  e_stop_status = &td;
 8002f1e:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <setup+0x38>)
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <setup+0x3c>)
 8002f22:	601a      	str	r2, [r3, #0]
  am_status = &fd;
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <setup+0x40>)
 8002f26:	4a08      	ldr	r2, [pc, #32]	; (8002f48 <setup+0x44>)
 8002f28:	601a      	str	r2, [r3, #0]
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000220 	.word	0x20000220
 8002f34:	20001428 	.word	0x20001428
 8002f38:	200013f8 	.word	0x200013f8
 8002f3c:	2000140c 	.word	0x2000140c
 8002f40:	20000000 	.word	0x20000000
 8002f44:	20001410 	.word	0x20001410
 8002f48:	20001414 	.word	0x20001414

08002f4c <loop>:

// Loop:
void loop(uint32_t x_val, uint32_t y_val) {
 8002f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]


if(previous_time + pub_period_time <= HAL_GetTick()) {
 8002f56:	4b54      	ldr	r3, [pc, #336]	; (80030a8 <loop+0x15c>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b54      	ldr	r3, [pc, #336]	; (80030ac <loop+0x160>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	18d6      	adds	r6, r2, r3
 8002f60:	f001 fa96 	bl	8004490 <HAL_GetTick>
 8002f64:	4603      	mov	r3, r0
 8002f66:	429e      	cmp	r6, r3
 8002f68:	bf94      	ite	ls
 8002f6a:	2301      	movls	r3, #1
 8002f6c:	2300      	movhi	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 808e 	beq.w	8003092 <loop+0x146>
  if (*e_stop_status==true && *am_status==true) { //if var 'am_status == true' , it defines manual mode
 8002f76:	4b4e      	ldr	r3, [pc, #312]	; (80030b0 <loop+0x164>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d164      	bne.n	800304a <loop+0xfe>
 8002f80:	4b4c      	ldr	r3, [pc, #304]	; (80030b4 <loop+0x168>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d15f      	bne.n	800304a <loop+0xfe>
	  axis_X = map(x_val,0,4095,-10000,10000) / (float)10000.0;
 8002f8a:	f242 7310 	movw	r3, #10000	; 0x2710
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	4b49      	ldr	r3, [pc, #292]	; (80030b8 <loop+0x16c>)
 8002f92:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002f96:	2100      	movs	r1, #0
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ff97 	bl	8002ecc <map>
 8002f9e:	ee07 0a90 	vmov	s15, r0
 8002fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fa6:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80030bc <loop+0x170>
 8002faa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002fae:	ee16 0a90 	vmov	r0, s13
 8002fb2:	f7fd fae9 	bl	8000588 <__aeabi_f2d>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4941      	ldr	r1, [pc, #260]	; (80030c0 <loop+0x174>)
 8002fbc:	e9c1 2300 	strd	r2, r3, [r1]
	  axis_Y = map(y_val,0,4095,-10000,10000) / (float)10000.0;
 8002fc0:	f242 7310 	movw	r3, #10000	; 0x2710
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	4b3c      	ldr	r3, [pc, #240]	; (80030b8 <loop+0x16c>)
 8002fc8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002fcc:	2100      	movs	r1, #0
 8002fce:	6838      	ldr	r0, [r7, #0]
 8002fd0:	f7ff ff7c 	bl	8002ecc <map>
 8002fd4:	ee07 0a90 	vmov	s15, r0
 8002fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fdc:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80030bc <loop+0x170>
 8002fe0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002fe4:	ee16 0a90 	vmov	r0, s13
 8002fe8:	f7fd face 	bl	8000588 <__aeabi_f2d>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4934      	ldr	r1, [pc, #208]	; (80030c4 <loop+0x178>)
 8002ff2:	e9c1 2300 	strd	r2, r3, [r1]

	  //cmd_vel_msg.linear.x = l_scale_ * axis_X;
	  //cmd_vel_msg.angular.z = a_scale_ * axis_Y;
	  stm_pub_msg.am_status = true;
 8002ff6:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <loop+0x17c>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	711a      	strb	r2, [r3, #4]
	  stm_pub_msg.e_stop_status = true;
 8002ffc:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <loop+0x17c>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	715a      	strb	r2, [r3, #5]
	  stm_pub_msg.cmd_vel_mcu.linear.x = l_scale_ * axis_X;
 8003002:	4b32      	ldr	r3, [pc, #200]	; (80030cc <loop+0x180>)
 8003004:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003008:	4b2d      	ldr	r3, [pc, #180]	; (80030c0 <loop+0x174>)
 800300a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300e:	f7fd fb13 	bl	8000638 <__aeabi_dmul>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	492c      	ldr	r1, [pc, #176]	; (80030c8 <loop+0x17c>)
 8003018:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  stm_pub_msg.cmd_vel_mcu.angular.z = -a_scale_ * axis_Y;
 800301c:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <loop+0x184>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	4614      	mov	r4, r2
 8003024:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003028:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <loop+0x178>)
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302e:	4620      	mov	r0, r4
 8003030:	4629      	mov	r1, r5
 8003032:	f7fd fb01 	bl	8000638 <__aeabi_dmul>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4923      	ldr	r1, [pc, #140]	; (80030c8 <loop+0x17c>)
 800303c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	  freeway_diagnostics.publish(&stm_pub_msg);
 8003040:	4921      	ldr	r1, [pc, #132]	; (80030c8 <loop+0x17c>)
 8003042:	4824      	ldr	r0, [pc, #144]	; (80030d4 <loop+0x188>)
 8003044:	f7fe ffab 	bl	8001f9e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 8003048:	e01e      	b.n	8003088 <loop+0x13c>
  }
  else if (*e_stop_status==false) // e_stop is on & *am_status is on/off
 800304a:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <loop+0x164>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d119      	bne.n	8003088 <loop+0x13c>
  {
	  stm_pub_msg.am_status = *am_status;
 8003054:	4b17      	ldr	r3, [pc, #92]	; (80030b4 <loop+0x168>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	781a      	ldrb	r2, [r3, #0]
 800305a:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <loop+0x17c>)
 800305c:	711a      	strb	r2, [r3, #4]
	  stm_pub_msg.e_stop_status = false;
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <loop+0x17c>)
 8003060:	2200      	movs	r2, #0
 8003062:	715a      	strb	r2, [r3, #5]
	  stm_pub_msg.cmd_vel_mcu.linear.x = 0;
 8003064:	4918      	ldr	r1, [pc, #96]	; (80030c8 <loop+0x17c>)
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  stm_pub_msg.cmd_vel_mcu.angular.z = 0;
 8003072:	4915      	ldr	r1, [pc, #84]	; (80030c8 <loop+0x17c>)
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	  freeway_diagnostics.publish(&stm_pub_msg);
 8003080:	4911      	ldr	r1, [pc, #68]	; (80030c8 <loop+0x17c>)
 8003082:	4814      	ldr	r0, [pc, #80]	; (80030d4 <loop+0x188>)
 8003084:	f7fe ff8b 	bl	8001f9e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
  previous_time = HAL_GetTick();
 8003088:	f001 fa02 	bl	8004490 <HAL_GetTick>
 800308c:	4603      	mov	r3, r0
 800308e:	4a06      	ldr	r2, [pc, #24]	; (80030a8 <loop+0x15c>)
 8003090:	6013      	str	r3, [r2, #0]
}
  nh.spinOnce();
 8003092:	4811      	ldr	r0, [pc, #68]	; (80030d8 <loop+0x18c>)
 8003094:	f000 f9d8 	bl	8003448 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>

  HAL_Delay(1);
 8003098:	2001      	movs	r0, #1
 800309a:	f001 fa05 	bl	80044a8 <HAL_Delay>
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20001444 	.word	0x20001444
 80030ac:	20000018 	.word	0x20000018
 80030b0:	2000140c 	.word	0x2000140c
 80030b4:	20001410 	.word	0x20001410
 80030b8:	ffffd8f0 	.word	0xffffd8f0
 80030bc:	461c4000 	.word	0x461c4000
 80030c0:	20001418 	.word	0x20001418
 80030c4:	20001420 	.word	0x20001420
 80030c8:	200013a8 	.word	0x200013a8
 80030cc:	20000008 	.word	0x20000008
 80030d0:	20000010 	.word	0x20000010
 80030d4:	200013f8 	.word	0x200013f8
 80030d8:	20000220 	.word	0x20000220

080030dc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  static bool pin_stat = true;
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  pin_stat = HAL_GPIO_ReadPin (GPIOA, GPIO_Pin);
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	4619      	mov	r1, r3
 80030ea:	480a      	ldr	r0, [pc, #40]	; (8003114 <HAL_GPIO_EXTI_Callback+0x38>)
 80030ec:	f002 fc3c 	bl	8005968 <HAL_GPIO_ReadPin>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bf14      	ite	ne
 80030f6:	2301      	movne	r3, #1
 80030f8:	2300      	moveq	r3, #0
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_GPIO_EXTI_Callback+0x3c>)
 80030fe:	701a      	strb	r2, [r3, #0]

  *e_stop_status = pin_stat;
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_GPIO_EXTI_Callback+0x40>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a04      	ldr	r2, [pc, #16]	; (8003118 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003106:	7812      	ldrb	r2, [r2, #0]
 8003108:	701a      	strb	r2, [r3, #0]
//  RESULT.result = 1;
//
//  clt.call(ESTOP_STATUS, RESULT);
  //HAL_Delay(1);

}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40020000 	.word	0x40020000
 8003118:	2000001c 	.word	0x2000001c
 800311c:	2000140c 	.word	0x2000140c

08003120 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d80d      	bhi.n	8003150 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	fa22 f103 	lsr.w	r1, r2, r3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	b2ca      	uxtb	r2, r1
 8003146:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3301      	adds	r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	e7ee      	b.n	800312e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b03      	cmp	r3, #3
 8003174:	d811      	bhi.n	800319a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6839      	ldr	r1, [r7, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	440a      	add	r2, r1
 8003180:	7812      	ldrb	r2, [r2, #0]
 8003182:	4611      	mov	r1, r2
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	00d2      	lsls	r2, r2, #3
 8003188:	fa01 f202 	lsl.w	r2, r1, r2
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3301      	adds	r3, #1
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	e7ea      	b.n	8003170 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800319a:	bf00      	nop
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	0800a114 	.word	0x0800a114

080031c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff ffe8 	bl	80031a8 <_ZN3ros15NodeHandleBase_C1Ev>
 80031d8:	4a40      	ldr	r2, [pc, #256]	; (80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x114>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3304      	adds	r3, #4
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe ff0e 	bl	8002004 <_ZN13STM32HardwareC1Ev>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80031f8:	3314      	adds	r3, #20
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe fbf6 	bl	80019ec <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b18      	cmp	r3, #24
 8003208:	d80b      	bhi.n	8003222 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5a>
      publishers[i] = 0;
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	2200      	movs	r2, #0
 8003218:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	3301      	adds	r3, #1
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	e7f0      	b.n	8003204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3c>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b18      	cmp	r3, #24
 800322a:	d80a      	bhi.n	8003242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7a>
      subscribers[i] = 0;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003234:	2100      	movs	r1, #0
 8003236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	3301      	adds	r3, #1
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	e7f1      	b.n	8003226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324c:	d20a      	bcs.n	8003264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9c>
      message_in[i] = 0;
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3301      	adds	r3, #1
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e7f0      	b.n	8003246 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7e>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003264:	2300      	movs	r3, #0
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326e:	d20a      	bcs.n	8003286 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xbe>
      message_out[i] = 0;
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	4413      	add	r3, r2
 8003276:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	3301      	adds	r3, #1
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	e7f0      	b.n	8003268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa0>

    req_param_resp.ints_length = 0;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800328c:	3318      	adds	r3, #24
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
    req_param_resp.floats_length = 0;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80032a2:	3304      	adds	r3, #4
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
    req_param_resp.floats = NULL;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80032ae:	330c      	adds	r3, #12
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
    req_param_resp.ints_length = 0;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80032ba:	3318      	adds	r3, #24
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]

    spin_timeout_ = 0;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  }
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	0800a088 	.word	0x0800a088

080032e0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	4a04      	ldr	r2, [pc, #16]	; (80032fc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	0800a0fc 	.word	0x0800a0fc

08003300 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ffe5 	bl	80032e0 <_ZN3ros11Subscriber_C1Ev>
 8003316:	4a0b      	ldr	r2, [pc, #44]	; (8003344 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	330c      	adds	r3, #12
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fd55 	bl	8002dd0 <_ZN13freeway_joyfw10stm_am_msgC1Ev>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	615a      	str	r2, [r3, #20]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	609a      	str	r2, [r3, #8]
  };
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	0800a070 	.word	0x0800a070

08003348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe fe71 	bl	800203c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003360:	330c      	adds	r3, #12
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
    bytes_ = 0;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800336c:	3310      	adds	r3, #16
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
    index_ = 0;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003378:	3318      	adds	r3, #24
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
    topic_ = 0;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003384:	3314      	adds	r3, #20
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
  };
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b18      	cmp	r3, #24
 80033a4:	dc19      	bgt.n	80033da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80033ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10d      	bne.n	80033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80033b6:	6839      	ldr	r1, [r7, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80033c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	605a      	str	r2, [r3, #4]
        return true;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e004      	b.n	80033dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3301      	adds	r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e7e2      	b.n	80033a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13freeway_joyfw10stm_am_msgEvEEEEbRT_+0xe>
      }
    }
    return false;
 80033da:	2300      	movs	r3, #0
  }
 80033dc:	4618      	mov	r0, r3
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b18      	cmp	r3, #24
 80033fa:	dc1e      	bgt.n	800343a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d111      	bne.n	8003432 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	60da      	str	r2, [r3, #12]
        return true;
 800342e:	2301      	movs	r3, #1
 8003430:	e004      	b.n	800343c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3301      	adds	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	e7dd      	b.n	80033f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800343a:	2300      	movs	r3, #0
  }
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fef5 	bl	8002244 <_ZN13STM32Hardware4timeEv>
 800345a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003462:	3308      	adds	r3, #8
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800346e:	4293      	cmp	r3, r2
 8003470:	d904      	bls.n	800347c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x34>
      configured_ = false;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
    if (mode_ != MODE_FIRST_FF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003482:	330c      	adds	r3, #12
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00d      	beq.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      if (c_time > last_msg_timeout_time)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003490:	330c      	adds	r3, #12
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	429a      	cmp	r2, r3
 8003498:	d905      	bls.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80034a0:	330c      	adds	r3, #12
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
      if (spin_timeout_ > 0)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d014      	beq.n	80034da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x92>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3304      	adds	r3, #4
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fe fec5 	bl	8002244 <_ZN13STM32Hardware4timeEv>
 80034ba:	4602      	mov	r2, r0
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1ad2      	subs	r2, r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 80034c6:	429a      	cmp	r2, r3
 80034c8:	bf8c      	ite	hi
 80034ca:	2301      	movhi	r3, #1
 80034cc:	2300      	movls	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x92>
          return SPIN_TIMEOUT;
 80034d4:	f06f 0301 	mvn.w	r3, #1
 80034d8:	e210      	b.n	80038fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4b4>
      int data = hardware_.read();
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3304      	adds	r3, #4
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe fdc8 	bl	8002074 <_ZN13STM32Hardware4readEv>
 80034e4:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f2c0 81eb 	blt.w	80038c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x47c>
      checksum_ += data;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80034f4:	331c      	adds	r3, #28
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	441a      	add	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003502:	331c      	adds	r3, #28
 8003504:	601a      	str	r2, [r3, #0]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800350c:	330c      	adds	r3, #12
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b07      	cmp	r3, #7
 8003512:	d12a      	bne.n	800356a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x122>
        message_in[index_++] = data;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800351a:	3318      	adds	r3, #24
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	1c51      	adds	r1, r2, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003526:	3318      	adds	r3, #24
 8003528:	6019      	str	r1, [r3, #0]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	b2d9      	uxtb	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	460a      	mov	r2, r1
 8003534:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800353e:	3310      	adds	r3, #16
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	1e5a      	subs	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800354a:	3310      	adds	r3, #16
 800354c:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003554:	3310      	adds	r3, #16
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1a4      	bne.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003562:	330c      	adds	r3, #12
 8003564:	2208      	movs	r2, #8
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	e79d      	b.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_FIRST_FF)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003570:	330c      	adds	r3, #12
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d130      	bne.n	80035da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x192>
        if (data == 0xff)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2bff      	cmp	r3, #255	; 0xff
 800357c:	d113      	bne.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x15e>
          mode_++;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003584:	330c      	adds	r3, #12
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003590:	330c      	adds	r3, #12
 8003592:	601a      	str	r2, [r3, #0]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f103 0214 	add.w	r2, r3, #20
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80035a0:	330c      	adds	r3, #12
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	e77f      	b.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3304      	adds	r3, #4
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe fe4a 	bl	8002244 <_ZN13STM32Hardware4timeEv>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	bf8c      	ite	hi
 80035be:	2301      	movhi	r3, #1
 80035c0:	2300      	movls	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f43f af6e 	beq.w	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          configured_ = false;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
          return SPIN_TIMEOUT;
 80035d4:	f06f 0301 	mvn.w	r3, #1
 80035d8:	e190      	b.n	80038fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4b4>
      else if (mode_ == MODE_PROTOCOL_VER)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80035e0:	330c      	adds	r3, #12
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d11f      	bne.n	8003628 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1e0>
        if (data == PROTOCOL_VER)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2bfe      	cmp	r3, #254	; 0xfe
 80035ec:	d10b      	bne.n	8003606 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1be>
          mode_++;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80035f4:	330c      	adds	r3, #12
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003600:	330c      	adds	r3, #12
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e74f      	b.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800360c:	330c      	adds	r3, #12
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
          if (configured_ == false)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f47f af43 	bne.w	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f96f 	bl	8003904 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 8003626:	e73e      	b.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800362e:	330c      	adds	r3, #12
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d11d      	bne.n	8003672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x22a>
        bytes_ = data;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800363c:	3310      	adds	r3, #16
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	601a      	str	r2, [r3, #0]
        index_ = 0;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003648:	3318      	adds	r3, #24
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
        mode_++;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003654:	330c      	adds	r3, #12
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003660:	330c      	adds	r3, #12
 8003662:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte for calculating size checksum */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800366a:	331c      	adds	r3, #28
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	e719      	b.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003678:	330c      	adds	r3, #12
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b03      	cmp	r3, #3
 800367e:	d118      	bne.n	80036b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x26a>
        bytes_ += data << 8;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003686:	3310      	adds	r3, #16
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	441a      	add	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003696:	3310      	adds	r3, #16
 8003698:	601a      	str	r2, [r3, #0]
        mode_++;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80036a0:	330c      	adds	r3, #12
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80036ac:	330c      	adds	r3, #12
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e6f9      	b.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80036b8:	330c      	adds	r3, #12
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d11e      	bne.n	80036fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b6>
        if ((checksum_ % 256) == 255)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80036c6:	331c      	adds	r3, #28
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	425a      	negs	r2, r3
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	bf58      	it	pl
 80036d2:	4253      	negpl	r3, r2
 80036d4:	2bff      	cmp	r3, #255	; 0xff
 80036d6:	d10b      	bne.n	80036f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2a8>
          mode_++;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80036de:	330c      	adds	r3, #12
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80036ea:	330c      	adds	r3, #12
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e6da      	b.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80036f6:	330c      	adds	r3, #12
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	e6d3      	b.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003704:	330c      	adds	r3, #12
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b05      	cmp	r3, #5
 800370a:	d117      	bne.n	800373c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2f4>
        topic_ = data;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003712:	3314      	adds	r3, #20
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	601a      	str	r2, [r3, #0]
        mode_++;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800371e:	330c      	adds	r3, #12
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800372a:	330c      	adds	r3, #12
 800372c:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte included in checksum */
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003734:	331c      	adds	r3, #28
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e6b4      	b.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003742:	330c      	adds	r3, #12
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b06      	cmp	r3, #6
 8003748:	d121      	bne.n	800378e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x346>
        topic_ += data << 8;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003750:	3314      	adds	r3, #20
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	441a      	add	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003760:	3314      	adds	r3, #20
 8003762:	601a      	str	r2, [r3, #0]
        mode_ = MODE_MESSAGE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800376a:	330c      	adds	r3, #12
 800376c:	2207      	movs	r2, #7
 800376e:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003776:	3310      	adds	r3, #16
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f47f ae93 	bne.w	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003786:	330c      	adds	r3, #12
 8003788:	2208      	movs	r2, #8
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e68b      	b.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003794:	330c      	adds	r3, #12
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b08      	cmp	r3, #8
 800379a:	f47f ae84 	bne.w	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80037a4:	330c      	adds	r3, #12
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
        if ((checksum_ % 256) == 255)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80037b0:	331c      	adds	r3, #28
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	425a      	negs	r2, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	bf58      	it	pl
 80037bc:	4253      	negpl	r3, r2
 80037be:	2bff      	cmp	r3, #255	; 0xff
 80037c0:	f47f ae71 	bne.w	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80037ca:	3314      	adds	r3, #20
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d114      	bne.n	80037fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3b4>
            requestSyncTime();
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f896 	bl	8003904 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f8b1 	bl	8003940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80037e4:	3304      	adds	r3, #4
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	601a      	str	r2, [r3, #0]
            last_sync_receive_time = c_time;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80037f0:	3308      	adds	r3, #8
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	601a      	str	r2, [r3, #0]
            return SPIN_ERR;
 80037f6:	f04f 33ff 	mov.w	r3, #4294967295
 80037fa:	e07f      	b.n	80038fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4b4>
          else if (topic_ == TopicInfo::ID_TIME)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003802:	3314      	adds	r3, #20
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b0a      	cmp	r3, #10
 8003808:	d107      	bne.n	800381a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d2>
            syncTime(message_in);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003810:	4619      	mov	r1, r3
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f974 	bl	8003b00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8003818:	e645      	b.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003820:	3314      	adds	r3, #20
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b06      	cmp	r3, #6
 8003826:	d111      	bne.n	800384c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x404>
            req_param_resp.deserialize(message_in);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800382e:	3314      	adds	r3, #20
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f7fe fa0c 	bl	8001c56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003844:	3310      	adds	r3, #16
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	e62c      	b.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8003852:	3314      	adds	r3, #20
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b0b      	cmp	r3, #11
 8003858:	d105      	bne.n	8003866 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x41e>
            configured_ = false;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	e61f      	b.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
            if (subscribers[topic_ - 100])
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800386c:	3314      	adds	r3, #20
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800387a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f43f ae11 	beq.w	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
              subscribers[topic_ - 100]->callback(message_in);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800388a:	3314      	adds	r3, #20
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003898:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80038a2:	3314      	adds	r3, #20
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80038b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80038be:	4611      	mov	r1, r2
 80038c0:	4798      	blx	r3
    while (true)
 80038c2:	e5f0      	b.n	80034a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
        break;
 80038c4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d013      	beq.n	80038fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4b2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80038d8:	3304      	adds	r3, #4
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d908      	bls.n	80038fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4b2>
      requestSyncTime();
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f80b 	bl	8003904 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80038f4:	3304      	adds	r3, #4
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	601a      	str	r2, [r3, #0]
    return SPIN_OK;
 80038fa:	2300      	movs	r3, #0
  }
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	4618      	mov	r0, r3
 8003912:	f7fd fd07 	bl	8001324 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f107 020c 	add.w	r2, r7, #12
 8003920:	210a      	movs	r1, #10
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
    rt_time = hardware_.time();
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3304      	adds	r3, #4
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe fc8a 	bl	8002244 <_ZN13STM32Hardware4timeEv>
 8003930:	4602      	mov	r2, r0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 8003938:	bf00      	nop
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b08b      	sub	sp, #44	; 0x2c
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003948:	f107 030c 	add.w	r3, r7, #12
 800394c:	4618      	mov	r0, r3
 800394e:	f7fd fdd9 	bl	8001504 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003952:	2300      	movs	r3, #0
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	2b18      	cmp	r3, #24
 800395a:	dc63      	bgt.n	8003a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d056      	beq.n	8003a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	b29b      	uxth	r3, r3
 8003980:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3308      	adds	r3, #8
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4608      	mov	r0, r1
 80039bc:	4798      	blx	r3
 80039be:	4603      	mov	r3, r0
 80039c0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	6859      	ldr	r1, [r3, #4]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4608      	mov	r0, r1
 80039ea:	4798      	blx	r3
 80039ec:	4603      	mov	r3, r0
 80039ee:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80039f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039f4:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681c      	ldr	r4, [r3, #0]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fadb 	bl	8001fc6 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003a10:	4601      	mov	r1, r0
 8003a12:	f107 030c 	add.w	r3, r7, #12
 8003a16:	461a      	mov	r2, r3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	3301      	adds	r3, #1
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
 8003a22:	e798      	b.n	8003956 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a24:	2300      	movs	r3, #0
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	2b18      	cmp	r3, #24
 8003a2c:	dc5f      	bgt.n	8003aee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a32:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d053      	beq.n	8003ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a42:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a54:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003a68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a70:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4608      	mov	r0, r1
 8003a80:	4798      	blx	r3
 8003a82:	4603      	mov	r3, r0
 8003a84:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003a8e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a96:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	330c      	adds	r3, #12
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	4798      	blx	r3
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ab0:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681c      	ldr	r4, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abc:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003ac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac8:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4608      	mov	r0, r1
 8003ad8:	4798      	blx	r3
 8003ada:	4601      	mov	r1, r0
 8003adc:	f107 030c 	add.w	r3, r7, #12
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	3301      	adds	r3, #1
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
 8003aec:	e79c      	b.n	8003a28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
  }
 8003af8:	bf00      	nop
 8003afa:	372c      	adds	r7, #44	; 0x2c
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd90      	pop	{r4, r7, pc}

08003b00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003b0a:	f107 0308 	add.w	r3, r7, #8
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fd fc08 	bl	8001324 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3304      	adds	r3, #4
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fe fb93 	bl	8002244 <_ZN13STM32Hardware4timeEv>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003b2a:	f107 0308 	add.w	r3, r7, #8
 8003b2e:	6839      	ldr	r1, [r7, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fd fc67 	bl	8001404 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4916      	ldr	r1, [pc, #88]	; (8003b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003b3c:	fba1 1303 	umull	r1, r3, r1, r3
 8003b40:	099b      	lsrs	r3, r3, #6
 8003b42:	4413      	add	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003b46:	6939      	ldr	r1, [r7, #16]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003b4c:	fba3 0302 	umull	r0, r3, r3, r2
 8003b50:	099b      	lsrs	r3, r3, #6
 8003b52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b56:	fb00 f303 	mul.w	r3, r0, r3
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	440b      	add	r3, r1
 8003b64:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003b66:	f107 0308 	add.w	r3, r7, #8
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f8a6 	bl	8003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe fb63 	bl	8002244 <_ZN13STM32Hardware4timeEv>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003b86:	3308      	adds	r3, #8
 8003b88:	601a      	str	r2, [r3, #0]
  }
 8003b8a:	bf00      	nop
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	10624dd3 	.word	0x10624dd3
 8003b98:	000f4240 	.word	0x000f4240

08003b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b63      	cmp	r3, #99	; 0x63
 8003bac:	dd0a      	ble.n	8003bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x28>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	f083 0301 	eor.w	r3, r3, #1
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x28>
      return 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e077      	b.n	8003cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x118>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	f602 4224 	addw	r2, r2, #3108	; 0xc24
 8003bd0:	3207      	adds	r2, #7
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
 8003bd8:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	22ff      	movs	r2, #255	; 0xff
 8003bde:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24
    message_out[1] = PROTOCOL_VER;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	22fe      	movs	r2, #254	; 0xfe
 8003be6:	f883 2c25 	strb.w	r2, [r3, #3109]	; 0xc25
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f883 2c26 	strb.w	r2, [r3, #3110]	; 0xc26
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	121b      	asrs	r3, r3, #8
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f883 2c27 	strb.w	r2, [r3, #3111]	; 0xc27
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 2c26 	ldrb.w	r2, [r3, #3110]	; 0xc26
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 3c27 	ldrb.w	r3, [r3, #3111]	; 0xc27
 8003c0e:	4413      	add	r3, r2
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	b21b      	sxth	r3, r3
 8003c2a:	121b      	asrs	r3, r3, #8
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a

    /* calculate checksum */
    int chk = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003c38:	2305      	movs	r3, #5
 8003c3a:	61bb      	str	r3, [r7, #24]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	3306      	adds	r3, #6
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	dc0d      	bgt.n	8003c62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xc6>
      chk += message_out[i];
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	4413      	add	r3, r2
 8003c58:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	61bb      	str	r3, [r7, #24]
 8003c60:	e7ec      	b.n	8003c3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa0>
    l += 7;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	3307      	adds	r3, #7
 8003c66:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	425a      	negs	r2, r3
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	bf58      	it	pl
 8003c72:	4253      	negpl	r3, r2
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	1c59      	adds	r1, r3, #1
 8003c7a:	6179      	str	r1, [r7, #20]
 8003c7c:	43d2      	mvns	r2, r2
 8003c7e:	b2d1      	uxtb	r1, r2
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	460a      	mov	r2, r1
 8003c86:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24

    if (l <= OUTPUT_SIZE)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c90:	dc0a      	bgt.n	8003ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10c>
    {
      hardware_.write(message_out, l);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1d18      	adds	r0, r3, #4
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	f7fe fa8a 	bl	80021b8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	e005      	b.n	8003cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x118>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003ca8:	4904      	ldr	r1, [pc, #16]	; (8003cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x120>)
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f848 	bl	8003d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8003cb0:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3720      	adds	r7, #32
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	08009fe8 	.word	0x08009fe8

08003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fab8 	bl	8002244 <_ZN13STM32Hardware4timeEv>
 8003cd4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4915      	ldr	r1, [pc, #84]	; (8003d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003cde:	fba1 1303 	umull	r1, r3, r1, r3
 8003ce2:	099b      	lsrs	r3, r3, #6
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	1e5a      	subs	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6859      	ldr	r1, [r3, #4]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003cf6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cfa:	099b      	lsrs	r3, r3, #6
 8003cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d00:	fb00 f303 	mul.w	r3, r0, r3
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	4a0c      	ldr	r2, [pc, #48]	; (8003d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 8003d08:	fb02 f303 	mul.w	r3, r2, r3
 8003d0c:	1aca      	subs	r2, r1, r3
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8003d10:	4413      	add	r3, r2
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f7fd f8da 	bl	8000ee0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	10624dd3 	.word	0x10624dd3
 8003d38:	000f4240 	.word	0x000f4240
 8003d3c:	3b9aca00 	.word	0x3b9aca00

08003d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	2103      	movs	r1, #3
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f804 	bl	8003d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	460b      	mov	r3, r1
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003d6a:	f107 0314 	add.w	r3, r7, #20
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fd fd8c 	bl	800188c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003d74:	7afb      	ldrb	r3, [r7, #11]
 8003d76:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f107 0214 	add.w	r2, r7, #20
 8003d86:	2107      	movs	r1, #7
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	4798      	blx	r3
  }
 8003d8c:	bf00      	nop
 8003d8e:	3720      	adds	r7, #32
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <_Z41__static_initialization_and_destruction_0ii>:
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d119      	bne.n	8003dd8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d114      	bne.n	8003dd8 <_Z41__static_initialization_and_destruction_0ii+0x44>
ros::NodeHandle nh;
 8003dae:	480c      	ldr	r0, [pc, #48]	; (8003de0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003db0:	f7ff fa0a 	bl	80031c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Twist cmd_vel_msg;
 8003db4:	480b      	ldr	r0, [pc, #44]	; (8003de4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003db6:	f7fe fee5 	bl	8002b84 <_ZN13geometry_msgs5TwistC1Ev>
freeway_joyfw::stm_fw_msg stm_pub_msg;
 8003dba:	480b      	ldr	r0, [pc, #44]	; (8003de8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003dbc:	f7fe ff66 	bl	8002c8c <_ZN13freeway_joyfw10stm_fw_msgC1Ev>
ros::Publisher freeway_diagnostics("freeway/diagnostics", &stm_pub_msg);
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003dc4:	4909      	ldr	r1, [pc, #36]	; (8003dec <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003dc6:	480a      	ldr	r0, [pc, #40]	; (8003df0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003dc8:	f7fe f8d2 	bl	8001f70 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<freeway_joyfw::stm_am_msg> am_status_sub("freeway/am_status", &am_status_cb);
 8003dcc:	2301      	movs	r3, #1
 8003dce:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003dd0:	4909      	ldr	r1, [pc, #36]	; (8003df8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003dd2:	480a      	ldr	r0, [pc, #40]	; (8003dfc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003dd4:	f7ff fa94 	bl	8003300 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvEC1EPKcPFvRKS2_Ei>
}
 8003dd8:	bf00      	nop
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000220 	.word	0x20000220
 8003de4:	20001360 	.word	0x20001360
 8003de8:	200013a8 	.word	0x200013a8
 8003dec:	0800a024 	.word	0x0800a024
 8003df0:	200013f8 	.word	0x200013f8
 8003df4:	08002ea5 	.word	0x08002ea5
 8003df8:	0800a038 	.word	0x0800a038
 8003dfc:	20001428 	.word	0x20001428

08003e00 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	6839      	ldr	r1, [r7, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff f80c 	bl	8002e2e <_ZN13freeway_joyfw10stm_am_msg11deserializeEPh>
    this->cb_(msg);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	320c      	adds	r2, #12
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4798      	blx	r3
  }
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
  }
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	330c      	adds	r3, #12
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff f80c 	bl	8002e6c <_ZN13freeway_joyfw10stm_am_msg7getTypeEv>
 8003e54:	4603      	mov	r3, r0
  }
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <_ZN3ros10SubscriberIN13freeway_joyfw10stm_am_msgEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	330c      	adds	r3, #12
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff f80c 	bl	8002e88 <_ZN13freeway_joyfw10stm_am_msg6getMD5Ev>
 8003e70:	4603      	mov	r3, r0
  }
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
    return configured_;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003e88:	781b      	ldrb	r3, [r3, #0]
  };
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <_GLOBAL__sub_I_nh>:
 8003e96:	b580      	push	{r7, lr}
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e9e:	2001      	movs	r0, #1
 8003ea0:	f7ff ff78 	bl	8003d94 <_Z41__static_initialization_and_destruction_0ii>
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <HAL_MspInit+0x4c>)
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	4a0f      	ldr	r2, [pc, #60]	; (8003ef4 <HAL_MspInit+0x4c>)
 8003eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <HAL_MspInit+0x4c>)
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec6:	607b      	str	r3, [r7, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eca:	2300      	movs	r3, #0
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <HAL_MspInit+0x4c>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	4a08      	ldr	r2, [pc, #32]	; (8003ef4 <HAL_MspInit+0x4c>)
 8003ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_MspInit+0x4c>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800

08003ef8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08a      	sub	sp, #40	; 0x28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f00:	f107 0314 	add.w	r3, r7, #20
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	60da      	str	r2, [r3, #12]
 8003f0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <HAL_ADC_MspInit+0x7c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d127      	bne.n	8003f6a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <HAL_ADC_MspInit+0x80>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <HAL_ADC_MspInit+0x80>)
 8003f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f28:	6453      	str	r3, [r2, #68]	; 0x44
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <HAL_ADC_MspInit+0x80>)
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <HAL_ADC_MspInit+0x80>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	4a0e      	ldr	r2, [pc, #56]	; (8003f78 <HAL_ADC_MspInit+0x80>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	6313      	str	r3, [r2, #48]	; 0x30
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <HAL_ADC_MspInit+0x80>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f52:	2303      	movs	r3, #3
 8003f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f56:	2303      	movs	r3, #3
 8003f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f5e:	f107 0314 	add.w	r3, r7, #20
 8003f62:	4619      	mov	r1, r3
 8003f64:	4805      	ldr	r0, [pc, #20]	; (8003f7c <HAL_ADC_MspInit+0x84>)
 8003f66:	f001 fb6b 	bl	8005640 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f6a:	bf00      	nop
 8003f6c:	3728      	adds	r7, #40	; 0x28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40012000 	.word	0x40012000
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40020000 	.word	0x40020000

08003f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f88:	f107 0314 	add.w	r3, r7, #20
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a4d      	ldr	r2, [pc, #308]	; (80040d4 <HAL_UART_MspInit+0x154>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	f040 8094 	bne.w	80040cc <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	4b4b      	ldr	r3, [pc, #300]	; (80040d8 <HAL_UART_MspInit+0x158>)
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	4a4a      	ldr	r2, [pc, #296]	; (80040d8 <HAL_UART_MspInit+0x158>)
 8003fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb4:	4b48      	ldr	r3, [pc, #288]	; (80040d8 <HAL_UART_MspInit+0x158>)
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	4b44      	ldr	r3, [pc, #272]	; (80040d8 <HAL_UART_MspInit+0x158>)
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	4a43      	ldr	r2, [pc, #268]	; (80040d8 <HAL_UART_MspInit+0x158>)
 8003fca:	f043 0304 	orr.w	r3, r3, #4
 8003fce:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd0:	4b41      	ldr	r3, [pc, #260]	; (80040d8 <HAL_UART_MspInit+0x158>)
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003fdc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fea:	2303      	movs	r3, #3
 8003fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fee:	2307      	movs	r3, #7
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ff2:	f107 0314 	add.w	r3, r7, #20
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4838      	ldr	r0, [pc, #224]	; (80040dc <HAL_UART_MspInit+0x15c>)
 8003ffa:	f001 fb21 	bl	8005640 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003ffe:	4b38      	ldr	r3, [pc, #224]	; (80040e0 <HAL_UART_MspInit+0x160>)
 8004000:	4a38      	ldr	r2, [pc, #224]	; (80040e4 <HAL_UART_MspInit+0x164>)
 8004002:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004004:	4b36      	ldr	r3, [pc, #216]	; (80040e0 <HAL_UART_MspInit+0x160>)
 8004006:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800400a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800400c:	4b34      	ldr	r3, [pc, #208]	; (80040e0 <HAL_UART_MspInit+0x160>)
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004012:	4b33      	ldr	r3, [pc, #204]	; (80040e0 <HAL_UART_MspInit+0x160>)
 8004014:	2200      	movs	r2, #0
 8004016:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004018:	4b31      	ldr	r3, [pc, #196]	; (80040e0 <HAL_UART_MspInit+0x160>)
 800401a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800401e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004020:	4b2f      	ldr	r3, [pc, #188]	; (80040e0 <HAL_UART_MspInit+0x160>)
 8004022:	2200      	movs	r2, #0
 8004024:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004026:	4b2e      	ldr	r3, [pc, #184]	; (80040e0 <HAL_UART_MspInit+0x160>)
 8004028:	2200      	movs	r2, #0
 800402a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800402c:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <HAL_UART_MspInit+0x160>)
 800402e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004032:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004034:	4b2a      	ldr	r3, [pc, #168]	; (80040e0 <HAL_UART_MspInit+0x160>)
 8004036:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800403a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800403c:	4b28      	ldr	r3, [pc, #160]	; (80040e0 <HAL_UART_MspInit+0x160>)
 800403e:	2200      	movs	r2, #0
 8004040:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004042:	4827      	ldr	r0, [pc, #156]	; (80040e0 <HAL_UART_MspInit+0x160>)
 8004044:	f000 ff6a 	bl	8004f1c <HAL_DMA_Init>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800404e:	f7fd f941 	bl	80012d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a22      	ldr	r2, [pc, #136]	; (80040e0 <HAL_UART_MspInit+0x160>)
 8004056:	635a      	str	r2, [r3, #52]	; 0x34
 8004058:	4a21      	ldr	r2, [pc, #132]	; (80040e0 <HAL_UART_MspInit+0x160>)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800405e:	4b22      	ldr	r3, [pc, #136]	; (80040e8 <HAL_UART_MspInit+0x168>)
 8004060:	4a22      	ldr	r2, [pc, #136]	; (80040ec <HAL_UART_MspInit+0x16c>)
 8004062:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004064:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <HAL_UART_MspInit+0x168>)
 8004066:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800406a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800406c:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <HAL_UART_MspInit+0x168>)
 800406e:	2240      	movs	r2, #64	; 0x40
 8004070:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004072:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <HAL_UART_MspInit+0x168>)
 8004074:	2200      	movs	r2, #0
 8004076:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004078:	4b1b      	ldr	r3, [pc, #108]	; (80040e8 <HAL_UART_MspInit+0x168>)
 800407a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800407e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004080:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <HAL_UART_MspInit+0x168>)
 8004082:	2200      	movs	r2, #0
 8004084:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004086:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <HAL_UART_MspInit+0x168>)
 8004088:	2200      	movs	r2, #0
 800408a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800408c:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <HAL_UART_MspInit+0x168>)
 800408e:	2200      	movs	r2, #0
 8004090:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <HAL_UART_MspInit+0x168>)
 8004094:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004098:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800409a:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <HAL_UART_MspInit+0x168>)
 800409c:	2200      	movs	r2, #0
 800409e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80040a0:	4811      	ldr	r0, [pc, #68]	; (80040e8 <HAL_UART_MspInit+0x168>)
 80040a2:	f000 ff3b 	bl	8004f1c <HAL_DMA_Init>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 80040ac:	f7fd f912 	bl	80012d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a0d      	ldr	r2, [pc, #52]	; (80040e8 <HAL_UART_MspInit+0x168>)
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
 80040b6:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <HAL_UART_MspInit+0x168>)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80040bc:	2200      	movs	r2, #0
 80040be:	2100      	movs	r1, #0
 80040c0:	2027      	movs	r0, #39	; 0x27
 80040c2:	f000 fef4 	bl	8004eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80040c6:	2027      	movs	r0, #39	; 0x27
 80040c8:	f000 ff0d 	bl	8004ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80040cc:	bf00      	nop
 80040ce:	3728      	adds	r7, #40	; 0x28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40004800 	.word	0x40004800
 80040d8:	40023800 	.word	0x40023800
 80040dc:	40020800 	.word	0x40020800
 80040e0:	20001454 	.word	0x20001454
 80040e4:	40026028 	.word	0x40026028
 80040e8:	200014f8 	.word	0x200014f8
 80040ec:	40026058 	.word	0x40026058

080040f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040f4:	bf00      	nop
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040fe:	b480      	push	{r7}
 8004100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004102:	e7fe      	b.n	8004102 <HardFault_Handler+0x4>

08004104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004108:	e7fe      	b.n	8004108 <MemManage_Handler+0x4>

0800410a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800410a:	b480      	push	{r7}
 800410c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800410e:	e7fe      	b.n	800410e <BusFault_Handler+0x4>

08004110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004114:	e7fe      	b.n	8004114 <UsageFault_Handler+0x4>

08004116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004116:	b480      	push	{r7}
 8004118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004128:	bf00      	nop
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004132:	b480      	push	{r7}
 8004134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004144:	f000 f990 	bl	8004468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004148:	bf00      	nop
 800414a:	bd80      	pop	{r7, pc}

0800414c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004150:	2008      	movs	r0, #8
 8004152:	f001 fc21 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004160:	4802      	ldr	r0, [pc, #8]	; (800416c <DMA1_Stream1_IRQHandler+0x10>)
 8004162:	f001 f803 	bl	800516c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20001454 	.word	0x20001454

08004170 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004174:	4802      	ldr	r0, [pc, #8]	; (8004180 <DMA1_Stream3_IRQHandler+0x10>)
 8004176:	f000 fff9 	bl	800516c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	200014f8 	.word	0x200014f8

08004184 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004188:	2020      	movs	r0, #32
 800418a:	f001 fc05 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004198:	4802      	ldr	r0, [pc, #8]	; (80041a4 <USART3_IRQHandler+0x10>)
 800419a:	f002 fa1f 	bl	80065dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	200014b4 	.word	0x200014b4

080041a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80041ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041b0:	f001 fbf2 	bl	8005998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
	return 1;
 80041bc:	2301      	movs	r3, #1
}
 80041be:	4618      	mov	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <_kill>:

int _kill(int pid, int sig)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041d2:	f003 f8e7 	bl	80073a4 <__errno>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2216      	movs	r2, #22
 80041da:	601a      	str	r2, [r3, #0]
	return -1;
 80041dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <_exit>:

void _exit (int status)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041f0:	f04f 31ff 	mov.w	r1, #4294967295
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ffe7 	bl	80041c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80041fa:	e7fe      	b.n	80041fa <_exit+0x12>

080041fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e00a      	b.n	8004224 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800420e:	f3af 8000 	nop.w
 8004212:	4601      	mov	r1, r0
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	60ba      	str	r2, [r7, #8]
 800421a:	b2ca      	uxtb	r2, r1
 800421c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	3301      	adds	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	429a      	cmp	r2, r3
 800422a:	dbf0      	blt.n	800420e <_read+0x12>
	}

return len;
 800422c:	687b      	ldr	r3, [r7, #4]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b086      	sub	sp, #24
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
 8004246:	e009      	b.n	800425c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	60ba      	str	r2, [r7, #8]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	3301      	adds	r3, #1
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	dbf1      	blt.n	8004248 <_write+0x12>
	}
	return len;
 8004264:	687b      	ldr	r3, [r7, #4]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <_close>:

int _close(int file)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
	return -1;
 8004276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004296:	605a      	str	r2, [r3, #4]
	return 0;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <_isatty>:

int _isatty(int file)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
	return 1;
 80042ae:	2301      	movs	r3, #1
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
	return 0;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042e0:	4a14      	ldr	r2, [pc, #80]	; (8004334 <_sbrk+0x5c>)
 80042e2:	4b15      	ldr	r3, [pc, #84]	; (8004338 <_sbrk+0x60>)
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042ec:	4b13      	ldr	r3, [pc, #76]	; (800433c <_sbrk+0x64>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d102      	bne.n	80042fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042f4:	4b11      	ldr	r3, [pc, #68]	; (800433c <_sbrk+0x64>)
 80042f6:	4a12      	ldr	r2, [pc, #72]	; (8004340 <_sbrk+0x68>)
 80042f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042fa:	4b10      	ldr	r3, [pc, #64]	; (800433c <_sbrk+0x64>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	429a      	cmp	r2, r3
 8004306:	d207      	bcs.n	8004318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004308:	f003 f84c 	bl	80073a4 <__errno>
 800430c:	4603      	mov	r3, r0
 800430e:	220c      	movs	r2, #12
 8004310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004312:	f04f 33ff 	mov.w	r3, #4294967295
 8004316:	e009      	b.n	800432c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004318:	4b08      	ldr	r3, [pc, #32]	; (800433c <_sbrk+0x64>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800431e:	4b07      	ldr	r3, [pc, #28]	; (800433c <_sbrk+0x64>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4413      	add	r3, r2
 8004326:	4a05      	ldr	r2, [pc, #20]	; (800433c <_sbrk+0x64>)
 8004328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800432a:	68fb      	ldr	r3, [r7, #12]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20020000 	.word	0x20020000
 8004338:	00000400 	.word	0x00000400
 800433c:	20001448 	.word	0x20001448
 8004340:	200015c0 	.word	0x200015c0

08004344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004348:	4b08      	ldr	r3, [pc, #32]	; (800436c <SystemInit+0x28>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	4a07      	ldr	r2, [pc, #28]	; (800436c <SystemInit+0x28>)
 8004350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004358:	4b04      	ldr	r3, [pc, #16]	; (800436c <SystemInit+0x28>)
 800435a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800435e:	609a      	str	r2, [r3, #8]
#endif
}
 8004360:	bf00      	nop
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	e000ed00 	.word	0xe000ed00

08004370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004374:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004376:	e003      	b.n	8004380 <LoopCopyDataInit>

08004378 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800437a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800437c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800437e:	3104      	adds	r1, #4

08004380 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004380:	480b      	ldr	r0, [pc, #44]	; (80043b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004382:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004384:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004386:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004388:	d3f6      	bcc.n	8004378 <CopyDataInit>
  ldr  r2, =_sbss
 800438a:	4a0b      	ldr	r2, [pc, #44]	; (80043b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800438c:	e002      	b.n	8004394 <LoopFillZerobss>

0800438e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800438e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004390:	f842 3b04 	str.w	r3, [r2], #4

08004394 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004396:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004398:	d3f9      	bcc.n	800438e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800439a:	f7ff ffd3 	bl	8004344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800439e:	f003 f807 	bl	80073b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043a2:	f7fc fdc9 	bl	8000f38 <main>
  bx  lr    
 80043a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80043ac:	0800a5b0 	.word	0x0800a5b0
  ldr  r0, =_sdata
 80043b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80043b4:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 80043b8:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 80043bc:	200015c0 	.word	0x200015c0

080043c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043c0:	e7fe      	b.n	80043c0 <ADC_IRQHandler>
	...

080043c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043c8:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <HAL_Init+0x40>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a0d      	ldr	r2, [pc, #52]	; (8004404 <HAL_Init+0x40>)
 80043ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_Init+0x40>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a0a      	ldr	r2, [pc, #40]	; (8004404 <HAL_Init+0x40>)
 80043da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043e0:	4b08      	ldr	r3, [pc, #32]	; (8004404 <HAL_Init+0x40>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a07      	ldr	r2, [pc, #28]	; (8004404 <HAL_Init+0x40>)
 80043e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043ec:	2003      	movs	r0, #3
 80043ee:	f000 fd53 	bl	8004e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043f2:	2000      	movs	r0, #0
 80043f4:	f000 f808 	bl	8004408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043f8:	f7ff fd56 	bl	8003ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40023c00 	.word	0x40023c00

08004408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004410:	4b12      	ldr	r3, [pc, #72]	; (800445c <HAL_InitTick+0x54>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	4b12      	ldr	r3, [pc, #72]	; (8004460 <HAL_InitTick+0x58>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	4619      	mov	r1, r3
 800441a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800441e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004422:	fbb2 f3f3 	udiv	r3, r2, r3
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fd6b 	bl	8004f02 <HAL_SYSTICK_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e00e      	b.n	8004454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b0f      	cmp	r3, #15
 800443a:	d80a      	bhi.n	8004452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800443c:	2200      	movs	r2, #0
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	f04f 30ff 	mov.w	r0, #4294967295
 8004444:	f000 fd33 	bl	8004eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004448:	4a06      	ldr	r2, [pc, #24]	; (8004464 <HAL_InitTick+0x5c>)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e000      	b.n	8004454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20000020 	.word	0x20000020
 8004460:	20000028 	.word	0x20000028
 8004464:	20000024 	.word	0x20000024

08004468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <HAL_IncTick+0x20>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <HAL_IncTick+0x24>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4413      	add	r3, r2
 8004478:	4a04      	ldr	r2, [pc, #16]	; (800448c <HAL_IncTick+0x24>)
 800447a:	6013      	str	r3, [r2, #0]
}
 800447c:	bf00      	nop
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000028 	.word	0x20000028
 800448c:	200015ac 	.word	0x200015ac

08004490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return uwTick;
 8004494:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <HAL_GetTick+0x14>)
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	200015ac 	.word	0x200015ac

080044a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044b0:	f7ff ffee 	bl	8004490 <HAL_GetTick>
 80044b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c0:	d005      	beq.n	80044ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_Delay+0x44>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4413      	add	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044ce:	bf00      	nop
 80044d0:	f7ff ffde 	bl	8004490 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d8f7      	bhi.n	80044d0 <HAL_Delay+0x28>
  {
  }
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000028 	.word	0x20000028

080044f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e033      	b.n	800456e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff fcf2 	bl	8003ef8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b00      	cmp	r3, #0
 800452c:	d118      	bne.n	8004560 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004536:	f023 0302 	bic.w	r3, r3, #2
 800453a:	f043 0202 	orr.w	r2, r3, #2
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fa5a 	bl	80049fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f023 0303 	bic.w	r3, r3, #3
 8004556:	f043 0201 	orr.w	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	641a      	str	r2, [r3, #64]	; 0x40
 800455e:	e001      	b.n	8004564 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800456c:	7bfb      	ldrb	r3, [r7, #15]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_ADC_Start_DMA+0x1e>
 8004592:	2302      	movs	r3, #2
 8004594:	e0cc      	b.n	8004730 <HAL_ADC_Start_DMA+0x1b8>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d018      	beq.n	80045de <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80045bc:	4b5e      	ldr	r3, [pc, #376]	; (8004738 <HAL_ADC_Start_DMA+0x1c0>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a5e      	ldr	r2, [pc, #376]	; (800473c <HAL_ADC_Start_DMA+0x1c4>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	0c9a      	lsrs	r2, r3, #18
 80045c8:	4613      	mov	r3, r2
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	4413      	add	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80045d0:	e002      	b.n	80045d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f9      	bne.n	80045d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	f040 80a0 	bne.w	800472e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460c:	2b00      	cmp	r3, #0
 800460e:	d007      	beq.n	8004620 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004618:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462c:	d106      	bne.n	800463c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f023 0206 	bic.w	r2, r3, #6
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
 800463a:	e002      	b.n	8004642 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800464a:	4b3d      	ldr	r3, [pc, #244]	; (8004740 <HAL_ADC_Start_DMA+0x1c8>)
 800464c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	4a3c      	ldr	r2, [pc, #240]	; (8004744 <HAL_ADC_Start_DMA+0x1cc>)
 8004654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	4a3b      	ldr	r2, [pc, #236]	; (8004748 <HAL_ADC_Start_DMA+0x1d0>)
 800465c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	4a3a      	ldr	r2, [pc, #232]	; (800474c <HAL_ADC_Start_DMA+0x1d4>)
 8004664:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800466e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800467e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800468e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	334c      	adds	r3, #76	; 0x4c
 800469a:	4619      	mov	r1, r3
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f000 fcea 	bl	8005078 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d12a      	bne.n	8004706 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a26      	ldr	r2, [pc, #152]	; (8004750 <HAL_ADC_Start_DMA+0x1d8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d015      	beq.n	80046e6 <HAL_ADC_Start_DMA+0x16e>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a25      	ldr	r2, [pc, #148]	; (8004754 <HAL_ADC_Start_DMA+0x1dc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d105      	bne.n	80046d0 <HAL_ADC_Start_DMA+0x158>
 80046c4:	4b1e      	ldr	r3, [pc, #120]	; (8004740 <HAL_ADC_Start_DMA+0x1c8>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 031f 	and.w	r3, r3, #31
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a20      	ldr	r2, [pc, #128]	; (8004758 <HAL_ADC_Start_DMA+0x1e0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d129      	bne.n	800472e <HAL_ADC_Start_DMA+0x1b6>
 80046da:	4b19      	ldr	r3, [pc, #100]	; (8004740 <HAL_ADC_Start_DMA+0x1c8>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d123      	bne.n	800472e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d11c      	bne.n	800472e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004702:	609a      	str	r2, [r3, #8]
 8004704:	e013      	b.n	800472e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a11      	ldr	r2, [pc, #68]	; (8004750 <HAL_ADC_Start_DMA+0x1d8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d10e      	bne.n	800472e <HAL_ADC_Start_DMA+0x1b6>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d107      	bne.n	800472e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800472c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20000020 	.word	0x20000020
 800473c:	431bde83 	.word	0x431bde83
 8004740:	40012300 	.word	0x40012300
 8004744:	08004bf5 	.word	0x08004bf5
 8004748:	08004caf 	.word	0x08004caf
 800474c:	08004ccb 	.word	0x08004ccb
 8004750:	40012000 	.word	0x40012000
 8004754:	40012100 	.word	0x40012100
 8004758:	40012200 	.word	0x40012200

0800475c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_ADC_ConfigChannel+0x1c>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e113      	b.n	80049dc <HAL_ADC_ConfigChannel+0x244>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b09      	cmp	r3, #9
 80047c2:	d925      	bls.n	8004810 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68d9      	ldr	r1, [r3, #12]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	4613      	mov	r3, r2
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	4413      	add	r3, r2
 80047d8:	3b1e      	subs	r3, #30
 80047da:	2207      	movs	r2, #7
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43da      	mvns	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	400a      	ands	r2, r1
 80047e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68d9      	ldr	r1, [r3, #12]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	4618      	mov	r0, r3
 80047fc:	4603      	mov	r3, r0
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4403      	add	r3, r0
 8004802:	3b1e      	subs	r3, #30
 8004804:	409a      	lsls	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	60da      	str	r2, [r3, #12]
 800480e:	e022      	b.n	8004856 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6919      	ldr	r1, [r3, #16]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	b29b      	uxth	r3, r3
 800481c:	461a      	mov	r2, r3
 800481e:	4613      	mov	r3, r2
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	4413      	add	r3, r2
 8004824:	2207      	movs	r2, #7
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43da      	mvns	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	400a      	ands	r2, r1
 8004832:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6919      	ldr	r1, [r3, #16]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	4618      	mov	r0, r3
 8004846:	4603      	mov	r3, r0
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4403      	add	r3, r0
 800484c:	409a      	lsls	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b06      	cmp	r3, #6
 800485c:	d824      	bhi.n	80048a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	3b05      	subs	r3, #5
 8004870:	221f      	movs	r2, #31
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43da      	mvns	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	400a      	ands	r2, r1
 800487e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	b29b      	uxth	r3, r3
 800488c:	4618      	mov	r0, r3
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	3b05      	subs	r3, #5
 800489a:	fa00 f203 	lsl.w	r2, r0, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	635a      	str	r2, [r3, #52]	; 0x34
 80048a6:	e04c      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b0c      	cmp	r3, #12
 80048ae:	d824      	bhi.n	80048fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	3b23      	subs	r3, #35	; 0x23
 80048c2:	221f      	movs	r2, #31
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43da      	mvns	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	400a      	ands	r2, r1
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	4618      	mov	r0, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	3b23      	subs	r3, #35	; 0x23
 80048ec:	fa00 f203 	lsl.w	r2, r0, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
 80048f8:	e023      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	3b41      	subs	r3, #65	; 0x41
 800490c:	221f      	movs	r2, #31
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43da      	mvns	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	400a      	ands	r2, r1
 800491a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	4618      	mov	r0, r3
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	3b41      	subs	r3, #65	; 0x41
 8004936:	fa00 f203 	lsl.w	r2, r0, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004942:	4b29      	ldr	r3, [pc, #164]	; (80049e8 <HAL_ADC_ConfigChannel+0x250>)
 8004944:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a28      	ldr	r2, [pc, #160]	; (80049ec <HAL_ADC_ConfigChannel+0x254>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d10f      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x1d8>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b12      	cmp	r3, #18
 8004956:	d10b      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <HAL_ADC_ConfigChannel+0x254>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d12b      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x23a>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1c      	ldr	r2, [pc, #112]	; (80049f0 <HAL_ADC_ConfigChannel+0x258>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <HAL_ADC_ConfigChannel+0x1f4>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b11      	cmp	r3, #17
 800498a:	d122      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a11      	ldr	r2, [pc, #68]	; (80049f0 <HAL_ADC_ConfigChannel+0x258>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d111      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049ae:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <HAL_ADC_ConfigChannel+0x25c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a11      	ldr	r2, [pc, #68]	; (80049f8 <HAL_ADC_ConfigChannel+0x260>)
 80049b4:	fba2 2303 	umull	r2, r3, r2, r3
 80049b8:	0c9a      	lsrs	r2, r3, #18
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049c4:	e002      	b.n	80049cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f9      	bne.n	80049c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	40012300 	.word	0x40012300
 80049ec:	40012000 	.word	0x40012000
 80049f0:	10000012 	.word	0x10000012
 80049f4:	20000020 	.word	0x20000020
 80049f8:	431bde83 	.word	0x431bde83

080049fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a04:	4b79      	ldr	r3, [pc, #484]	; (8004bec <ADC_Init+0x1f0>)
 8004a06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6859      	ldr	r1, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	021a      	lsls	r2, r3, #8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6859      	ldr	r1, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6899      	ldr	r1, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	4a58      	ldr	r2, [pc, #352]	; (8004bf0 <ADC_Init+0x1f4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d022      	beq.n	8004ada <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004aa2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6899      	ldr	r1, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ac4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6899      	ldr	r1, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	609a      	str	r2, [r3, #8]
 8004ad8:	e00f      	b.n	8004afa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ae8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004af8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0202 	bic.w	r2, r2, #2
 8004b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6899      	ldr	r1, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	7e1b      	ldrb	r3, [r3, #24]
 8004b14:	005a      	lsls	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01b      	beq.n	8004b60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	3b01      	subs	r3, #1
 8004b54:	035a      	lsls	r2, r3, #13
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	e007      	b.n	8004b70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	051a      	lsls	r2, r3, #20
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6899      	ldr	r1, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bb2:	025a      	lsls	r2, r3, #9
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6899      	ldr	r1, [r3, #8]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	029a      	lsls	r2, r3, #10
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	609a      	str	r2, [r3, #8]
}
 8004be0:	bf00      	nop
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	40012300 	.word	0x40012300
 8004bf0:	0f000001 	.word	0x0f000001

08004bf4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d13c      	bne.n	8004c88 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d12b      	bne.n	8004c80 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d127      	bne.n	8004c80 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d006      	beq.n	8004c4c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d119      	bne.n	8004c80 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0220 	bic.w	r2, r2, #32
 8004c5a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d105      	bne.n	8004c80 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	f043 0201 	orr.w	r2, r3, #1
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff fd6b 	bl	800475c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c86:	e00e      	b.n	8004ca6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7ff fd75 	bl	8004784 <HAL_ADC_ErrorCallback>
}
 8004c9a:	e004      	b.n	8004ca6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
}
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7ff fd57 	bl	8004770 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2240      	movs	r2, #64	; 0x40
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	f043 0204 	orr.w	r2, r3, #4
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7ff fd4a 	bl	8004784 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <__NVIC_SetPriorityGrouping+0x44>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d14:	4013      	ands	r3, r2
 8004d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d2a:	4a04      	ldr	r2, [pc, #16]	; (8004d3c <__NVIC_SetPriorityGrouping+0x44>)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	60d3      	str	r3, [r2, #12]
}
 8004d30:	bf00      	nop
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	e000ed00 	.word	0xe000ed00

08004d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d44:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <__NVIC_GetPriorityGrouping+0x18>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	0a1b      	lsrs	r3, r3, #8
 8004d4a:	f003 0307 	and.w	r3, r3, #7
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	e000ed00 	.word	0xe000ed00

08004d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	db0b      	blt.n	8004d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	f003 021f 	and.w	r2, r3, #31
 8004d74:	4907      	ldr	r1, [pc, #28]	; (8004d94 <__NVIC_EnableIRQ+0x38>)
 8004d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	e000e100 	.word	0xe000e100

08004d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	6039      	str	r1, [r7, #0]
 8004da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	db0a      	blt.n	8004dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	490c      	ldr	r1, [pc, #48]	; (8004de4 <__NVIC_SetPriority+0x4c>)
 8004db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db6:	0112      	lsls	r2, r2, #4
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	440b      	add	r3, r1
 8004dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dc0:	e00a      	b.n	8004dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	4908      	ldr	r1, [pc, #32]	; (8004de8 <__NVIC_SetPriority+0x50>)
 8004dc8:	79fb      	ldrb	r3, [r7, #7]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	3b04      	subs	r3, #4
 8004dd0:	0112      	lsls	r2, r2, #4
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	761a      	strb	r2, [r3, #24]
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr
 8004de4:	e000e100 	.word	0xe000e100
 8004de8:	e000ed00 	.word	0xe000ed00

08004dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b089      	sub	sp, #36	; 0x24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f1c3 0307 	rsb	r3, r3, #7
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	bf28      	it	cs
 8004e0a:	2304      	movcs	r3, #4
 8004e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	3304      	adds	r3, #4
 8004e12:	2b06      	cmp	r3, #6
 8004e14:	d902      	bls.n	8004e1c <NVIC_EncodePriority+0x30>
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	3b03      	subs	r3, #3
 8004e1a:	e000      	b.n	8004e1e <NVIC_EncodePriority+0x32>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e20:	f04f 32ff 	mov.w	r2, #4294967295
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43da      	mvns	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	401a      	ands	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e34:	f04f 31ff 	mov.w	r1, #4294967295
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3e:	43d9      	mvns	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e44:	4313      	orrs	r3, r2
         );
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3724      	adds	r7, #36	; 0x24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e64:	d301      	bcc.n	8004e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e66:	2301      	movs	r3, #1
 8004e68:	e00f      	b.n	8004e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e6a:	4a0a      	ldr	r2, [pc, #40]	; (8004e94 <SysTick_Config+0x40>)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e72:	210f      	movs	r1, #15
 8004e74:	f04f 30ff 	mov.w	r0, #4294967295
 8004e78:	f7ff ff8e 	bl	8004d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <SysTick_Config+0x40>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e82:	4b04      	ldr	r3, [pc, #16]	; (8004e94 <SysTick_Config+0x40>)
 8004e84:	2207      	movs	r2, #7
 8004e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	e000e010 	.word	0xe000e010

08004e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff ff29 	bl	8004cf8 <__NVIC_SetPriorityGrouping>
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b086      	sub	sp, #24
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
 8004eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ec0:	f7ff ff3e 	bl	8004d40 <__NVIC_GetPriorityGrouping>
 8004ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	6978      	ldr	r0, [r7, #20]
 8004ecc:	f7ff ff8e 	bl	8004dec <NVIC_EncodePriority>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff ff5d 	bl	8004d98 <__NVIC_SetPriority>
}
 8004ede:	bf00      	nop
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	4603      	mov	r3, r0
 8004eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff ff31 	bl	8004d5c <__NVIC_EnableIRQ>
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff ffa2 	bl	8004e54 <SysTick_Config>
 8004f10:	4603      	mov	r3, r0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f28:	f7ff fab2 	bl	8004490 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e099      	b.n	800506c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f58:	e00f      	b.n	8004f7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f5a:	f7ff fa99 	bl	8004490 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b05      	cmp	r3, #5
 8004f66:	d908      	bls.n	8004f7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2203      	movs	r2, #3
 8004f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e078      	b.n	800506c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e8      	bne.n	8004f5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4b38      	ldr	r3, [pc, #224]	; (8005074 <HAL_DMA_Init+0x158>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d107      	bne.n	8004fe4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0307 	bic.w	r3, r3, #7
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	2b04      	cmp	r3, #4
 800500c:	d117      	bne.n	800503e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00e      	beq.n	800503e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fa91 	bl	8005548 <DMA_CheckFifoParam>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2240      	movs	r2, #64	; 0x40
 8005030:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800503a:	2301      	movs	r3, #1
 800503c:	e016      	b.n	800506c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fa48 	bl	80054dc <DMA_CalcBaseAndBitshift>
 800504c:	4603      	mov	r3, r0
 800504e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005054:	223f      	movs	r2, #63	; 0x3f
 8005056:	409a      	lsls	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	f010803f 	.word	0xf010803f

08005078 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_DMA_Start_IT+0x26>
 800509a:	2302      	movs	r3, #2
 800509c:	e040      	b.n	8005120 <HAL_DMA_Start_IT+0xa8>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d12f      	bne.n	8005112 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 f9da 	bl	8005480 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d0:	223f      	movs	r2, #63	; 0x3f
 80050d2:	409a      	lsls	r2, r3
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0216 	orr.w	r2, r2, #22
 80050e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0208 	orr.w	r2, r2, #8
 80050fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	e005      	b.n	800511e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800511a:	2302      	movs	r3, #2
 800511c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800511e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d004      	beq.n	8005146 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2280      	movs	r2, #128	; 0x80
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e00c      	b.n	8005160 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2205      	movs	r2, #5
 800514a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0201 	bic.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005178:	4b92      	ldr	r3, [pc, #584]	; (80053c4 <HAL_DMA_IRQHandler+0x258>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a92      	ldr	r2, [pc, #584]	; (80053c8 <HAL_DMA_IRQHandler+0x25c>)
 800517e:	fba2 2303 	umull	r2, r3, r2, r3
 8005182:	0a9b      	lsrs	r3, r3, #10
 8005184:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005196:	2208      	movs	r2, #8
 8005198:	409a      	lsls	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4013      	ands	r3, r2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d01a      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d013      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0204 	bic.w	r2, r2, #4
 80051be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c4:	2208      	movs	r2, #8
 80051c6:	409a      	lsls	r2, r3
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d0:	f043 0201 	orr.w	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051dc:	2201      	movs	r2, #1
 80051de:	409a      	lsls	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d012      	beq.n	800520e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fa:	2201      	movs	r2, #1
 80051fc:	409a      	lsls	r2, r3
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005206:	f043 0202 	orr.w	r2, r3, #2
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005212:	2204      	movs	r2, #4
 8005214:	409a      	lsls	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4013      	ands	r3, r2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d012      	beq.n	8005244 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00b      	beq.n	8005244 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005230:	2204      	movs	r2, #4
 8005232:	409a      	lsls	r2, r3
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523c:	f043 0204 	orr.w	r2, r3, #4
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005248:	2210      	movs	r2, #16
 800524a:	409a      	lsls	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4013      	ands	r3, r2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d043      	beq.n	80052dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d03c      	beq.n	80052dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005266:	2210      	movs	r2, #16
 8005268:	409a      	lsls	r2, r3
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d018      	beq.n	80052ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d108      	bne.n	800529c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	d024      	beq.n	80052dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	4798      	blx	r3
 800529a:	e01f      	b.n	80052dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01b      	beq.n	80052dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	4798      	blx	r3
 80052ac:	e016      	b.n	80052dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d107      	bne.n	80052cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0208 	bic.w	r2, r2, #8
 80052ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e0:	2220      	movs	r2, #32
 80052e2:	409a      	lsls	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4013      	ands	r3, r2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 808e 	beq.w	800540a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 8086 	beq.w	800540a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005302:	2220      	movs	r2, #32
 8005304:	409a      	lsls	r2, r3
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b05      	cmp	r3, #5
 8005314:	d136      	bne.n	8005384 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0216 	bic.w	r2, r2, #22
 8005324:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695a      	ldr	r2, [r3, #20]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005334:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	2b00      	cmp	r3, #0
 800533c:	d103      	bne.n	8005346 <HAL_DMA_IRQHandler+0x1da>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0208 	bic.w	r2, r2, #8
 8005354:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535a:	223f      	movs	r2, #63	; 0x3f
 800535c:	409a      	lsls	r2, r3
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005376:	2b00      	cmp	r3, #0
 8005378:	d07d      	beq.n	8005476 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	4798      	blx	r3
        }
        return;
 8005382:	e078      	b.n	8005476 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01c      	beq.n	80053cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d108      	bne.n	80053b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d030      	beq.n	800540a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	4798      	blx	r3
 80053b0:	e02b      	b.n	800540a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d027      	beq.n	800540a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	4798      	blx	r3
 80053c2:	e022      	b.n	800540a <HAL_DMA_IRQHandler+0x29e>
 80053c4:	20000020 	.word	0x20000020
 80053c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10f      	bne.n	80053fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0210 	bic.w	r2, r2, #16
 80053e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	2b00      	cmp	r3, #0
 8005410:	d032      	beq.n	8005478 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d022      	beq.n	8005464 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2205      	movs	r2, #5
 8005422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0201 	bic.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	3301      	adds	r3, #1
 800543a:	60bb      	str	r3, [r7, #8]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	429a      	cmp	r2, r3
 8005440:	d307      	bcc.n	8005452 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f2      	bne.n	8005436 <HAL_DMA_IRQHandler+0x2ca>
 8005450:	e000      	b.n	8005454 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005452:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	4798      	blx	r3
 8005474:	e000      	b.n	8005478 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005476:	bf00      	nop
    }
  }
}
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop

08005480 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800549c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	d108      	bne.n	80054c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054be:	e007      	b.n	80054d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	60da      	str	r2, [r3, #12]
}
 80054d0:	bf00      	nop
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	3b10      	subs	r3, #16
 80054ec:	4a14      	ldr	r2, [pc, #80]	; (8005540 <DMA_CalcBaseAndBitshift+0x64>)
 80054ee:	fba2 2303 	umull	r2, r3, r2, r3
 80054f2:	091b      	lsrs	r3, r3, #4
 80054f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054f6:	4a13      	ldr	r2, [pc, #76]	; (8005544 <DMA_CalcBaseAndBitshift+0x68>)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b03      	cmp	r3, #3
 8005508:	d909      	bls.n	800551e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005512:	f023 0303 	bic.w	r3, r3, #3
 8005516:	1d1a      	adds	r2, r3, #4
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	659a      	str	r2, [r3, #88]	; 0x58
 800551c:	e007      	b.n	800552e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005526:	f023 0303 	bic.w	r3, r3, #3
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	aaaaaaab 	.word	0xaaaaaaab
 8005544:	0800a1b0 	.word	0x0800a1b0

08005548 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005550:	2300      	movs	r3, #0
 8005552:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d11f      	bne.n	80055a2 <DMA_CheckFifoParam+0x5a>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b03      	cmp	r3, #3
 8005566:	d856      	bhi.n	8005616 <DMA_CheckFifoParam+0xce>
 8005568:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <DMA_CheckFifoParam+0x28>)
 800556a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556e:	bf00      	nop
 8005570:	08005581 	.word	0x08005581
 8005574:	08005593 	.word	0x08005593
 8005578:	08005581 	.word	0x08005581
 800557c:	08005617 	.word	0x08005617
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d046      	beq.n	800561a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005590:	e043      	b.n	800561a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800559a:	d140      	bne.n	800561e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055a0:	e03d      	b.n	800561e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055aa:	d121      	bne.n	80055f0 <DMA_CheckFifoParam+0xa8>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d837      	bhi.n	8005622 <DMA_CheckFifoParam+0xda>
 80055b2:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <DMA_CheckFifoParam+0x70>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	080055c9 	.word	0x080055c9
 80055bc:	080055cf 	.word	0x080055cf
 80055c0:	080055c9 	.word	0x080055c9
 80055c4:	080055e1 	.word	0x080055e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	73fb      	strb	r3, [r7, #15]
      break;
 80055cc:	e030      	b.n	8005630 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d025      	beq.n	8005626 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055de:	e022      	b.n	8005626 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055e8:	d11f      	bne.n	800562a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055ee:	e01c      	b.n	800562a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d903      	bls.n	80055fe <DMA_CheckFifoParam+0xb6>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d003      	beq.n	8005604 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055fc:	e018      	b.n	8005630 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	73fb      	strb	r3, [r7, #15]
      break;
 8005602:	e015      	b.n	8005630 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00e      	beq.n	800562e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	73fb      	strb	r3, [r7, #15]
      break;
 8005614:	e00b      	b.n	800562e <DMA_CheckFifoParam+0xe6>
      break;
 8005616:	bf00      	nop
 8005618:	e00a      	b.n	8005630 <DMA_CheckFifoParam+0xe8>
      break;
 800561a:	bf00      	nop
 800561c:	e008      	b.n	8005630 <DMA_CheckFifoParam+0xe8>
      break;
 800561e:	bf00      	nop
 8005620:	e006      	b.n	8005630 <DMA_CheckFifoParam+0xe8>
      break;
 8005622:	bf00      	nop
 8005624:	e004      	b.n	8005630 <DMA_CheckFifoParam+0xe8>
      break;
 8005626:	bf00      	nop
 8005628:	e002      	b.n	8005630 <DMA_CheckFifoParam+0xe8>
      break;   
 800562a:	bf00      	nop
 800562c:	e000      	b.n	8005630 <DMA_CheckFifoParam+0xe8>
      break;
 800562e:	bf00      	nop
    }
  } 
  
  return status; 
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop

08005640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005640:	b480      	push	{r7}
 8005642:	b089      	sub	sp, #36	; 0x24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005652:	2300      	movs	r3, #0
 8005654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	e165      	b.n	8005928 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800565c:	2201      	movs	r2, #1
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4013      	ands	r3, r2
 800566e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	429a      	cmp	r2, r3
 8005676:	f040 8154 	bne.w	8005922 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d00b      	beq.n	800569a <HAL_GPIO_Init+0x5a>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	2b02      	cmp	r3, #2
 8005688:	d007      	beq.n	800569a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800568e:	2b11      	cmp	r3, #17
 8005690:	d003      	beq.n	800569a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b12      	cmp	r3, #18
 8005698:	d130      	bne.n	80056fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	2203      	movs	r2, #3
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	43db      	mvns	r3, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4013      	ands	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	fa02 f303 	lsl.w	r3, r2, r3
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056d0:	2201      	movs	r2, #1
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4013      	ands	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	091b      	lsrs	r3, r3, #4
 80056e6:	f003 0201 	and.w	r2, r3, #1
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	2203      	movs	r2, #3
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	43db      	mvns	r3, r3
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	4013      	ands	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4313      	orrs	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	2b02      	cmp	r3, #2
 8005732:	d003      	beq.n	800573c <HAL_GPIO_Init+0xfc>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b12      	cmp	r3, #18
 800573a:	d123      	bne.n	8005784 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	08da      	lsrs	r2, r3, #3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3208      	adds	r2, #8
 8005744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005748:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	220f      	movs	r2, #15
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	43db      	mvns	r3, r3
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	4013      	ands	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	4313      	orrs	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	08da      	lsrs	r2, r3, #3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3208      	adds	r2, #8
 800577e:	69b9      	ldr	r1, [r7, #24]
 8005780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	2203      	movs	r2, #3
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	43db      	mvns	r3, r3
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	4013      	ands	r3, r2
 800579a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 0203 	and.w	r2, r3, #3
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80ae 	beq.w	8005922 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	4b5d      	ldr	r3, [pc, #372]	; (8005940 <HAL_GPIO_Init+0x300>)
 80057cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ce:	4a5c      	ldr	r2, [pc, #368]	; (8005940 <HAL_GPIO_Init+0x300>)
 80057d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057d4:	6453      	str	r3, [r2, #68]	; 0x44
 80057d6:	4b5a      	ldr	r3, [pc, #360]	; (8005940 <HAL_GPIO_Init+0x300>)
 80057d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057e2:	4a58      	ldr	r2, [pc, #352]	; (8005944 <HAL_GPIO_Init+0x304>)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	089b      	lsrs	r3, r3, #2
 80057e8:	3302      	adds	r3, #2
 80057ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	220f      	movs	r2, #15
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43db      	mvns	r3, r3
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4013      	ands	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a4f      	ldr	r2, [pc, #316]	; (8005948 <HAL_GPIO_Init+0x308>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d025      	beq.n	800585a <HAL_GPIO_Init+0x21a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a4e      	ldr	r2, [pc, #312]	; (800594c <HAL_GPIO_Init+0x30c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d01f      	beq.n	8005856 <HAL_GPIO_Init+0x216>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a4d      	ldr	r2, [pc, #308]	; (8005950 <HAL_GPIO_Init+0x310>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d019      	beq.n	8005852 <HAL_GPIO_Init+0x212>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a4c      	ldr	r2, [pc, #304]	; (8005954 <HAL_GPIO_Init+0x314>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_GPIO_Init+0x20e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a4b      	ldr	r2, [pc, #300]	; (8005958 <HAL_GPIO_Init+0x318>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00d      	beq.n	800584a <HAL_GPIO_Init+0x20a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a4a      	ldr	r2, [pc, #296]	; (800595c <HAL_GPIO_Init+0x31c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d007      	beq.n	8005846 <HAL_GPIO_Init+0x206>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a49      	ldr	r2, [pc, #292]	; (8005960 <HAL_GPIO_Init+0x320>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d101      	bne.n	8005842 <HAL_GPIO_Init+0x202>
 800583e:	2306      	movs	r3, #6
 8005840:	e00c      	b.n	800585c <HAL_GPIO_Init+0x21c>
 8005842:	2307      	movs	r3, #7
 8005844:	e00a      	b.n	800585c <HAL_GPIO_Init+0x21c>
 8005846:	2305      	movs	r3, #5
 8005848:	e008      	b.n	800585c <HAL_GPIO_Init+0x21c>
 800584a:	2304      	movs	r3, #4
 800584c:	e006      	b.n	800585c <HAL_GPIO_Init+0x21c>
 800584e:	2303      	movs	r3, #3
 8005850:	e004      	b.n	800585c <HAL_GPIO_Init+0x21c>
 8005852:	2302      	movs	r3, #2
 8005854:	e002      	b.n	800585c <HAL_GPIO_Init+0x21c>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <HAL_GPIO_Init+0x21c>
 800585a:	2300      	movs	r3, #0
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	f002 0203 	and.w	r2, r2, #3
 8005862:	0092      	lsls	r2, r2, #2
 8005864:	4093      	lsls	r3, r2
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	4313      	orrs	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800586c:	4935      	ldr	r1, [pc, #212]	; (8005944 <HAL_GPIO_Init+0x304>)
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	089b      	lsrs	r3, r3, #2
 8005872:	3302      	adds	r3, #2
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800587a:	4b3a      	ldr	r3, [pc, #232]	; (8005964 <HAL_GPIO_Init+0x324>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	43db      	mvns	r3, r3
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	4013      	ands	r3, r2
 8005888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800589e:	4a31      	ldr	r2, [pc, #196]	; (8005964 <HAL_GPIO_Init+0x324>)
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80058a4:	4b2f      	ldr	r3, [pc, #188]	; (8005964 <HAL_GPIO_Init+0x324>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	43db      	mvns	r3, r3
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4013      	ands	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058c8:	4a26      	ldr	r2, [pc, #152]	; (8005964 <HAL_GPIO_Init+0x324>)
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058ce:	4b25      	ldr	r3, [pc, #148]	; (8005964 <HAL_GPIO_Init+0x324>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	43db      	mvns	r3, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4013      	ands	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058f2:	4a1c      	ldr	r2, [pc, #112]	; (8005964 <HAL_GPIO_Init+0x324>)
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058f8:	4b1a      	ldr	r3, [pc, #104]	; (8005964 <HAL_GPIO_Init+0x324>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	43db      	mvns	r3, r3
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	4013      	ands	r3, r2
 8005906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	4313      	orrs	r3, r2
 800591a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800591c:	4a11      	ldr	r2, [pc, #68]	; (8005964 <HAL_GPIO_Init+0x324>)
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	3301      	adds	r3, #1
 8005926:	61fb      	str	r3, [r7, #28]
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	2b0f      	cmp	r3, #15
 800592c:	f67f ae96 	bls.w	800565c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005930:	bf00      	nop
 8005932:	bf00      	nop
 8005934:	3724      	adds	r7, #36	; 0x24
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40023800 	.word	0x40023800
 8005944:	40013800 	.word	0x40013800
 8005948:	40020000 	.word	0x40020000
 800594c:	40020400 	.word	0x40020400
 8005950:	40020800 	.word	0x40020800
 8005954:	40020c00 	.word	0x40020c00
 8005958:	40021000 	.word	0x40021000
 800595c:	40021400 	.word	0x40021400
 8005960:	40021800 	.word	0x40021800
 8005964:	40013c00 	.word	0x40013c00

08005968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	887b      	ldrh	r3, [r7, #2]
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005980:	2301      	movs	r3, #1
 8005982:	73fb      	strb	r3, [r7, #15]
 8005984:	e001      	b.n	800598a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005986:	2300      	movs	r3, #0
 8005988:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800598a:	7bfb      	ldrb	r3, [r7, #15]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80059a2:	4b08      	ldr	r3, [pc, #32]	; (80059c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059a4:	695a      	ldr	r2, [r3, #20]
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d006      	beq.n	80059bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059ae:	4a05      	ldr	r2, [pc, #20]	; (80059c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059b4:	88fb      	ldrh	r3, [r7, #6]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fd fb90 	bl	80030dc <HAL_GPIO_EXTI_Callback>
  }
}
 80059bc:	bf00      	nop
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40013c00 	.word	0x40013c00

080059c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e0cc      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059dc:	4b68      	ldr	r3, [pc, #416]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 030f 	and.w	r3, r3, #15
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d90c      	bls.n	8005a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ea:	4b65      	ldr	r3, [pc, #404]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f2:	4b63      	ldr	r3, [pc, #396]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d001      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e0b8      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d020      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a1c:	4b59      	ldr	r3, [pc, #356]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	4a58      	ldr	r2, [pc, #352]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a34:	4b53      	ldr	r3, [pc, #332]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4a52      	ldr	r2, [pc, #328]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a40:	4b50      	ldr	r3, [pc, #320]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	494d      	ldr	r1, [pc, #308]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d044      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d107      	bne.n	8005a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a66:	4b47      	ldr	r3, [pc, #284]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d119      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e07f      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d003      	beq.n	8005a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d107      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a86:	4b3f      	ldr	r3, [pc, #252]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e06f      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a96:	4b3b      	ldr	r3, [pc, #236]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e067      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aa6:	4b37      	ldr	r3, [pc, #220]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f023 0203 	bic.w	r2, r3, #3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	4934      	ldr	r1, [pc, #208]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ab8:	f7fe fcea 	bl	8004490 <HAL_GetTick>
 8005abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005abe:	e00a      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac0:	f7fe fce6 	bl	8004490 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e04f      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad6:	4b2b      	ldr	r3, [pc, #172]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 020c 	and.w	r2, r3, #12
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d1eb      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae8:	4b25      	ldr	r3, [pc, #148]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d20c      	bcs.n	8005b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af6:	4b22      	ldr	r3, [pc, #136]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afe:	4b20      	ldr	r3, [pc, #128]	; (8005b80 <HAL_RCC_ClockConfig+0x1b8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d001      	beq.n	8005b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e032      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d008      	beq.n	8005b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b1c:	4b19      	ldr	r3, [pc, #100]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4916      	ldr	r1, [pc, #88]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d009      	beq.n	8005b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b3a:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	490e      	ldr	r1, [pc, #56]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b4e:	f000 f855 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 8005b52:	4602      	mov	r2, r0
 8005b54:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <HAL_RCC_ClockConfig+0x1bc>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	091b      	lsrs	r3, r3, #4
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	490a      	ldr	r1, [pc, #40]	; (8005b88 <HAL_RCC_ClockConfig+0x1c0>)
 8005b60:	5ccb      	ldrb	r3, [r1, r3]
 8005b62:	fa22 f303 	lsr.w	r3, r2, r3
 8005b66:	4a09      	ldr	r2, [pc, #36]	; (8005b8c <HAL_RCC_ClockConfig+0x1c4>)
 8005b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b6a:	4b09      	ldr	r3, [pc, #36]	; (8005b90 <HAL_RCC_ClockConfig+0x1c8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe fc4a 	bl	8004408 <HAL_InitTick>

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	40023c00 	.word	0x40023c00
 8005b84:	40023800 	.word	0x40023800
 8005b88:	0800a198 	.word	0x0800a198
 8005b8c:	20000020 	.word	0x20000020
 8005b90:	20000024 	.word	0x20000024

08005b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b98:	4b03      	ldr	r3, [pc, #12]	; (8005ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	20000020 	.word	0x20000020

08005bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bb0:	f7ff fff0 	bl	8005b94 <HAL_RCC_GetHCLKFreq>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	0a9b      	lsrs	r3, r3, #10
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	4903      	ldr	r1, [pc, #12]	; (8005bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bc2:	5ccb      	ldrb	r3, [r1, r3]
 8005bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	0800a1a8 	.word	0x0800a1a8

08005bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bd8:	f7ff ffdc 	bl	8005b94 <HAL_RCC_GetHCLKFreq>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	0b5b      	lsrs	r3, r3, #13
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	4903      	ldr	r1, [pc, #12]	; (8005bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bea:	5ccb      	ldrb	r3, [r1, r3]
 8005bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	0800a1a8 	.word	0x0800a1a8

08005bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c00:	b087      	sub	sp, #28
 8005c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005c04:	2600      	movs	r6, #0
 8005c06:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8005c08:	2600      	movs	r6, #0
 8005c0a:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8005c0c:	2600      	movs	r6, #0
 8005c0e:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8005c10:	2600      	movs	r6, #0
 8005c12:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005c14:	2600      	movs	r6, #0
 8005c16:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c18:	4ea3      	ldr	r6, [pc, #652]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005c1a:	68b6      	ldr	r6, [r6, #8]
 8005c1c:	f006 060c 	and.w	r6, r6, #12
 8005c20:	2e0c      	cmp	r6, #12
 8005c22:	f200 8137 	bhi.w	8005e94 <HAL_RCC_GetSysClockFreq+0x298>
 8005c26:	f20f 0c08 	addw	ip, pc, #8
 8005c2a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005c65 	.word	0x08005c65
 8005c34:	08005e95 	.word	0x08005e95
 8005c38:	08005e95 	.word	0x08005e95
 8005c3c:	08005e95 	.word	0x08005e95
 8005c40:	08005c6b 	.word	0x08005c6b
 8005c44:	08005e95 	.word	0x08005e95
 8005c48:	08005e95 	.word	0x08005e95
 8005c4c:	08005e95 	.word	0x08005e95
 8005c50:	08005c71 	.word	0x08005c71
 8005c54:	08005e95 	.word	0x08005e95
 8005c58:	08005e95 	.word	0x08005e95
 8005c5c:	08005e95 	.word	0x08005e95
 8005c60:	08005d87 	.word	0x08005d87
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c64:	4b91      	ldr	r3, [pc, #580]	; (8005eac <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005c66:	613b      	str	r3, [r7, #16]
       break;
 8005c68:	e117      	b.n	8005e9a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c6a:	4b91      	ldr	r3, [pc, #580]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005c6c:	613b      	str	r3, [r7, #16]
      break;
 8005c6e:	e114      	b.n	8005e9a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c70:	4b8d      	ldr	r3, [pc, #564]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c78:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c7a:	4b8b      	ldr	r3, [pc, #556]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d024      	beq.n	8005cd0 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c86:	4b88      	ldr	r3, [pc, #544]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	099b      	lsrs	r3, r3, #6
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f04f 0300 	mov.w	r3, #0
 8005c92:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005c96:	f04f 0500 	mov.w	r5, #0
 8005c9a:	ea02 0004 	and.w	r0, r2, r4
 8005c9e:	ea03 0105 	and.w	r1, r3, r5
 8005ca2:	4b83      	ldr	r3, [pc, #524]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005ca4:	fb03 f201 	mul.w	r2, r3, r1
 8005ca8:	2300      	movs	r3, #0
 8005caa:	fb03 f300 	mul.w	r3, r3, r0
 8005cae:	4413      	add	r3, r2
 8005cb0:	4a7f      	ldr	r2, [pc, #508]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005cb2:	fba0 0102 	umull	r0, r1, r0, r2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	4619      	mov	r1, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	f7fa ff91 	bl	8000be8 <__aeabi_uldivmod>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4613      	mov	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	e04c      	b.n	8005d6a <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cd0:	4b75      	ldr	r3, [pc, #468]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	099b      	lsrs	r3, r3, #6
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f04f 0300 	mov.w	r3, #0
 8005cdc:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ce0:	f04f 0100 	mov.w	r1, #0
 8005ce4:	ea02 0800 	and.w	r8, r2, r0
 8005ce8:	ea03 0901 	and.w	r9, r3, r1
 8005cec:	4640      	mov	r0, r8
 8005cee:	4649      	mov	r1, r9
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	014b      	lsls	r3, r1, #5
 8005cfa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005cfe:	0142      	lsls	r2, r0, #5
 8005d00:	4610      	mov	r0, r2
 8005d02:	4619      	mov	r1, r3
 8005d04:	ebb0 0008 	subs.w	r0, r0, r8
 8005d08:	eb61 0109 	sbc.w	r1, r1, r9
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	018b      	lsls	r3, r1, #6
 8005d16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d1a:	0182      	lsls	r2, r0, #6
 8005d1c:	1a12      	subs	r2, r2, r0
 8005d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d22:	f04f 0000 	mov.w	r0, #0
 8005d26:	f04f 0100 	mov.w	r1, #0
 8005d2a:	00d9      	lsls	r1, r3, #3
 8005d2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d30:	00d0      	lsls	r0, r2, #3
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	eb12 0208 	adds.w	r2, r2, r8
 8005d3a:	eb43 0309 	adc.w	r3, r3, r9
 8005d3e:	f04f 0000 	mov.w	r0, #0
 8005d42:	f04f 0100 	mov.w	r1, #0
 8005d46:	0299      	lsls	r1, r3, #10
 8005d48:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005d4c:	0290      	lsls	r0, r2, #10
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4610      	mov	r0, r2
 8005d54:	4619      	mov	r1, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	f7fa ff43 	bl	8000be8 <__aeabi_uldivmod>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4613      	mov	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d6a:	4b4f      	ldr	r3, [pc, #316]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	0c1b      	lsrs	r3, r3, #16
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	3301      	adds	r3, #1
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d82:	613b      	str	r3, [r7, #16]
      break;
 8005d84:	e089      	b.n	8005e9a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d86:	4948      	ldr	r1, [pc, #288]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005d88:	6849      	ldr	r1, [r1, #4]
 8005d8a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005d8e:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d90:	4945      	ldr	r1, [pc, #276]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005d92:	6849      	ldr	r1, [r1, #4]
 8005d94:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005d98:	2900      	cmp	r1, #0
 8005d9a:	d024      	beq.n	8005de6 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d9c:	4942      	ldr	r1, [pc, #264]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005d9e:	6849      	ldr	r1, [r1, #4]
 8005da0:	0989      	lsrs	r1, r1, #6
 8005da2:	4608      	mov	r0, r1
 8005da4:	f04f 0100 	mov.w	r1, #0
 8005da8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005dac:	f04f 0500 	mov.w	r5, #0
 8005db0:	ea00 0204 	and.w	r2, r0, r4
 8005db4:	ea01 0305 	and.w	r3, r1, r5
 8005db8:	493d      	ldr	r1, [pc, #244]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005dba:	fb01 f003 	mul.w	r0, r1, r3
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	fb01 f102 	mul.w	r1, r1, r2
 8005dc4:	1844      	adds	r4, r0, r1
 8005dc6:	493a      	ldr	r1, [pc, #232]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8005dc8:	fba2 0101 	umull	r0, r1, r2, r1
 8005dcc:	1863      	adds	r3, r4, r1
 8005dce:	4619      	mov	r1, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f04f 0300 	mov.w	r3, #0
 8005dd8:	f7fa ff06 	bl	8000be8 <__aeabi_uldivmod>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4613      	mov	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	e04a      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005de6:	4b30      	ldr	r3, [pc, #192]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	099b      	lsrs	r3, r3, #6
 8005dec:	461a      	mov	r2, r3
 8005dee:	f04f 0300 	mov.w	r3, #0
 8005df2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005df6:	f04f 0100 	mov.w	r1, #0
 8005dfa:	ea02 0400 	and.w	r4, r2, r0
 8005dfe:	ea03 0501 	and.w	r5, r3, r1
 8005e02:	4620      	mov	r0, r4
 8005e04:	4629      	mov	r1, r5
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	014b      	lsls	r3, r1, #5
 8005e10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e14:	0142      	lsls	r2, r0, #5
 8005e16:	4610      	mov	r0, r2
 8005e18:	4619      	mov	r1, r3
 8005e1a:	1b00      	subs	r0, r0, r4
 8005e1c:	eb61 0105 	sbc.w	r1, r1, r5
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	018b      	lsls	r3, r1, #6
 8005e2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e2e:	0182      	lsls	r2, r0, #6
 8005e30:	1a12      	subs	r2, r2, r0
 8005e32:	eb63 0301 	sbc.w	r3, r3, r1
 8005e36:	f04f 0000 	mov.w	r0, #0
 8005e3a:	f04f 0100 	mov.w	r1, #0
 8005e3e:	00d9      	lsls	r1, r3, #3
 8005e40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e44:	00d0      	lsls	r0, r2, #3
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	1912      	adds	r2, r2, r4
 8005e4c:	eb45 0303 	adc.w	r3, r5, r3
 8005e50:	f04f 0000 	mov.w	r0, #0
 8005e54:	f04f 0100 	mov.w	r1, #0
 8005e58:	0299      	lsls	r1, r3, #10
 8005e5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005e5e:	0290      	lsls	r0, r2, #10
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4610      	mov	r0, r2
 8005e66:	4619      	mov	r1, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	f7fa feba 	bl	8000be8 <__aeabi_uldivmod>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4613      	mov	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005e7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	0f1b      	lsrs	r3, r3, #28
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e90:	613b      	str	r3, [r7, #16]
      break;
 8005e92:	e002      	b.n	8005e9a <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <HAL_RCC_GetSysClockFreq+0x2b0>)
 8005e96:	613b      	str	r3, [r7, #16]
      break;
 8005e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e9a:	693b      	ldr	r3, [r7, #16]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	00f42400 	.word	0x00f42400
 8005eb0:	017d7840 	.word	0x017d7840

08005eb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 8083 	beq.w	8005fd4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005ece:	4b95      	ldr	r3, [pc, #596]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d019      	beq.n	8005f0e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005eda:	4b92      	ldr	r3, [pc, #584]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d106      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005ee6:	4b8f      	ldr	r3, [pc, #572]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ef2:	d00c      	beq.n	8005f0e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ef4:	4b8b      	ldr	r3, [pc, #556]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005efc:	2b0c      	cmp	r3, #12
 8005efe:	d112      	bne.n	8005f26 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f00:	4b88      	ldr	r3, [pc, #544]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f0c:	d10b      	bne.n	8005f26 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f0e:	4b85      	ldr	r3, [pc, #532]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d05b      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x11e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d157      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e216      	b.n	8006354 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f2e:	d106      	bne.n	8005f3e <HAL_RCC_OscConfig+0x8a>
 8005f30:	4b7c      	ldr	r3, [pc, #496]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a7b      	ldr	r2, [pc, #492]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	e01d      	b.n	8005f7a <HAL_RCC_OscConfig+0xc6>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f46:	d10c      	bne.n	8005f62 <HAL_RCC_OscConfig+0xae>
 8005f48:	4b76      	ldr	r3, [pc, #472]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a75      	ldr	r2, [pc, #468]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	4b73      	ldr	r3, [pc, #460]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a72      	ldr	r2, [pc, #456]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	e00b      	b.n	8005f7a <HAL_RCC_OscConfig+0xc6>
 8005f62:	4b70      	ldr	r3, [pc, #448]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a6f      	ldr	r2, [pc, #444]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	4b6d      	ldr	r3, [pc, #436]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a6c      	ldr	r2, [pc, #432]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f78:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d013      	beq.n	8005faa <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f82:	f7fe fa85 	bl	8004490 <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f8a:	f7fe fa81 	bl	8004490 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b64      	cmp	r3, #100	; 0x64
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e1db      	b.n	8006354 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f9c:	4b61      	ldr	r3, [pc, #388]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0f0      	beq.n	8005f8a <HAL_RCC_OscConfig+0xd6>
 8005fa8:	e014      	b.n	8005fd4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005faa:	f7fe fa71 	bl	8004490 <HAL_GetTick>
 8005fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fb2:	f7fe fa6d 	bl	8004490 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b64      	cmp	r3, #100	; 0x64
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e1c7      	b.n	8006354 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fc4:	4b57      	ldr	r3, [pc, #348]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1f0      	bne.n	8005fb2 <HAL_RCC_OscConfig+0xfe>
 8005fd0:	e000      	b.n	8005fd4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d06f      	beq.n	80060c0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005fe0:	4b50      	ldr	r3, [pc, #320]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f003 030c 	and.w	r3, r3, #12
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d017      	beq.n	800601c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005fec:	4b4d      	ldr	r3, [pc, #308]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d105      	bne.n	8006004 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ff8:	4b4a      	ldr	r3, [pc, #296]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00b      	beq.n	800601c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006004:	4b47      	ldr	r3, [pc, #284]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800600c:	2b0c      	cmp	r3, #12
 800600e:	d11c      	bne.n	800604a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006010:	4b44      	ldr	r3, [pc, #272]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d116      	bne.n	800604a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800601c:	4b41      	ldr	r3, [pc, #260]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_RCC_OscConfig+0x180>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d001      	beq.n	8006034 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e18f      	b.n	8006354 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006034:	4b3b      	ldr	r3, [pc, #236]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	4938      	ldr	r1, [pc, #224]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8006044:	4313      	orrs	r3, r2
 8006046:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006048:	e03a      	b.n	80060c0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d020      	beq.n	8006094 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006052:	4b35      	ldr	r3, [pc, #212]	; (8006128 <HAL_RCC_OscConfig+0x274>)
 8006054:	2201      	movs	r2, #1
 8006056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006058:	f7fe fa1a 	bl	8004490 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006060:	f7fe fa16 	bl	8004490 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e170      	b.n	8006354 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006072:	4b2c      	ldr	r3, [pc, #176]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f0      	beq.n	8006060 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800607e:	4b29      	ldr	r3, [pc, #164]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4925      	ldr	r1, [pc, #148]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 800608e:	4313      	orrs	r3, r2
 8006090:	600b      	str	r3, [r1, #0]
 8006092:	e015      	b.n	80060c0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006094:	4b24      	ldr	r3, [pc, #144]	; (8006128 <HAL_RCC_OscConfig+0x274>)
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609a:	f7fe f9f9 	bl	8004490 <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060a2:	f7fe f9f5 	bl	8004490 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e14f      	b.n	8006354 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060b4:	4b1b      	ldr	r3, [pc, #108]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1f0      	bne.n	80060a2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0308 	and.w	r3, r3, #8
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d037      	beq.n	800613c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d016      	beq.n	8006102 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060d4:	4b15      	ldr	r3, [pc, #84]	; (800612c <HAL_RCC_OscConfig+0x278>)
 80060d6:	2201      	movs	r2, #1
 80060d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060da:	f7fe f9d9 	bl	8004490 <HAL_GetTick>
 80060de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060e0:	e008      	b.n	80060f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060e2:	f7fe f9d5 	bl	8004490 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e12f      	b.n	8006354 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060f4:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <HAL_RCC_OscConfig+0x270>)
 80060f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0f0      	beq.n	80060e2 <HAL_RCC_OscConfig+0x22e>
 8006100:	e01c      	b.n	800613c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006102:	4b0a      	ldr	r3, [pc, #40]	; (800612c <HAL_RCC_OscConfig+0x278>)
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006108:	f7fe f9c2 	bl	8004490 <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800610e:	e00f      	b.n	8006130 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006110:	f7fe f9be 	bl	8004490 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d908      	bls.n	8006130 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e118      	b.n	8006354 <HAL_RCC_OscConfig+0x4a0>
 8006122:	bf00      	nop
 8006124:	40023800 	.word	0x40023800
 8006128:	42470000 	.word	0x42470000
 800612c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006130:	4b8a      	ldr	r3, [pc, #552]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 8006132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e9      	bne.n	8006110 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 8097 	beq.w	8006278 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800614e:	4b83      	ldr	r3, [pc, #524]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10f      	bne.n	800617a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	4b7f      	ldr	r3, [pc, #508]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	4a7e      	ldr	r2, [pc, #504]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 8006164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006168:	6413      	str	r3, [r2, #64]	; 0x40
 800616a:	4b7c      	ldr	r3, [pc, #496]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006176:	2301      	movs	r3, #1
 8006178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800617a:	4b79      	ldr	r3, [pc, #484]	; (8006360 <HAL_RCC_OscConfig+0x4ac>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006182:	2b00      	cmp	r3, #0
 8006184:	d118      	bne.n	80061b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006186:	4b76      	ldr	r3, [pc, #472]	; (8006360 <HAL_RCC_OscConfig+0x4ac>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a75      	ldr	r2, [pc, #468]	; (8006360 <HAL_RCC_OscConfig+0x4ac>)
 800618c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006192:	f7fe f97d 	bl	8004490 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800619a:	f7fe f979 	bl	8004490 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e0d3      	b.n	8006354 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ac:	4b6c      	ldr	r3, [pc, #432]	; (8006360 <HAL_RCC_OscConfig+0x4ac>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0f0      	beq.n	800619a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d106      	bne.n	80061ce <HAL_RCC_OscConfig+0x31a>
 80061c0:	4b66      	ldr	r3, [pc, #408]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 80061c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c4:	4a65      	ldr	r2, [pc, #404]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 80061c6:	f043 0301 	orr.w	r3, r3, #1
 80061ca:	6713      	str	r3, [r2, #112]	; 0x70
 80061cc:	e01c      	b.n	8006208 <HAL_RCC_OscConfig+0x354>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2b05      	cmp	r3, #5
 80061d4:	d10c      	bne.n	80061f0 <HAL_RCC_OscConfig+0x33c>
 80061d6:	4b61      	ldr	r3, [pc, #388]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 80061d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061da:	4a60      	ldr	r2, [pc, #384]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 80061dc:	f043 0304 	orr.w	r3, r3, #4
 80061e0:	6713      	str	r3, [r2, #112]	; 0x70
 80061e2:	4b5e      	ldr	r3, [pc, #376]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 80061e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e6:	4a5d      	ldr	r2, [pc, #372]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 80061e8:	f043 0301 	orr.w	r3, r3, #1
 80061ec:	6713      	str	r3, [r2, #112]	; 0x70
 80061ee:	e00b      	b.n	8006208 <HAL_RCC_OscConfig+0x354>
 80061f0:	4b5a      	ldr	r3, [pc, #360]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 80061f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f4:	4a59      	ldr	r2, [pc, #356]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 80061f6:	f023 0301 	bic.w	r3, r3, #1
 80061fa:	6713      	str	r3, [r2, #112]	; 0x70
 80061fc:	4b57      	ldr	r3, [pc, #348]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 80061fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006200:	4a56      	ldr	r2, [pc, #344]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 8006202:	f023 0304 	bic.w	r3, r3, #4
 8006206:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d015      	beq.n	800623c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006210:	f7fe f93e 	bl	8004490 <HAL_GetTick>
 8006214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006216:	e00a      	b.n	800622e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006218:	f7fe f93a 	bl	8004490 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	f241 3288 	movw	r2, #5000	; 0x1388
 8006226:	4293      	cmp	r3, r2
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e092      	b.n	8006354 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622e:	4b4b      	ldr	r3, [pc, #300]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 8006230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0ee      	beq.n	8006218 <HAL_RCC_OscConfig+0x364>
 800623a:	e014      	b.n	8006266 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623c:	f7fe f928 	bl	8004490 <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006242:	e00a      	b.n	800625a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006244:	f7fe f924 	bl	8004490 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006252:	4293      	cmp	r3, r2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e07c      	b.n	8006354 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800625a:	4b40      	ldr	r3, [pc, #256]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 800625c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1ee      	bne.n	8006244 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006266:	7dfb      	ldrb	r3, [r7, #23]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d105      	bne.n	8006278 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800626c:	4b3b      	ldr	r3, [pc, #236]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 800626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006270:	4a3a      	ldr	r2, [pc, #232]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 8006272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006276:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d068      	beq.n	8006352 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006280:	4b36      	ldr	r3, [pc, #216]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f003 030c 	and.w	r3, r3, #12
 8006288:	2b08      	cmp	r3, #8
 800628a:	d060      	beq.n	800634e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	2b02      	cmp	r3, #2
 8006292:	d145      	bne.n	8006320 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006294:	4b33      	ldr	r3, [pc, #204]	; (8006364 <HAL_RCC_OscConfig+0x4b0>)
 8006296:	2200      	movs	r2, #0
 8006298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800629a:	f7fe f8f9 	bl	8004490 <HAL_GetTick>
 800629e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062a0:	e008      	b.n	80062b4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062a2:	f7fe f8f5 	bl	8004490 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e04f      	b.n	8006354 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b4:	4b29      	ldr	r3, [pc, #164]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1f0      	bne.n	80062a2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	431a      	orrs	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	019b      	lsls	r3, r3, #6
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d6:	085b      	lsrs	r3, r3, #1
 80062d8:	3b01      	subs	r3, #1
 80062da:	041b      	lsls	r3, r3, #16
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	061b      	lsls	r3, r3, #24
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ea:	071b      	lsls	r3, r3, #28
 80062ec:	491b      	ldr	r1, [pc, #108]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062f2:	4b1c      	ldr	r3, [pc, #112]	; (8006364 <HAL_RCC_OscConfig+0x4b0>)
 80062f4:	2201      	movs	r2, #1
 80062f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f8:	f7fe f8ca 	bl	8004490 <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062fe:	e008      	b.n	8006312 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006300:	f7fe f8c6 	bl	8004490 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b02      	cmp	r3, #2
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e020      	b.n	8006354 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006312:	4b12      	ldr	r3, [pc, #72]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0f0      	beq.n	8006300 <HAL_RCC_OscConfig+0x44c>
 800631e:	e018      	b.n	8006352 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006320:	4b10      	ldr	r3, [pc, #64]	; (8006364 <HAL_RCC_OscConfig+0x4b0>)
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006326:	f7fe f8b3 	bl	8004490 <HAL_GetTick>
 800632a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632c:	e008      	b.n	8006340 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800632e:	f7fe f8af 	bl	8004490 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e009      	b.n	8006354 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006340:	4b06      	ldr	r3, [pc, #24]	; (800635c <HAL_RCC_OscConfig+0x4a8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1f0      	bne.n	800632e <HAL_RCC_OscConfig+0x47a>
 800634c:	e001      	b.n	8006352 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40023800 	.word	0x40023800
 8006360:	40007000 	.word	0x40007000
 8006364:	42470060 	.word	0x42470060

08006368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e03f      	b.n	80063fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fd fdf6 	bl	8003f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2224      	movs	r2, #36	; 0x24
 8006398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fc41 	bl	8006c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695a      	ldr	r2, [r3, #20]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	4613      	mov	r3, r2
 8006410:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b20      	cmp	r3, #32
 800641c:	d153      	bne.n	80064c6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_UART_Transmit_DMA+0x26>
 8006424:	88fb      	ldrh	r3, [r7, #6]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e04c      	b.n	80064c8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_UART_Transmit_DMA+0x38>
 8006438:	2302      	movs	r3, #2
 800643a:	e045      	b.n	80064c8 <HAL_UART_Transmit_DMA+0xc4>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	88fa      	ldrh	r2, [r7, #6]
 800644e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	88fa      	ldrh	r2, [r7, #6]
 8006454:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2221      	movs	r2, #33	; 0x21
 8006460:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	4a19      	ldr	r2, [pc, #100]	; (80064d0 <HAL_UART_Transmit_DMA+0xcc>)
 800646a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	4a18      	ldr	r2, [pc, #96]	; (80064d4 <HAL_UART_Transmit_DMA+0xd0>)
 8006472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	4a17      	ldr	r2, [pc, #92]	; (80064d8 <HAL_UART_Transmit_DMA+0xd4>)
 800647a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006480:	2200      	movs	r2, #0
 8006482:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006484:	f107 0308 	add.w	r3, r7, #8
 8006488:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	6819      	ldr	r1, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3304      	adds	r3, #4
 8006498:	461a      	mov	r2, r3
 800649a:	88fb      	ldrh	r3, [r7, #6]
 800649c:	f7fe fdec 	bl	8005078 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064a8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695a      	ldr	r2, [r3, #20]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064c0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e000      	b.n	80064c8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80064c6:	2302      	movs	r3, #2
  }
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	08006841 	.word	0x08006841
 80064d4:	08006893 	.word	0x08006893
 80064d8:	08006933 	.word	0x08006933

080064dc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	4613      	mov	r3, r2
 80064e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d166      	bne.n	80065c4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HAL_UART_Receive_DMA+0x26>
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e05f      	b.n	80065c6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_UART_Receive_DMA+0x38>
 8006510:	2302      	movs	r3, #2
 8006512:	e058      	b.n	80065c6 <HAL_UART_Receive_DMA+0xea>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	88fa      	ldrh	r2, [r7, #6]
 8006526:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2222      	movs	r2, #34	; 0x22
 8006532:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653a:	4a25      	ldr	r2, [pc, #148]	; (80065d0 <HAL_UART_Receive_DMA+0xf4>)
 800653c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006542:	4a24      	ldr	r2, [pc, #144]	; (80065d4 <HAL_UART_Receive_DMA+0xf8>)
 8006544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654a:	4a23      	ldr	r2, [pc, #140]	; (80065d8 <HAL_UART_Receive_DMA+0xfc>)
 800654c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006552:	2200      	movs	r2, #0
 8006554:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006556:	f107 0308 	add.w	r3, r7, #8
 800655a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3304      	adds	r3, #4
 8006566:	4619      	mov	r1, r3
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	88fb      	ldrh	r3, [r7, #6]
 800656e:	f7fe fd83 	bl	8005078 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800659e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695a      	ldr	r2, [r3, #20]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0201 	orr.w	r2, r2, #1
 80065ae:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	695a      	ldr	r2, [r3, #20]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065be:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	e000      	b.n	80065c6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80065c4:	2302      	movs	r3, #2
  }
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	080068af 	.word	0x080068af
 80065d4:	08006917 	.word	0x08006917
 80065d8:	08006933 	.word	0x08006933

080065dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	f003 030f 	and.w	r3, r3, #15
 800660a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10d      	bne.n	800662e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b00      	cmp	r3, #0
 800661a:	d008      	beq.n	800662e <HAL_UART_IRQHandler+0x52>
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fa83 	bl	8006b32 <UART_Receive_IT>
      return;
 800662c:	e0d0      	b.n	80067d0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 80b0 	beq.w	8006796 <HAL_UART_IRQHandler+0x1ba>
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d105      	bne.n	800664c <HAL_UART_IRQHandler+0x70>
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 80a5 	beq.w	8006796 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <HAL_UART_IRQHandler+0x90>
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006664:	f043 0201 	orr.w	r2, r3, #1
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00a      	beq.n	800668c <HAL_UART_IRQHandler+0xb0>
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d005      	beq.n	800668c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006684:	f043 0202 	orr.w	r2, r3, #2
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <HAL_UART_IRQHandler+0xd0>
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a4:	f043 0204 	orr.w	r2, r3, #4
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00f      	beq.n	80066d6 <HAL_UART_IRQHandler+0xfa>
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d104      	bne.n	80066ca <HAL_UART_IRQHandler+0xee>
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ce:	f043 0208 	orr.w	r2, r3, #8
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d077      	beq.n	80067ce <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d007      	beq.n	80066f8 <HAL_UART_IRQHandler+0x11c>
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fa1d 	bl	8006b32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006702:	2b40      	cmp	r3, #64	; 0x40
 8006704:	bf0c      	ite	eq
 8006706:	2301      	moveq	r3, #1
 8006708:	2300      	movne	r3, #0
 800670a:	b2db      	uxtb	r3, r3
 800670c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006712:	f003 0308 	and.w	r3, r3, #8
 8006716:	2b00      	cmp	r3, #0
 8006718:	d102      	bne.n	8006720 <HAL_UART_IRQHandler+0x144>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d031      	beq.n	8006784 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f966 	bl	80069f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006730:	2b40      	cmp	r3, #64	; 0x40
 8006732:	d123      	bne.n	800677c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695a      	ldr	r2, [r3, #20]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006742:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006748:	2b00      	cmp	r3, #0
 800674a:	d013      	beq.n	8006774 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006750:	4a21      	ldr	r2, [pc, #132]	; (80067d8 <HAL_UART_IRQHandler+0x1fc>)
 8006752:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006758:	4618      	mov	r0, r3
 800675a:	f7fe fce5 	bl	8005128 <HAL_DMA_Abort_IT>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d016      	beq.n	8006792 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800676e:	4610      	mov	r0, r2
 8006770:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006772:	e00e      	b.n	8006792 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f859 	bl	800682c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800677a:	e00a      	b.n	8006792 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f855 	bl	800682c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006782:	e006      	b.n	8006792 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f851 	bl	800682c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006790:	e01d      	b.n	80067ce <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006792:	bf00      	nop
    return;
 8006794:	e01b      	b.n	80067ce <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679c:	2b00      	cmp	r3, #0
 800679e:	d008      	beq.n	80067b2 <HAL_UART_IRQHandler+0x1d6>
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f953 	bl	8006a56 <UART_Transmit_IT>
    return;
 80067b0:	e00e      	b.n	80067d0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d009      	beq.n	80067d0 <HAL_UART_IRQHandler+0x1f4>
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d004      	beq.n	80067d0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f99b 	bl	8006b02 <UART_EndTransmit_IT>
    return;
 80067cc:	e000      	b.n	80067d0 <HAL_UART_IRQHandler+0x1f4>
    return;
 80067ce:	bf00      	nop
  }
}
 80067d0:	3720      	adds	r7, #32
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	08006a2f 	.word	0x08006a2f

080067dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006858:	2b00      	cmp	r3, #0
 800685a:	d113      	bne.n	8006884 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695a      	ldr	r2, [r3, #20]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006870:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68da      	ldr	r2, [r3, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006880:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006882:	e002      	b.n	800688a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff ffa9 	bl	80067dc <HAL_UART_TxCpltCallback>
}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff ffa5 	bl	80067f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a6:	bf00      	nop
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ba:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d11e      	bne.n	8006908 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068de:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695a      	ldr	r2, [r3, #20]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0201 	bic.w	r2, r2, #1
 80068ee:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695a      	ldr	r2, [r3, #20]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068fe:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2220      	movs	r2, #32
 8006904:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f7ff ff7b 	bl	8006804 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800690e:	bf00      	nop
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f7ff ff77 	bl	8006818 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800692a:	bf00      	nop
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694e:	2b80      	cmp	r3, #128	; 0x80
 8006950:	bf0c      	ite	eq
 8006952:	2301      	moveq	r3, #1
 8006954:	2300      	movne	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b21      	cmp	r3, #33	; 0x21
 8006964:	d108      	bne.n	8006978 <UART_DMAError+0x46>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d005      	beq.n	8006978 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2200      	movs	r2, #0
 8006970:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006972:	68b8      	ldr	r0, [r7, #8]
 8006974:	f000 f827 	bl	80069c6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006982:	2b40      	cmp	r3, #64	; 0x40
 8006984:	bf0c      	ite	eq
 8006986:	2301      	moveq	r3, #1
 8006988:	2300      	movne	r3, #0
 800698a:	b2db      	uxtb	r3, r3
 800698c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b22      	cmp	r3, #34	; 0x22
 8006998:	d108      	bne.n	80069ac <UART_DMAError+0x7a>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2200      	movs	r2, #0
 80069a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80069a6:	68b8      	ldr	r0, [r7, #8]
 80069a8:	f000 f823 	bl	80069f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b0:	f043 0210 	orr.w	r2, r3, #16
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069b8:	68b8      	ldr	r0, [r7, #8]
 80069ba:	f7ff ff37 	bl	800682c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069be:	bf00      	nop
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80069dc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68da      	ldr	r2, [r3, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a08:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	695a      	ldr	r2, [r3, #20]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0201 	bic.w	r2, r2, #1
 8006a18:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006a22:	bf00      	nop
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f7ff feef 	bl	800682c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a4e:	bf00      	nop
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b21      	cmp	r3, #33	; 0x21
 8006a68:	d144      	bne.n	8006af4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a72:	d11a      	bne.n	8006aaa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a88:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	1c9a      	adds	r2, r3, #2
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	621a      	str	r2, [r3, #32]
 8006a9c:	e00e      	b.n	8006abc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	621a      	str	r2, [r3, #32]
 8006aa8:	e008      	b.n	8006abc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	1c59      	adds	r1, r3, #1
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6211      	str	r1, [r2, #32]
 8006ab4:	781a      	ldrb	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10f      	bne.n	8006af0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ade:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	e000      	b.n	8006af6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006af4:	2302      	movs	r3, #2
  }
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff fe5a 	bl	80067dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b22      	cmp	r3, #34	; 0x22
 8006b44:	d171      	bne.n	8006c2a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4e:	d123      	bne.n	8006b98 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10e      	bne.n	8006b7c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	1c9a      	adds	r2, r3, #2
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	629a      	str	r2, [r3, #40]	; 0x28
 8006b7a:	e029      	b.n	8006bd0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	629a      	str	r2, [r3, #40]	; 0x28
 8006b96:	e01b      	b.n	8006bd0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10a      	bne.n	8006bb6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6858      	ldr	r0, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006baa:	1c59      	adds	r1, r3, #1
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6291      	str	r1, [r2, #40]	; 0x28
 8006bb0:	b2c2      	uxtb	r2, r0
 8006bb2:	701a      	strb	r2, [r3, #0]
 8006bb4:	e00c      	b.n	8006bd0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc2:	1c58      	adds	r0, r3, #1
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	6288      	str	r0, [r1, #40]	; 0x28
 8006bc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006bcc:	b2d2      	uxtb	r2, r2
 8006bce:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d120      	bne.n	8006c26 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0220 	bic.w	r2, r2, #32
 8006bf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695a      	ldr	r2, [r3, #20]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 0201 	bic.w	r2, r2, #1
 8006c12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff fdf1 	bl	8006804 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	e002      	b.n	8006c2c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e000      	b.n	8006c2c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006c2a:	2302      	movs	r3, #2
  }
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c38:	b0bd      	sub	sp, #244	; 0xf4
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c50:	68d9      	ldr	r1, [r3, #12]
 8006c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	ea40 0301 	orr.w	r3, r0, r1
 8006c5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8006c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c8c:	f021 010c 	bic.w	r1, r1, #12
 8006c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cae:	6999      	ldr	r1, [r3, #24]
 8006cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	ea40 0301 	orr.w	r3, r0, r1
 8006cba:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc6:	f040 81a5 	bne.w	8007014 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	4bcd      	ldr	r3, [pc, #820]	; (8007008 <UART_SetConfig+0x3d4>)
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d006      	beq.n	8006ce4 <UART_SetConfig+0xb0>
 8006cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	4bcb      	ldr	r3, [pc, #812]	; (800700c <UART_SetConfig+0x3d8>)
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	f040 80cb 	bne.w	8006e7a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ce4:	f7fe ff76 	bl	8005bd4 <HAL_RCC_GetPCLK2Freq>
 8006ce8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006cf0:	461c      	mov	r4, r3
 8006cf2:	f04f 0500 	mov.w	r5, #0
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	462b      	mov	r3, r5
 8006cfa:	1891      	adds	r1, r2, r2
 8006cfc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006d00:	415b      	adcs	r3, r3
 8006d02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d06:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006d0a:	1912      	adds	r2, r2, r4
 8006d0c:	eb45 0303 	adc.w	r3, r5, r3
 8006d10:	f04f 0000 	mov.w	r0, #0
 8006d14:	f04f 0100 	mov.w	r1, #0
 8006d18:	00d9      	lsls	r1, r3, #3
 8006d1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d1e:	00d0      	lsls	r0, r2, #3
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	1911      	adds	r1, r2, r4
 8006d26:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8006d2a:	416b      	adcs	r3, r5
 8006d2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	461a      	mov	r2, r3
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	1891      	adds	r1, r2, r2
 8006d3e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8006d42:	415b      	adcs	r3, r3
 8006d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d48:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006d4c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006d50:	f7f9 ff4a 	bl	8000be8 <__aeabi_uldivmod>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4bad      	ldr	r3, [pc, #692]	; (8007010 <UART_SetConfig+0x3dc>)
 8006d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d5e:	095b      	lsrs	r3, r3, #5
 8006d60:	011e      	lsls	r6, r3, #4
 8006d62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d66:	461c      	mov	r4, r3
 8006d68:	f04f 0500 	mov.w	r5, #0
 8006d6c:	4622      	mov	r2, r4
 8006d6e:	462b      	mov	r3, r5
 8006d70:	1891      	adds	r1, r2, r2
 8006d72:	67b9      	str	r1, [r7, #120]	; 0x78
 8006d74:	415b      	adcs	r3, r3
 8006d76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d78:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006d7c:	1912      	adds	r2, r2, r4
 8006d7e:	eb45 0303 	adc.w	r3, r5, r3
 8006d82:	f04f 0000 	mov.w	r0, #0
 8006d86:	f04f 0100 	mov.w	r1, #0
 8006d8a:	00d9      	lsls	r1, r3, #3
 8006d8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d90:	00d0      	lsls	r0, r2, #3
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	1911      	adds	r1, r2, r4
 8006d98:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006d9c:	416b      	adcs	r3, r5
 8006d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	461a      	mov	r2, r3
 8006daa:	f04f 0300 	mov.w	r3, #0
 8006dae:	1891      	adds	r1, r2, r2
 8006db0:	6739      	str	r1, [r7, #112]	; 0x70
 8006db2:	415b      	adcs	r3, r3
 8006db4:	677b      	str	r3, [r7, #116]	; 0x74
 8006db6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006dba:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006dbe:	f7f9 ff13 	bl	8000be8 <__aeabi_uldivmod>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4b92      	ldr	r3, [pc, #584]	; (8007010 <UART_SetConfig+0x3dc>)
 8006dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	2164      	movs	r1, #100	; 0x64
 8006dd0:	fb01 f303 	mul.w	r3, r1, r3
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	3332      	adds	r3, #50	; 0x32
 8006dda:	4a8d      	ldr	r2, [pc, #564]	; (8007010 <UART_SetConfig+0x3dc>)
 8006ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8006de0:	095b      	lsrs	r3, r3, #5
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006de8:	441e      	add	r6, r3
 8006dea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dee:	4618      	mov	r0, r3
 8006df0:	f04f 0100 	mov.w	r1, #0
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	1894      	adds	r4, r2, r2
 8006dfa:	66bc      	str	r4, [r7, #104]	; 0x68
 8006dfc:	415b      	adcs	r3, r3
 8006dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e00:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006e04:	1812      	adds	r2, r2, r0
 8006e06:	eb41 0303 	adc.w	r3, r1, r3
 8006e0a:	f04f 0400 	mov.w	r4, #0
 8006e0e:	f04f 0500 	mov.w	r5, #0
 8006e12:	00dd      	lsls	r5, r3, #3
 8006e14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e18:	00d4      	lsls	r4, r2, #3
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	1814      	adds	r4, r2, r0
 8006e20:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8006e24:	414b      	adcs	r3, r1
 8006e26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	461a      	mov	r2, r3
 8006e32:	f04f 0300 	mov.w	r3, #0
 8006e36:	1891      	adds	r1, r2, r2
 8006e38:	6639      	str	r1, [r7, #96]	; 0x60
 8006e3a:	415b      	adcs	r3, r3
 8006e3c:	667b      	str	r3, [r7, #100]	; 0x64
 8006e3e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006e42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e46:	f7f9 fecf 	bl	8000be8 <__aeabi_uldivmod>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4b70      	ldr	r3, [pc, #448]	; (8007010 <UART_SetConfig+0x3dc>)
 8006e50:	fba3 1302 	umull	r1, r3, r3, r2
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	2164      	movs	r1, #100	; 0x64
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	3332      	adds	r3, #50	; 0x32
 8006e62:	4a6b      	ldr	r2, [pc, #428]	; (8007010 <UART_SetConfig+0x3dc>)
 8006e64:	fba2 2303 	umull	r2, r3, r2, r3
 8006e68:	095b      	lsrs	r3, r3, #5
 8006e6a:	f003 0207 	and.w	r2, r3, #7
 8006e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4432      	add	r2, r6
 8006e76:	609a      	str	r2, [r3, #8]
 8006e78:	e26d      	b.n	8007356 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e7a:	f7fe fe97 	bl	8005bac <HAL_RCC_GetPCLK1Freq>
 8006e7e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e86:	461c      	mov	r4, r3
 8006e88:	f04f 0500 	mov.w	r5, #0
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	462b      	mov	r3, r5
 8006e90:	1891      	adds	r1, r2, r2
 8006e92:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e94:	415b      	adcs	r3, r3
 8006e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e9c:	1912      	adds	r2, r2, r4
 8006e9e:	eb45 0303 	adc.w	r3, r5, r3
 8006ea2:	f04f 0000 	mov.w	r0, #0
 8006ea6:	f04f 0100 	mov.w	r1, #0
 8006eaa:	00d9      	lsls	r1, r3, #3
 8006eac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006eb0:	00d0      	lsls	r0, r2, #3
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	1911      	adds	r1, r2, r4
 8006eb8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8006ebc:	416b      	adcs	r3, r5
 8006ebe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f04f 0300 	mov.w	r3, #0
 8006ece:	1891      	adds	r1, r2, r2
 8006ed0:	6539      	str	r1, [r7, #80]	; 0x50
 8006ed2:	415b      	adcs	r3, r3
 8006ed4:	657b      	str	r3, [r7, #84]	; 0x54
 8006ed6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006eda:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006ede:	f7f9 fe83 	bl	8000be8 <__aeabi_uldivmod>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4b4a      	ldr	r3, [pc, #296]	; (8007010 <UART_SetConfig+0x3dc>)
 8006ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8006eec:	095b      	lsrs	r3, r3, #5
 8006eee:	011e      	lsls	r6, r3, #4
 8006ef0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ef4:	461c      	mov	r4, r3
 8006ef6:	f04f 0500 	mov.w	r5, #0
 8006efa:	4622      	mov	r2, r4
 8006efc:	462b      	mov	r3, r5
 8006efe:	1891      	adds	r1, r2, r2
 8006f00:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f02:	415b      	adcs	r3, r3
 8006f04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f0a:	1912      	adds	r2, r2, r4
 8006f0c:	eb45 0303 	adc.w	r3, r5, r3
 8006f10:	f04f 0000 	mov.w	r0, #0
 8006f14:	f04f 0100 	mov.w	r1, #0
 8006f18:	00d9      	lsls	r1, r3, #3
 8006f1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f1e:	00d0      	lsls	r0, r2, #3
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	1911      	adds	r1, r2, r4
 8006f26:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8006f2a:	416b      	adcs	r3, r5
 8006f2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	461a      	mov	r2, r3
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	1891      	adds	r1, r2, r2
 8006f3e:	6439      	str	r1, [r7, #64]	; 0x40
 8006f40:	415b      	adcs	r3, r3
 8006f42:	647b      	str	r3, [r7, #68]	; 0x44
 8006f44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f48:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006f4c:	f7f9 fe4c 	bl	8000be8 <__aeabi_uldivmod>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4b2e      	ldr	r3, [pc, #184]	; (8007010 <UART_SetConfig+0x3dc>)
 8006f56:	fba3 1302 	umull	r1, r3, r3, r2
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	2164      	movs	r1, #100	; 0x64
 8006f5e:	fb01 f303 	mul.w	r3, r1, r3
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	3332      	adds	r3, #50	; 0x32
 8006f68:	4a29      	ldr	r2, [pc, #164]	; (8007010 <UART_SetConfig+0x3dc>)
 8006f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f76:	441e      	add	r6, r3
 8006f78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f04f 0100 	mov.w	r1, #0
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	1894      	adds	r4, r2, r2
 8006f88:	63bc      	str	r4, [r7, #56]	; 0x38
 8006f8a:	415b      	adcs	r3, r3
 8006f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f8e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f92:	1812      	adds	r2, r2, r0
 8006f94:	eb41 0303 	adc.w	r3, r1, r3
 8006f98:	f04f 0400 	mov.w	r4, #0
 8006f9c:	f04f 0500 	mov.w	r5, #0
 8006fa0:	00dd      	lsls	r5, r3, #3
 8006fa2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006fa6:	00d4      	lsls	r4, r2, #3
 8006fa8:	4622      	mov	r2, r4
 8006faa:	462b      	mov	r3, r5
 8006fac:	1814      	adds	r4, r2, r0
 8006fae:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8006fb2:	414b      	adcs	r3, r1
 8006fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f04f 0300 	mov.w	r3, #0
 8006fc4:	1891      	adds	r1, r2, r2
 8006fc6:	6339      	str	r1, [r7, #48]	; 0x30
 8006fc8:	415b      	adcs	r3, r3
 8006fca:	637b      	str	r3, [r7, #52]	; 0x34
 8006fcc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006fd0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006fd4:	f7f9 fe08 	bl	8000be8 <__aeabi_uldivmod>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <UART_SetConfig+0x3dc>)
 8006fde:	fba3 1302 	umull	r1, r3, r3, r2
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	2164      	movs	r1, #100	; 0x64
 8006fe6:	fb01 f303 	mul.w	r3, r1, r3
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	3332      	adds	r3, #50	; 0x32
 8006ff0:	4a07      	ldr	r2, [pc, #28]	; (8007010 <UART_SetConfig+0x3dc>)
 8006ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff6:	095b      	lsrs	r3, r3, #5
 8006ff8:	f003 0207 	and.w	r2, r3, #7
 8006ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4432      	add	r2, r6
 8007004:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007006:	e1a6      	b.n	8007356 <UART_SetConfig+0x722>
 8007008:	40011000 	.word	0x40011000
 800700c:	40011400 	.word	0x40011400
 8007010:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	4bd1      	ldr	r3, [pc, #836]	; (8007360 <UART_SetConfig+0x72c>)
 800701c:	429a      	cmp	r2, r3
 800701e:	d006      	beq.n	800702e <UART_SetConfig+0x3fa>
 8007020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	4bcf      	ldr	r3, [pc, #828]	; (8007364 <UART_SetConfig+0x730>)
 8007028:	429a      	cmp	r2, r3
 800702a:	f040 80ca 	bne.w	80071c2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800702e:	f7fe fdd1 	bl	8005bd4 <HAL_RCC_GetPCLK2Freq>
 8007032:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007036:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800703a:	461c      	mov	r4, r3
 800703c:	f04f 0500 	mov.w	r5, #0
 8007040:	4622      	mov	r2, r4
 8007042:	462b      	mov	r3, r5
 8007044:	1891      	adds	r1, r2, r2
 8007046:	62b9      	str	r1, [r7, #40]	; 0x28
 8007048:	415b      	adcs	r3, r3
 800704a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800704c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007050:	1912      	adds	r2, r2, r4
 8007052:	eb45 0303 	adc.w	r3, r5, r3
 8007056:	f04f 0000 	mov.w	r0, #0
 800705a:	f04f 0100 	mov.w	r1, #0
 800705e:	00d9      	lsls	r1, r3, #3
 8007060:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007064:	00d0      	lsls	r0, r2, #3
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	eb12 0a04 	adds.w	sl, r2, r4
 800706e:	eb43 0b05 	adc.w	fp, r3, r5
 8007072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	4618      	mov	r0, r3
 800707a:	f04f 0100 	mov.w	r1, #0
 800707e:	f04f 0200 	mov.w	r2, #0
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	008b      	lsls	r3, r1, #2
 8007088:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800708c:	0082      	lsls	r2, r0, #2
 800708e:	4650      	mov	r0, sl
 8007090:	4659      	mov	r1, fp
 8007092:	f7f9 fda9 	bl	8000be8 <__aeabi_uldivmod>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	4bb3      	ldr	r3, [pc, #716]	; (8007368 <UART_SetConfig+0x734>)
 800709c:	fba3 2302 	umull	r2, r3, r3, r2
 80070a0:	095b      	lsrs	r3, r3, #5
 80070a2:	011e      	lsls	r6, r3, #4
 80070a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070a8:	4618      	mov	r0, r3
 80070aa:	f04f 0100 	mov.w	r1, #0
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	1894      	adds	r4, r2, r2
 80070b4:	623c      	str	r4, [r7, #32]
 80070b6:	415b      	adcs	r3, r3
 80070b8:	627b      	str	r3, [r7, #36]	; 0x24
 80070ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070be:	1812      	adds	r2, r2, r0
 80070c0:	eb41 0303 	adc.w	r3, r1, r3
 80070c4:	f04f 0400 	mov.w	r4, #0
 80070c8:	f04f 0500 	mov.w	r5, #0
 80070cc:	00dd      	lsls	r5, r3, #3
 80070ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80070d2:	00d4      	lsls	r4, r2, #3
 80070d4:	4622      	mov	r2, r4
 80070d6:	462b      	mov	r3, r5
 80070d8:	1814      	adds	r4, r2, r0
 80070da:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80070de:	414b      	adcs	r3, r1
 80070e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f04f 0100 	mov.w	r1, #0
 80070f0:	f04f 0200 	mov.w	r2, #0
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	008b      	lsls	r3, r1, #2
 80070fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070fe:	0082      	lsls	r2, r0, #2
 8007100:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007104:	f7f9 fd70 	bl	8000be8 <__aeabi_uldivmod>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4b96      	ldr	r3, [pc, #600]	; (8007368 <UART_SetConfig+0x734>)
 800710e:	fba3 1302 	umull	r1, r3, r3, r2
 8007112:	095b      	lsrs	r3, r3, #5
 8007114:	2164      	movs	r1, #100	; 0x64
 8007116:	fb01 f303 	mul.w	r3, r1, r3
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	011b      	lsls	r3, r3, #4
 800711e:	3332      	adds	r3, #50	; 0x32
 8007120:	4a91      	ldr	r2, [pc, #580]	; (8007368 <UART_SetConfig+0x734>)
 8007122:	fba2 2303 	umull	r2, r3, r2, r3
 8007126:	095b      	lsrs	r3, r3, #5
 8007128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800712c:	441e      	add	r6, r3
 800712e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007132:	4618      	mov	r0, r3
 8007134:	f04f 0100 	mov.w	r1, #0
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	1894      	adds	r4, r2, r2
 800713e:	61bc      	str	r4, [r7, #24]
 8007140:	415b      	adcs	r3, r3
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007148:	1812      	adds	r2, r2, r0
 800714a:	eb41 0303 	adc.w	r3, r1, r3
 800714e:	f04f 0400 	mov.w	r4, #0
 8007152:	f04f 0500 	mov.w	r5, #0
 8007156:	00dd      	lsls	r5, r3, #3
 8007158:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800715c:	00d4      	lsls	r4, r2, #3
 800715e:	4622      	mov	r2, r4
 8007160:	462b      	mov	r3, r5
 8007162:	1814      	adds	r4, r2, r0
 8007164:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8007168:	414b      	adcs	r3, r1
 800716a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800716e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	4618      	mov	r0, r3
 8007176:	f04f 0100 	mov.w	r1, #0
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	008b      	lsls	r3, r1, #2
 8007184:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007188:	0082      	lsls	r2, r0, #2
 800718a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800718e:	f7f9 fd2b 	bl	8000be8 <__aeabi_uldivmod>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4b74      	ldr	r3, [pc, #464]	; (8007368 <UART_SetConfig+0x734>)
 8007198:	fba3 1302 	umull	r1, r3, r3, r2
 800719c:	095b      	lsrs	r3, r3, #5
 800719e:	2164      	movs	r1, #100	; 0x64
 80071a0:	fb01 f303 	mul.w	r3, r1, r3
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	3332      	adds	r3, #50	; 0x32
 80071aa:	4a6f      	ldr	r2, [pc, #444]	; (8007368 <UART_SetConfig+0x734>)
 80071ac:	fba2 2303 	umull	r2, r3, r2, r3
 80071b0:	095b      	lsrs	r3, r3, #5
 80071b2:	f003 020f 	and.w	r2, r3, #15
 80071b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4432      	add	r2, r6
 80071be:	609a      	str	r2, [r3, #8]
 80071c0:	e0c9      	b.n	8007356 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80071c2:	f7fe fcf3 	bl	8005bac <HAL_RCC_GetPCLK1Freq>
 80071c6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071ce:	461c      	mov	r4, r3
 80071d0:	f04f 0500 	mov.w	r5, #0
 80071d4:	4622      	mov	r2, r4
 80071d6:	462b      	mov	r3, r5
 80071d8:	1891      	adds	r1, r2, r2
 80071da:	6139      	str	r1, [r7, #16]
 80071dc:	415b      	adcs	r3, r3
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80071e4:	1912      	adds	r2, r2, r4
 80071e6:	eb45 0303 	adc.w	r3, r5, r3
 80071ea:	f04f 0000 	mov.w	r0, #0
 80071ee:	f04f 0100 	mov.w	r1, #0
 80071f2:	00d9      	lsls	r1, r3, #3
 80071f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071f8:	00d0      	lsls	r0, r2, #3
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	eb12 0804 	adds.w	r8, r2, r4
 8007202:	eb43 0905 	adc.w	r9, r3, r5
 8007206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	4618      	mov	r0, r3
 800720e:	f04f 0100 	mov.w	r1, #0
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	f04f 0300 	mov.w	r3, #0
 800721a:	008b      	lsls	r3, r1, #2
 800721c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007220:	0082      	lsls	r2, r0, #2
 8007222:	4640      	mov	r0, r8
 8007224:	4649      	mov	r1, r9
 8007226:	f7f9 fcdf 	bl	8000be8 <__aeabi_uldivmod>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4b4e      	ldr	r3, [pc, #312]	; (8007368 <UART_SetConfig+0x734>)
 8007230:	fba3 2302 	umull	r2, r3, r3, r2
 8007234:	095b      	lsrs	r3, r3, #5
 8007236:	011e      	lsls	r6, r3, #4
 8007238:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800723c:	4618      	mov	r0, r3
 800723e:	f04f 0100 	mov.w	r1, #0
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	1894      	adds	r4, r2, r2
 8007248:	60bc      	str	r4, [r7, #8]
 800724a:	415b      	adcs	r3, r3
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007252:	1812      	adds	r2, r2, r0
 8007254:	eb41 0303 	adc.w	r3, r1, r3
 8007258:	f04f 0400 	mov.w	r4, #0
 800725c:	f04f 0500 	mov.w	r5, #0
 8007260:	00dd      	lsls	r5, r3, #3
 8007262:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007266:	00d4      	lsls	r4, r2, #3
 8007268:	4622      	mov	r2, r4
 800726a:	462b      	mov	r3, r5
 800726c:	1814      	adds	r4, r2, r0
 800726e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8007272:	414b      	adcs	r3, r1
 8007274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	4618      	mov	r0, r3
 8007280:	f04f 0100 	mov.w	r1, #0
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	008b      	lsls	r3, r1, #2
 800728e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007292:	0082      	lsls	r2, r0, #2
 8007294:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007298:	f7f9 fca6 	bl	8000be8 <__aeabi_uldivmod>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	4b31      	ldr	r3, [pc, #196]	; (8007368 <UART_SetConfig+0x734>)
 80072a2:	fba3 1302 	umull	r1, r3, r3, r2
 80072a6:	095b      	lsrs	r3, r3, #5
 80072a8:	2164      	movs	r1, #100	; 0x64
 80072aa:	fb01 f303 	mul.w	r3, r1, r3
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	3332      	adds	r3, #50	; 0x32
 80072b4:	4a2c      	ldr	r2, [pc, #176]	; (8007368 <UART_SetConfig+0x734>)
 80072b6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ba:	095b      	lsrs	r3, r3, #5
 80072bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072c0:	441e      	add	r6, r3
 80072c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072c6:	4618      	mov	r0, r3
 80072c8:	f04f 0100 	mov.w	r1, #0
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	1894      	adds	r4, r2, r2
 80072d2:	603c      	str	r4, [r7, #0]
 80072d4:	415b      	adcs	r3, r3
 80072d6:	607b      	str	r3, [r7, #4]
 80072d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072dc:	1812      	adds	r2, r2, r0
 80072de:	eb41 0303 	adc.w	r3, r1, r3
 80072e2:	f04f 0400 	mov.w	r4, #0
 80072e6:	f04f 0500 	mov.w	r5, #0
 80072ea:	00dd      	lsls	r5, r3, #3
 80072ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80072f0:	00d4      	lsls	r4, r2, #3
 80072f2:	4622      	mov	r2, r4
 80072f4:	462b      	mov	r3, r5
 80072f6:	1814      	adds	r4, r2, r0
 80072f8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80072fc:	414b      	adcs	r3, r1
 80072fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	4618      	mov	r0, r3
 800730a:	f04f 0100 	mov.w	r1, #0
 800730e:	f04f 0200 	mov.w	r2, #0
 8007312:	f04f 0300 	mov.w	r3, #0
 8007316:	008b      	lsls	r3, r1, #2
 8007318:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800731c:	0082      	lsls	r2, r0, #2
 800731e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007322:	f7f9 fc61 	bl	8000be8 <__aeabi_uldivmod>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4b0f      	ldr	r3, [pc, #60]	; (8007368 <UART_SetConfig+0x734>)
 800732c:	fba3 1302 	umull	r1, r3, r3, r2
 8007330:	095b      	lsrs	r3, r3, #5
 8007332:	2164      	movs	r1, #100	; 0x64
 8007334:	fb01 f303 	mul.w	r3, r1, r3
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	3332      	adds	r3, #50	; 0x32
 800733e:	4a0a      	ldr	r2, [pc, #40]	; (8007368 <UART_SetConfig+0x734>)
 8007340:	fba2 2303 	umull	r2, r3, r2, r3
 8007344:	095b      	lsrs	r3, r3, #5
 8007346:	f003 020f 	and.w	r2, r3, #15
 800734a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4432      	add	r2, r6
 8007352:	609a      	str	r2, [r3, #8]
}
 8007354:	e7ff      	b.n	8007356 <UART_SetConfig+0x722>
 8007356:	bf00      	nop
 8007358:	37f4      	adds	r7, #244	; 0xf4
 800735a:	46bd      	mov	sp, r7
 800735c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007360:	40011000 	.word	0x40011000
 8007364:	40011400 	.word	0x40011400
 8007368:	51eb851f 	.word	0x51eb851f

0800736c <__cxa_pure_virtual>:
 800736c:	b508      	push	{r3, lr}
 800736e:	f000 f80d 	bl	800738c <_ZSt9terminatev>

08007372 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007372:	b508      	push	{r3, lr}
 8007374:	4780      	blx	r0
 8007376:	f000 f80e 	bl	8007396 <abort>
	...

0800737c <_ZSt13get_terminatev>:
 800737c:	4b02      	ldr	r3, [pc, #8]	; (8007388 <_ZSt13get_terminatev+0xc>)
 800737e:	6818      	ldr	r0, [r3, #0]
 8007380:	f3bf 8f5b 	dmb	ish
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	2000002c 	.word	0x2000002c

0800738c <_ZSt9terminatev>:
 800738c:	b508      	push	{r3, lr}
 800738e:	f7ff fff5 	bl	800737c <_ZSt13get_terminatev>
 8007392:	f7ff ffee 	bl	8007372 <_ZN10__cxxabiv111__terminateEPFvvE>

08007396 <abort>:
 8007396:	b508      	push	{r3, lr}
 8007398:	2006      	movs	r0, #6
 800739a:	f000 fcdd 	bl	8007d58 <raise>
 800739e:	2001      	movs	r0, #1
 80073a0:	f7fc ff22 	bl	80041e8 <_exit>

080073a4 <__errno>:
 80073a4:	4b01      	ldr	r3, [pc, #4]	; (80073ac <__errno+0x8>)
 80073a6:	6818      	ldr	r0, [r3, #0]
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	20000030 	.word	0x20000030

080073b0 <__libc_init_array>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	4d0d      	ldr	r5, [pc, #52]	; (80073e8 <__libc_init_array+0x38>)
 80073b4:	4c0d      	ldr	r4, [pc, #52]	; (80073ec <__libc_init_array+0x3c>)
 80073b6:	1b64      	subs	r4, r4, r5
 80073b8:	10a4      	asrs	r4, r4, #2
 80073ba:	2600      	movs	r6, #0
 80073bc:	42a6      	cmp	r6, r4
 80073be:	d109      	bne.n	80073d4 <__libc_init_array+0x24>
 80073c0:	4d0b      	ldr	r5, [pc, #44]	; (80073f0 <__libc_init_array+0x40>)
 80073c2:	4c0c      	ldr	r4, [pc, #48]	; (80073f4 <__libc_init_array+0x44>)
 80073c4:	f002 fd1e 	bl	8009e04 <_init>
 80073c8:	1b64      	subs	r4, r4, r5
 80073ca:	10a4      	asrs	r4, r4, #2
 80073cc:	2600      	movs	r6, #0
 80073ce:	42a6      	cmp	r6, r4
 80073d0:	d105      	bne.n	80073de <__libc_init_array+0x2e>
 80073d2:	bd70      	pop	{r4, r5, r6, pc}
 80073d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d8:	4798      	blx	r3
 80073da:	3601      	adds	r6, #1
 80073dc:	e7ee      	b.n	80073bc <__libc_init_array+0xc>
 80073de:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e2:	4798      	blx	r3
 80073e4:	3601      	adds	r6, #1
 80073e6:	e7f2      	b.n	80073ce <__libc_init_array+0x1e>
 80073e8:	0800a5a4 	.word	0x0800a5a4
 80073ec:	0800a5a4 	.word	0x0800a5a4
 80073f0:	0800a5a4 	.word	0x0800a5a4
 80073f4:	0800a5ac 	.word	0x0800a5ac

080073f8 <memcpy>:
 80073f8:	440a      	add	r2, r1
 80073fa:	4291      	cmp	r1, r2
 80073fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007400:	d100      	bne.n	8007404 <memcpy+0xc>
 8007402:	4770      	bx	lr
 8007404:	b510      	push	{r4, lr}
 8007406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800740a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800740e:	4291      	cmp	r1, r2
 8007410:	d1f9      	bne.n	8007406 <memcpy+0xe>
 8007412:	bd10      	pop	{r4, pc}

08007414 <memset>:
 8007414:	4402      	add	r2, r0
 8007416:	4603      	mov	r3, r0
 8007418:	4293      	cmp	r3, r2
 800741a:	d100      	bne.n	800741e <memset+0xa>
 800741c:	4770      	bx	lr
 800741e:	f803 1b01 	strb.w	r1, [r3], #1
 8007422:	e7f9      	b.n	8007418 <memset+0x4>

08007424 <__cvt>:
 8007424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007428:	ec55 4b10 	vmov	r4, r5, d0
 800742c:	2d00      	cmp	r5, #0
 800742e:	460e      	mov	r6, r1
 8007430:	4619      	mov	r1, r3
 8007432:	462b      	mov	r3, r5
 8007434:	bfbb      	ittet	lt
 8007436:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800743a:	461d      	movlt	r5, r3
 800743c:	2300      	movge	r3, #0
 800743e:	232d      	movlt	r3, #45	; 0x2d
 8007440:	700b      	strb	r3, [r1, #0]
 8007442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007444:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007448:	4691      	mov	r9, r2
 800744a:	f023 0820 	bic.w	r8, r3, #32
 800744e:	bfbc      	itt	lt
 8007450:	4622      	movlt	r2, r4
 8007452:	4614      	movlt	r4, r2
 8007454:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007458:	d005      	beq.n	8007466 <__cvt+0x42>
 800745a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800745e:	d100      	bne.n	8007462 <__cvt+0x3e>
 8007460:	3601      	adds	r6, #1
 8007462:	2102      	movs	r1, #2
 8007464:	e000      	b.n	8007468 <__cvt+0x44>
 8007466:	2103      	movs	r1, #3
 8007468:	ab03      	add	r3, sp, #12
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	ab02      	add	r3, sp, #8
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	ec45 4b10 	vmov	d0, r4, r5
 8007474:	4653      	mov	r3, sl
 8007476:	4632      	mov	r2, r6
 8007478:	f000 fd16 	bl	8007ea8 <_dtoa_r>
 800747c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007480:	4607      	mov	r7, r0
 8007482:	d102      	bne.n	800748a <__cvt+0x66>
 8007484:	f019 0f01 	tst.w	r9, #1
 8007488:	d022      	beq.n	80074d0 <__cvt+0xac>
 800748a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800748e:	eb07 0906 	add.w	r9, r7, r6
 8007492:	d110      	bne.n	80074b6 <__cvt+0x92>
 8007494:	783b      	ldrb	r3, [r7, #0]
 8007496:	2b30      	cmp	r3, #48	; 0x30
 8007498:	d10a      	bne.n	80074b0 <__cvt+0x8c>
 800749a:	2200      	movs	r2, #0
 800749c:	2300      	movs	r3, #0
 800749e:	4620      	mov	r0, r4
 80074a0:	4629      	mov	r1, r5
 80074a2:	f7f9 fb31 	bl	8000b08 <__aeabi_dcmpeq>
 80074a6:	b918      	cbnz	r0, 80074b0 <__cvt+0x8c>
 80074a8:	f1c6 0601 	rsb	r6, r6, #1
 80074ac:	f8ca 6000 	str.w	r6, [sl]
 80074b0:	f8da 3000 	ldr.w	r3, [sl]
 80074b4:	4499      	add	r9, r3
 80074b6:	2200      	movs	r2, #0
 80074b8:	2300      	movs	r3, #0
 80074ba:	4620      	mov	r0, r4
 80074bc:	4629      	mov	r1, r5
 80074be:	f7f9 fb23 	bl	8000b08 <__aeabi_dcmpeq>
 80074c2:	b108      	cbz	r0, 80074c8 <__cvt+0xa4>
 80074c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80074c8:	2230      	movs	r2, #48	; 0x30
 80074ca:	9b03      	ldr	r3, [sp, #12]
 80074cc:	454b      	cmp	r3, r9
 80074ce:	d307      	bcc.n	80074e0 <__cvt+0xbc>
 80074d0:	9b03      	ldr	r3, [sp, #12]
 80074d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074d4:	1bdb      	subs	r3, r3, r7
 80074d6:	4638      	mov	r0, r7
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	b004      	add	sp, #16
 80074dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e0:	1c59      	adds	r1, r3, #1
 80074e2:	9103      	str	r1, [sp, #12]
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	e7f0      	b.n	80074ca <__cvt+0xa6>

080074e8 <__exponent>:
 80074e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ea:	4603      	mov	r3, r0
 80074ec:	2900      	cmp	r1, #0
 80074ee:	bfb8      	it	lt
 80074f0:	4249      	neglt	r1, r1
 80074f2:	f803 2b02 	strb.w	r2, [r3], #2
 80074f6:	bfb4      	ite	lt
 80074f8:	222d      	movlt	r2, #45	; 0x2d
 80074fa:	222b      	movge	r2, #43	; 0x2b
 80074fc:	2909      	cmp	r1, #9
 80074fe:	7042      	strb	r2, [r0, #1]
 8007500:	dd2a      	ble.n	8007558 <__exponent+0x70>
 8007502:	f10d 0407 	add.w	r4, sp, #7
 8007506:	46a4      	mov	ip, r4
 8007508:	270a      	movs	r7, #10
 800750a:	46a6      	mov	lr, r4
 800750c:	460a      	mov	r2, r1
 800750e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007512:	fb07 1516 	mls	r5, r7, r6, r1
 8007516:	3530      	adds	r5, #48	; 0x30
 8007518:	2a63      	cmp	r2, #99	; 0x63
 800751a:	f104 34ff 	add.w	r4, r4, #4294967295
 800751e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007522:	4631      	mov	r1, r6
 8007524:	dcf1      	bgt.n	800750a <__exponent+0x22>
 8007526:	3130      	adds	r1, #48	; 0x30
 8007528:	f1ae 0502 	sub.w	r5, lr, #2
 800752c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007530:	1c44      	adds	r4, r0, #1
 8007532:	4629      	mov	r1, r5
 8007534:	4561      	cmp	r1, ip
 8007536:	d30a      	bcc.n	800754e <__exponent+0x66>
 8007538:	f10d 0209 	add.w	r2, sp, #9
 800753c:	eba2 020e 	sub.w	r2, r2, lr
 8007540:	4565      	cmp	r5, ip
 8007542:	bf88      	it	hi
 8007544:	2200      	movhi	r2, #0
 8007546:	4413      	add	r3, r2
 8007548:	1a18      	subs	r0, r3, r0
 800754a:	b003      	add	sp, #12
 800754c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800754e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007552:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007556:	e7ed      	b.n	8007534 <__exponent+0x4c>
 8007558:	2330      	movs	r3, #48	; 0x30
 800755a:	3130      	adds	r1, #48	; 0x30
 800755c:	7083      	strb	r3, [r0, #2]
 800755e:	70c1      	strb	r1, [r0, #3]
 8007560:	1d03      	adds	r3, r0, #4
 8007562:	e7f1      	b.n	8007548 <__exponent+0x60>

08007564 <_printf_float>:
 8007564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007568:	ed2d 8b02 	vpush	{d8}
 800756c:	b08d      	sub	sp, #52	; 0x34
 800756e:	460c      	mov	r4, r1
 8007570:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007574:	4616      	mov	r6, r2
 8007576:	461f      	mov	r7, r3
 8007578:	4605      	mov	r5, r0
 800757a:	f001 fa81 	bl	8008a80 <_localeconv_r>
 800757e:	f8d0 a000 	ldr.w	sl, [r0]
 8007582:	4650      	mov	r0, sl
 8007584:	f7f8 fe44 	bl	8000210 <strlen>
 8007588:	2300      	movs	r3, #0
 800758a:	930a      	str	r3, [sp, #40]	; 0x28
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	9305      	str	r3, [sp, #20]
 8007590:	f8d8 3000 	ldr.w	r3, [r8]
 8007594:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007598:	3307      	adds	r3, #7
 800759a:	f023 0307 	bic.w	r3, r3, #7
 800759e:	f103 0208 	add.w	r2, r3, #8
 80075a2:	f8c8 2000 	str.w	r2, [r8]
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80075ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80075b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075b6:	9307      	str	r3, [sp, #28]
 80075b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80075bc:	ee08 0a10 	vmov	s16, r0
 80075c0:	4b9f      	ldr	r3, [pc, #636]	; (8007840 <_printf_float+0x2dc>)
 80075c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075c6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ca:	f7f9 facf 	bl	8000b6c <__aeabi_dcmpun>
 80075ce:	bb88      	cbnz	r0, 8007634 <_printf_float+0xd0>
 80075d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075d4:	4b9a      	ldr	r3, [pc, #616]	; (8007840 <_printf_float+0x2dc>)
 80075d6:	f04f 32ff 	mov.w	r2, #4294967295
 80075da:	f7f9 faa9 	bl	8000b30 <__aeabi_dcmple>
 80075de:	bb48      	cbnz	r0, 8007634 <_printf_float+0xd0>
 80075e0:	2200      	movs	r2, #0
 80075e2:	2300      	movs	r3, #0
 80075e4:	4640      	mov	r0, r8
 80075e6:	4649      	mov	r1, r9
 80075e8:	f7f9 fa98 	bl	8000b1c <__aeabi_dcmplt>
 80075ec:	b110      	cbz	r0, 80075f4 <_printf_float+0x90>
 80075ee:	232d      	movs	r3, #45	; 0x2d
 80075f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f4:	4b93      	ldr	r3, [pc, #588]	; (8007844 <_printf_float+0x2e0>)
 80075f6:	4894      	ldr	r0, [pc, #592]	; (8007848 <_printf_float+0x2e4>)
 80075f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80075fc:	bf94      	ite	ls
 80075fe:	4698      	movls	r8, r3
 8007600:	4680      	movhi	r8, r0
 8007602:	2303      	movs	r3, #3
 8007604:	6123      	str	r3, [r4, #16]
 8007606:	9b05      	ldr	r3, [sp, #20]
 8007608:	f023 0204 	bic.w	r2, r3, #4
 800760c:	6022      	str	r2, [r4, #0]
 800760e:	f04f 0900 	mov.w	r9, #0
 8007612:	9700      	str	r7, [sp, #0]
 8007614:	4633      	mov	r3, r6
 8007616:	aa0b      	add	r2, sp, #44	; 0x2c
 8007618:	4621      	mov	r1, r4
 800761a:	4628      	mov	r0, r5
 800761c:	f000 f9d8 	bl	80079d0 <_printf_common>
 8007620:	3001      	adds	r0, #1
 8007622:	f040 8090 	bne.w	8007746 <_printf_float+0x1e2>
 8007626:	f04f 30ff 	mov.w	r0, #4294967295
 800762a:	b00d      	add	sp, #52	; 0x34
 800762c:	ecbd 8b02 	vpop	{d8}
 8007630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007634:	4642      	mov	r2, r8
 8007636:	464b      	mov	r3, r9
 8007638:	4640      	mov	r0, r8
 800763a:	4649      	mov	r1, r9
 800763c:	f7f9 fa96 	bl	8000b6c <__aeabi_dcmpun>
 8007640:	b140      	cbz	r0, 8007654 <_printf_float+0xf0>
 8007642:	464b      	mov	r3, r9
 8007644:	2b00      	cmp	r3, #0
 8007646:	bfbc      	itt	lt
 8007648:	232d      	movlt	r3, #45	; 0x2d
 800764a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800764e:	487f      	ldr	r0, [pc, #508]	; (800784c <_printf_float+0x2e8>)
 8007650:	4b7f      	ldr	r3, [pc, #508]	; (8007850 <_printf_float+0x2ec>)
 8007652:	e7d1      	b.n	80075f8 <_printf_float+0x94>
 8007654:	6863      	ldr	r3, [r4, #4]
 8007656:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800765a:	9206      	str	r2, [sp, #24]
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	d13f      	bne.n	80076e0 <_printf_float+0x17c>
 8007660:	2306      	movs	r3, #6
 8007662:	6063      	str	r3, [r4, #4]
 8007664:	9b05      	ldr	r3, [sp, #20]
 8007666:	6861      	ldr	r1, [r4, #4]
 8007668:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800766c:	2300      	movs	r3, #0
 800766e:	9303      	str	r3, [sp, #12]
 8007670:	ab0a      	add	r3, sp, #40	; 0x28
 8007672:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007676:	ab09      	add	r3, sp, #36	; 0x24
 8007678:	ec49 8b10 	vmov	d0, r8, r9
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	6022      	str	r2, [r4, #0]
 8007680:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007684:	4628      	mov	r0, r5
 8007686:	f7ff fecd 	bl	8007424 <__cvt>
 800768a:	9b06      	ldr	r3, [sp, #24]
 800768c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800768e:	2b47      	cmp	r3, #71	; 0x47
 8007690:	4680      	mov	r8, r0
 8007692:	d108      	bne.n	80076a6 <_printf_float+0x142>
 8007694:	1cc8      	adds	r0, r1, #3
 8007696:	db02      	blt.n	800769e <_printf_float+0x13a>
 8007698:	6863      	ldr	r3, [r4, #4]
 800769a:	4299      	cmp	r1, r3
 800769c:	dd41      	ble.n	8007722 <_printf_float+0x1be>
 800769e:	f1ab 0b02 	sub.w	fp, fp, #2
 80076a2:	fa5f fb8b 	uxtb.w	fp, fp
 80076a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076aa:	d820      	bhi.n	80076ee <_printf_float+0x18a>
 80076ac:	3901      	subs	r1, #1
 80076ae:	465a      	mov	r2, fp
 80076b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80076b4:	9109      	str	r1, [sp, #36]	; 0x24
 80076b6:	f7ff ff17 	bl	80074e8 <__exponent>
 80076ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076bc:	1813      	adds	r3, r2, r0
 80076be:	2a01      	cmp	r2, #1
 80076c0:	4681      	mov	r9, r0
 80076c2:	6123      	str	r3, [r4, #16]
 80076c4:	dc02      	bgt.n	80076cc <_printf_float+0x168>
 80076c6:	6822      	ldr	r2, [r4, #0]
 80076c8:	07d2      	lsls	r2, r2, #31
 80076ca:	d501      	bpl.n	80076d0 <_printf_float+0x16c>
 80076cc:	3301      	adds	r3, #1
 80076ce:	6123      	str	r3, [r4, #16]
 80076d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d09c      	beq.n	8007612 <_printf_float+0xae>
 80076d8:	232d      	movs	r3, #45	; 0x2d
 80076da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076de:	e798      	b.n	8007612 <_printf_float+0xae>
 80076e0:	9a06      	ldr	r2, [sp, #24]
 80076e2:	2a47      	cmp	r2, #71	; 0x47
 80076e4:	d1be      	bne.n	8007664 <_printf_float+0x100>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1bc      	bne.n	8007664 <_printf_float+0x100>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e7b9      	b.n	8007662 <_printf_float+0xfe>
 80076ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80076f2:	d118      	bne.n	8007726 <_printf_float+0x1c2>
 80076f4:	2900      	cmp	r1, #0
 80076f6:	6863      	ldr	r3, [r4, #4]
 80076f8:	dd0b      	ble.n	8007712 <_printf_float+0x1ae>
 80076fa:	6121      	str	r1, [r4, #16]
 80076fc:	b913      	cbnz	r3, 8007704 <_printf_float+0x1a0>
 80076fe:	6822      	ldr	r2, [r4, #0]
 8007700:	07d0      	lsls	r0, r2, #31
 8007702:	d502      	bpl.n	800770a <_printf_float+0x1a6>
 8007704:	3301      	adds	r3, #1
 8007706:	440b      	add	r3, r1
 8007708:	6123      	str	r3, [r4, #16]
 800770a:	65a1      	str	r1, [r4, #88]	; 0x58
 800770c:	f04f 0900 	mov.w	r9, #0
 8007710:	e7de      	b.n	80076d0 <_printf_float+0x16c>
 8007712:	b913      	cbnz	r3, 800771a <_printf_float+0x1b6>
 8007714:	6822      	ldr	r2, [r4, #0]
 8007716:	07d2      	lsls	r2, r2, #31
 8007718:	d501      	bpl.n	800771e <_printf_float+0x1ba>
 800771a:	3302      	adds	r3, #2
 800771c:	e7f4      	b.n	8007708 <_printf_float+0x1a4>
 800771e:	2301      	movs	r3, #1
 8007720:	e7f2      	b.n	8007708 <_printf_float+0x1a4>
 8007722:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007728:	4299      	cmp	r1, r3
 800772a:	db05      	blt.n	8007738 <_printf_float+0x1d4>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	6121      	str	r1, [r4, #16]
 8007730:	07d8      	lsls	r0, r3, #31
 8007732:	d5ea      	bpl.n	800770a <_printf_float+0x1a6>
 8007734:	1c4b      	adds	r3, r1, #1
 8007736:	e7e7      	b.n	8007708 <_printf_float+0x1a4>
 8007738:	2900      	cmp	r1, #0
 800773a:	bfd4      	ite	le
 800773c:	f1c1 0202 	rsble	r2, r1, #2
 8007740:	2201      	movgt	r2, #1
 8007742:	4413      	add	r3, r2
 8007744:	e7e0      	b.n	8007708 <_printf_float+0x1a4>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	055a      	lsls	r2, r3, #21
 800774a:	d407      	bmi.n	800775c <_printf_float+0x1f8>
 800774c:	6923      	ldr	r3, [r4, #16]
 800774e:	4642      	mov	r2, r8
 8007750:	4631      	mov	r1, r6
 8007752:	4628      	mov	r0, r5
 8007754:	47b8      	blx	r7
 8007756:	3001      	adds	r0, #1
 8007758:	d12c      	bne.n	80077b4 <_printf_float+0x250>
 800775a:	e764      	b.n	8007626 <_printf_float+0xc2>
 800775c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007760:	f240 80e0 	bls.w	8007924 <_printf_float+0x3c0>
 8007764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007768:	2200      	movs	r2, #0
 800776a:	2300      	movs	r3, #0
 800776c:	f7f9 f9cc 	bl	8000b08 <__aeabi_dcmpeq>
 8007770:	2800      	cmp	r0, #0
 8007772:	d034      	beq.n	80077de <_printf_float+0x27a>
 8007774:	4a37      	ldr	r2, [pc, #220]	; (8007854 <_printf_float+0x2f0>)
 8007776:	2301      	movs	r3, #1
 8007778:	4631      	mov	r1, r6
 800777a:	4628      	mov	r0, r5
 800777c:	47b8      	blx	r7
 800777e:	3001      	adds	r0, #1
 8007780:	f43f af51 	beq.w	8007626 <_printf_float+0xc2>
 8007784:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007788:	429a      	cmp	r2, r3
 800778a:	db02      	blt.n	8007792 <_printf_float+0x22e>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	07d8      	lsls	r0, r3, #31
 8007790:	d510      	bpl.n	80077b4 <_printf_float+0x250>
 8007792:	ee18 3a10 	vmov	r3, s16
 8007796:	4652      	mov	r2, sl
 8007798:	4631      	mov	r1, r6
 800779a:	4628      	mov	r0, r5
 800779c:	47b8      	blx	r7
 800779e:	3001      	adds	r0, #1
 80077a0:	f43f af41 	beq.w	8007626 <_printf_float+0xc2>
 80077a4:	f04f 0800 	mov.w	r8, #0
 80077a8:	f104 091a 	add.w	r9, r4, #26
 80077ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ae:	3b01      	subs	r3, #1
 80077b0:	4543      	cmp	r3, r8
 80077b2:	dc09      	bgt.n	80077c8 <_printf_float+0x264>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	079b      	lsls	r3, r3, #30
 80077b8:	f100 8105 	bmi.w	80079c6 <_printf_float+0x462>
 80077bc:	68e0      	ldr	r0, [r4, #12]
 80077be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077c0:	4298      	cmp	r0, r3
 80077c2:	bfb8      	it	lt
 80077c4:	4618      	movlt	r0, r3
 80077c6:	e730      	b.n	800762a <_printf_float+0xc6>
 80077c8:	2301      	movs	r3, #1
 80077ca:	464a      	mov	r2, r9
 80077cc:	4631      	mov	r1, r6
 80077ce:	4628      	mov	r0, r5
 80077d0:	47b8      	blx	r7
 80077d2:	3001      	adds	r0, #1
 80077d4:	f43f af27 	beq.w	8007626 <_printf_float+0xc2>
 80077d8:	f108 0801 	add.w	r8, r8, #1
 80077dc:	e7e6      	b.n	80077ac <_printf_float+0x248>
 80077de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	dc39      	bgt.n	8007858 <_printf_float+0x2f4>
 80077e4:	4a1b      	ldr	r2, [pc, #108]	; (8007854 <_printf_float+0x2f0>)
 80077e6:	2301      	movs	r3, #1
 80077e8:	4631      	mov	r1, r6
 80077ea:	4628      	mov	r0, r5
 80077ec:	47b8      	blx	r7
 80077ee:	3001      	adds	r0, #1
 80077f0:	f43f af19 	beq.w	8007626 <_printf_float+0xc2>
 80077f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077f8:	4313      	orrs	r3, r2
 80077fa:	d102      	bne.n	8007802 <_printf_float+0x29e>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	07d9      	lsls	r1, r3, #31
 8007800:	d5d8      	bpl.n	80077b4 <_printf_float+0x250>
 8007802:	ee18 3a10 	vmov	r3, s16
 8007806:	4652      	mov	r2, sl
 8007808:	4631      	mov	r1, r6
 800780a:	4628      	mov	r0, r5
 800780c:	47b8      	blx	r7
 800780e:	3001      	adds	r0, #1
 8007810:	f43f af09 	beq.w	8007626 <_printf_float+0xc2>
 8007814:	f04f 0900 	mov.w	r9, #0
 8007818:	f104 0a1a 	add.w	sl, r4, #26
 800781c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781e:	425b      	negs	r3, r3
 8007820:	454b      	cmp	r3, r9
 8007822:	dc01      	bgt.n	8007828 <_printf_float+0x2c4>
 8007824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007826:	e792      	b.n	800774e <_printf_float+0x1ea>
 8007828:	2301      	movs	r3, #1
 800782a:	4652      	mov	r2, sl
 800782c:	4631      	mov	r1, r6
 800782e:	4628      	mov	r0, r5
 8007830:	47b8      	blx	r7
 8007832:	3001      	adds	r0, #1
 8007834:	f43f aef7 	beq.w	8007626 <_printf_float+0xc2>
 8007838:	f109 0901 	add.w	r9, r9, #1
 800783c:	e7ee      	b.n	800781c <_printf_float+0x2b8>
 800783e:	bf00      	nop
 8007840:	7fefffff 	.word	0x7fefffff
 8007844:	0800a1bc 	.word	0x0800a1bc
 8007848:	0800a1c0 	.word	0x0800a1c0
 800784c:	0800a1c8 	.word	0x0800a1c8
 8007850:	0800a1c4 	.word	0x0800a1c4
 8007854:	0800a1cc 	.word	0x0800a1cc
 8007858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800785a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800785c:	429a      	cmp	r2, r3
 800785e:	bfa8      	it	ge
 8007860:	461a      	movge	r2, r3
 8007862:	2a00      	cmp	r2, #0
 8007864:	4691      	mov	r9, r2
 8007866:	dc37      	bgt.n	80078d8 <_printf_float+0x374>
 8007868:	f04f 0b00 	mov.w	fp, #0
 800786c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007870:	f104 021a 	add.w	r2, r4, #26
 8007874:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007876:	9305      	str	r3, [sp, #20]
 8007878:	eba3 0309 	sub.w	r3, r3, r9
 800787c:	455b      	cmp	r3, fp
 800787e:	dc33      	bgt.n	80078e8 <_printf_float+0x384>
 8007880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007884:	429a      	cmp	r2, r3
 8007886:	db3b      	blt.n	8007900 <_printf_float+0x39c>
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	07da      	lsls	r2, r3, #31
 800788c:	d438      	bmi.n	8007900 <_printf_float+0x39c>
 800788e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007890:	9b05      	ldr	r3, [sp, #20]
 8007892:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	eba2 0901 	sub.w	r9, r2, r1
 800789a:	4599      	cmp	r9, r3
 800789c:	bfa8      	it	ge
 800789e:	4699      	movge	r9, r3
 80078a0:	f1b9 0f00 	cmp.w	r9, #0
 80078a4:	dc35      	bgt.n	8007912 <_printf_float+0x3ae>
 80078a6:	f04f 0800 	mov.w	r8, #0
 80078aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ae:	f104 0a1a 	add.w	sl, r4, #26
 80078b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078b6:	1a9b      	subs	r3, r3, r2
 80078b8:	eba3 0309 	sub.w	r3, r3, r9
 80078bc:	4543      	cmp	r3, r8
 80078be:	f77f af79 	ble.w	80077b4 <_printf_float+0x250>
 80078c2:	2301      	movs	r3, #1
 80078c4:	4652      	mov	r2, sl
 80078c6:	4631      	mov	r1, r6
 80078c8:	4628      	mov	r0, r5
 80078ca:	47b8      	blx	r7
 80078cc:	3001      	adds	r0, #1
 80078ce:	f43f aeaa 	beq.w	8007626 <_printf_float+0xc2>
 80078d2:	f108 0801 	add.w	r8, r8, #1
 80078d6:	e7ec      	b.n	80078b2 <_printf_float+0x34e>
 80078d8:	4613      	mov	r3, r2
 80078da:	4631      	mov	r1, r6
 80078dc:	4642      	mov	r2, r8
 80078de:	4628      	mov	r0, r5
 80078e0:	47b8      	blx	r7
 80078e2:	3001      	adds	r0, #1
 80078e4:	d1c0      	bne.n	8007868 <_printf_float+0x304>
 80078e6:	e69e      	b.n	8007626 <_printf_float+0xc2>
 80078e8:	2301      	movs	r3, #1
 80078ea:	4631      	mov	r1, r6
 80078ec:	4628      	mov	r0, r5
 80078ee:	9205      	str	r2, [sp, #20]
 80078f0:	47b8      	blx	r7
 80078f2:	3001      	adds	r0, #1
 80078f4:	f43f ae97 	beq.w	8007626 <_printf_float+0xc2>
 80078f8:	9a05      	ldr	r2, [sp, #20]
 80078fa:	f10b 0b01 	add.w	fp, fp, #1
 80078fe:	e7b9      	b.n	8007874 <_printf_float+0x310>
 8007900:	ee18 3a10 	vmov	r3, s16
 8007904:	4652      	mov	r2, sl
 8007906:	4631      	mov	r1, r6
 8007908:	4628      	mov	r0, r5
 800790a:	47b8      	blx	r7
 800790c:	3001      	adds	r0, #1
 800790e:	d1be      	bne.n	800788e <_printf_float+0x32a>
 8007910:	e689      	b.n	8007626 <_printf_float+0xc2>
 8007912:	9a05      	ldr	r2, [sp, #20]
 8007914:	464b      	mov	r3, r9
 8007916:	4442      	add	r2, r8
 8007918:	4631      	mov	r1, r6
 800791a:	4628      	mov	r0, r5
 800791c:	47b8      	blx	r7
 800791e:	3001      	adds	r0, #1
 8007920:	d1c1      	bne.n	80078a6 <_printf_float+0x342>
 8007922:	e680      	b.n	8007626 <_printf_float+0xc2>
 8007924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007926:	2a01      	cmp	r2, #1
 8007928:	dc01      	bgt.n	800792e <_printf_float+0x3ca>
 800792a:	07db      	lsls	r3, r3, #31
 800792c:	d538      	bpl.n	80079a0 <_printf_float+0x43c>
 800792e:	2301      	movs	r3, #1
 8007930:	4642      	mov	r2, r8
 8007932:	4631      	mov	r1, r6
 8007934:	4628      	mov	r0, r5
 8007936:	47b8      	blx	r7
 8007938:	3001      	adds	r0, #1
 800793a:	f43f ae74 	beq.w	8007626 <_printf_float+0xc2>
 800793e:	ee18 3a10 	vmov	r3, s16
 8007942:	4652      	mov	r2, sl
 8007944:	4631      	mov	r1, r6
 8007946:	4628      	mov	r0, r5
 8007948:	47b8      	blx	r7
 800794a:	3001      	adds	r0, #1
 800794c:	f43f ae6b 	beq.w	8007626 <_printf_float+0xc2>
 8007950:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007954:	2200      	movs	r2, #0
 8007956:	2300      	movs	r3, #0
 8007958:	f7f9 f8d6 	bl	8000b08 <__aeabi_dcmpeq>
 800795c:	b9d8      	cbnz	r0, 8007996 <_printf_float+0x432>
 800795e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007960:	f108 0201 	add.w	r2, r8, #1
 8007964:	3b01      	subs	r3, #1
 8007966:	4631      	mov	r1, r6
 8007968:	4628      	mov	r0, r5
 800796a:	47b8      	blx	r7
 800796c:	3001      	adds	r0, #1
 800796e:	d10e      	bne.n	800798e <_printf_float+0x42a>
 8007970:	e659      	b.n	8007626 <_printf_float+0xc2>
 8007972:	2301      	movs	r3, #1
 8007974:	4652      	mov	r2, sl
 8007976:	4631      	mov	r1, r6
 8007978:	4628      	mov	r0, r5
 800797a:	47b8      	blx	r7
 800797c:	3001      	adds	r0, #1
 800797e:	f43f ae52 	beq.w	8007626 <_printf_float+0xc2>
 8007982:	f108 0801 	add.w	r8, r8, #1
 8007986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007988:	3b01      	subs	r3, #1
 800798a:	4543      	cmp	r3, r8
 800798c:	dcf1      	bgt.n	8007972 <_printf_float+0x40e>
 800798e:	464b      	mov	r3, r9
 8007990:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007994:	e6dc      	b.n	8007750 <_printf_float+0x1ec>
 8007996:	f04f 0800 	mov.w	r8, #0
 800799a:	f104 0a1a 	add.w	sl, r4, #26
 800799e:	e7f2      	b.n	8007986 <_printf_float+0x422>
 80079a0:	2301      	movs	r3, #1
 80079a2:	4642      	mov	r2, r8
 80079a4:	e7df      	b.n	8007966 <_printf_float+0x402>
 80079a6:	2301      	movs	r3, #1
 80079a8:	464a      	mov	r2, r9
 80079aa:	4631      	mov	r1, r6
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b8      	blx	r7
 80079b0:	3001      	adds	r0, #1
 80079b2:	f43f ae38 	beq.w	8007626 <_printf_float+0xc2>
 80079b6:	f108 0801 	add.w	r8, r8, #1
 80079ba:	68e3      	ldr	r3, [r4, #12]
 80079bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079be:	1a5b      	subs	r3, r3, r1
 80079c0:	4543      	cmp	r3, r8
 80079c2:	dcf0      	bgt.n	80079a6 <_printf_float+0x442>
 80079c4:	e6fa      	b.n	80077bc <_printf_float+0x258>
 80079c6:	f04f 0800 	mov.w	r8, #0
 80079ca:	f104 0919 	add.w	r9, r4, #25
 80079ce:	e7f4      	b.n	80079ba <_printf_float+0x456>

080079d0 <_printf_common>:
 80079d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d4:	4616      	mov	r6, r2
 80079d6:	4699      	mov	r9, r3
 80079d8:	688a      	ldr	r2, [r1, #8]
 80079da:	690b      	ldr	r3, [r1, #16]
 80079dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079e0:	4293      	cmp	r3, r2
 80079e2:	bfb8      	it	lt
 80079e4:	4613      	movlt	r3, r2
 80079e6:	6033      	str	r3, [r6, #0]
 80079e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079ec:	4607      	mov	r7, r0
 80079ee:	460c      	mov	r4, r1
 80079f0:	b10a      	cbz	r2, 80079f6 <_printf_common+0x26>
 80079f2:	3301      	adds	r3, #1
 80079f4:	6033      	str	r3, [r6, #0]
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	0699      	lsls	r1, r3, #26
 80079fa:	bf42      	ittt	mi
 80079fc:	6833      	ldrmi	r3, [r6, #0]
 80079fe:	3302      	addmi	r3, #2
 8007a00:	6033      	strmi	r3, [r6, #0]
 8007a02:	6825      	ldr	r5, [r4, #0]
 8007a04:	f015 0506 	ands.w	r5, r5, #6
 8007a08:	d106      	bne.n	8007a18 <_printf_common+0x48>
 8007a0a:	f104 0a19 	add.w	sl, r4, #25
 8007a0e:	68e3      	ldr	r3, [r4, #12]
 8007a10:	6832      	ldr	r2, [r6, #0]
 8007a12:	1a9b      	subs	r3, r3, r2
 8007a14:	42ab      	cmp	r3, r5
 8007a16:	dc26      	bgt.n	8007a66 <_printf_common+0x96>
 8007a18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a1c:	1e13      	subs	r3, r2, #0
 8007a1e:	6822      	ldr	r2, [r4, #0]
 8007a20:	bf18      	it	ne
 8007a22:	2301      	movne	r3, #1
 8007a24:	0692      	lsls	r2, r2, #26
 8007a26:	d42b      	bmi.n	8007a80 <_printf_common+0xb0>
 8007a28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	4638      	mov	r0, r7
 8007a30:	47c0      	blx	r8
 8007a32:	3001      	adds	r0, #1
 8007a34:	d01e      	beq.n	8007a74 <_printf_common+0xa4>
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	68e5      	ldr	r5, [r4, #12]
 8007a3a:	6832      	ldr	r2, [r6, #0]
 8007a3c:	f003 0306 	and.w	r3, r3, #6
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	bf08      	it	eq
 8007a44:	1aad      	subeq	r5, r5, r2
 8007a46:	68a3      	ldr	r3, [r4, #8]
 8007a48:	6922      	ldr	r2, [r4, #16]
 8007a4a:	bf0c      	ite	eq
 8007a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a50:	2500      	movne	r5, #0
 8007a52:	4293      	cmp	r3, r2
 8007a54:	bfc4      	itt	gt
 8007a56:	1a9b      	subgt	r3, r3, r2
 8007a58:	18ed      	addgt	r5, r5, r3
 8007a5a:	2600      	movs	r6, #0
 8007a5c:	341a      	adds	r4, #26
 8007a5e:	42b5      	cmp	r5, r6
 8007a60:	d11a      	bne.n	8007a98 <_printf_common+0xc8>
 8007a62:	2000      	movs	r0, #0
 8007a64:	e008      	b.n	8007a78 <_printf_common+0xa8>
 8007a66:	2301      	movs	r3, #1
 8007a68:	4652      	mov	r2, sl
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	47c0      	blx	r8
 8007a70:	3001      	adds	r0, #1
 8007a72:	d103      	bne.n	8007a7c <_printf_common+0xac>
 8007a74:	f04f 30ff 	mov.w	r0, #4294967295
 8007a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7c:	3501      	adds	r5, #1
 8007a7e:	e7c6      	b.n	8007a0e <_printf_common+0x3e>
 8007a80:	18e1      	adds	r1, r4, r3
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	2030      	movs	r0, #48	; 0x30
 8007a86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a8a:	4422      	add	r2, r4
 8007a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a94:	3302      	adds	r3, #2
 8007a96:	e7c7      	b.n	8007a28 <_printf_common+0x58>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	4622      	mov	r2, r4
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	47c0      	blx	r8
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	d0e6      	beq.n	8007a74 <_printf_common+0xa4>
 8007aa6:	3601      	adds	r6, #1
 8007aa8:	e7d9      	b.n	8007a5e <_printf_common+0x8e>
	...

08007aac <_printf_i>:
 8007aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	4691      	mov	r9, r2
 8007ab4:	7e27      	ldrb	r7, [r4, #24]
 8007ab6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ab8:	2f78      	cmp	r7, #120	; 0x78
 8007aba:	4680      	mov	r8, r0
 8007abc:	469a      	mov	sl, r3
 8007abe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ac2:	d807      	bhi.n	8007ad4 <_printf_i+0x28>
 8007ac4:	2f62      	cmp	r7, #98	; 0x62
 8007ac6:	d80a      	bhi.n	8007ade <_printf_i+0x32>
 8007ac8:	2f00      	cmp	r7, #0
 8007aca:	f000 80d8 	beq.w	8007c7e <_printf_i+0x1d2>
 8007ace:	2f58      	cmp	r7, #88	; 0x58
 8007ad0:	f000 80a3 	beq.w	8007c1a <_printf_i+0x16e>
 8007ad4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007adc:	e03a      	b.n	8007b54 <_printf_i+0xa8>
 8007ade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ae2:	2b15      	cmp	r3, #21
 8007ae4:	d8f6      	bhi.n	8007ad4 <_printf_i+0x28>
 8007ae6:	a001      	add	r0, pc, #4	; (adr r0, 8007aec <_printf_i+0x40>)
 8007ae8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007aec:	08007b45 	.word	0x08007b45
 8007af0:	08007b59 	.word	0x08007b59
 8007af4:	08007ad5 	.word	0x08007ad5
 8007af8:	08007ad5 	.word	0x08007ad5
 8007afc:	08007ad5 	.word	0x08007ad5
 8007b00:	08007ad5 	.word	0x08007ad5
 8007b04:	08007b59 	.word	0x08007b59
 8007b08:	08007ad5 	.word	0x08007ad5
 8007b0c:	08007ad5 	.word	0x08007ad5
 8007b10:	08007ad5 	.word	0x08007ad5
 8007b14:	08007ad5 	.word	0x08007ad5
 8007b18:	08007c65 	.word	0x08007c65
 8007b1c:	08007b89 	.word	0x08007b89
 8007b20:	08007c47 	.word	0x08007c47
 8007b24:	08007ad5 	.word	0x08007ad5
 8007b28:	08007ad5 	.word	0x08007ad5
 8007b2c:	08007c87 	.word	0x08007c87
 8007b30:	08007ad5 	.word	0x08007ad5
 8007b34:	08007b89 	.word	0x08007b89
 8007b38:	08007ad5 	.word	0x08007ad5
 8007b3c:	08007ad5 	.word	0x08007ad5
 8007b40:	08007c4f 	.word	0x08007c4f
 8007b44:	680b      	ldr	r3, [r1, #0]
 8007b46:	1d1a      	adds	r2, r3, #4
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	600a      	str	r2, [r1, #0]
 8007b4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b54:	2301      	movs	r3, #1
 8007b56:	e0a3      	b.n	8007ca0 <_printf_i+0x1f4>
 8007b58:	6825      	ldr	r5, [r4, #0]
 8007b5a:	6808      	ldr	r0, [r1, #0]
 8007b5c:	062e      	lsls	r6, r5, #24
 8007b5e:	f100 0304 	add.w	r3, r0, #4
 8007b62:	d50a      	bpl.n	8007b7a <_printf_i+0xce>
 8007b64:	6805      	ldr	r5, [r0, #0]
 8007b66:	600b      	str	r3, [r1, #0]
 8007b68:	2d00      	cmp	r5, #0
 8007b6a:	da03      	bge.n	8007b74 <_printf_i+0xc8>
 8007b6c:	232d      	movs	r3, #45	; 0x2d
 8007b6e:	426d      	negs	r5, r5
 8007b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b74:	485e      	ldr	r0, [pc, #376]	; (8007cf0 <_printf_i+0x244>)
 8007b76:	230a      	movs	r3, #10
 8007b78:	e019      	b.n	8007bae <_printf_i+0x102>
 8007b7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b7e:	6805      	ldr	r5, [r0, #0]
 8007b80:	600b      	str	r3, [r1, #0]
 8007b82:	bf18      	it	ne
 8007b84:	b22d      	sxthne	r5, r5
 8007b86:	e7ef      	b.n	8007b68 <_printf_i+0xbc>
 8007b88:	680b      	ldr	r3, [r1, #0]
 8007b8a:	6825      	ldr	r5, [r4, #0]
 8007b8c:	1d18      	adds	r0, r3, #4
 8007b8e:	6008      	str	r0, [r1, #0]
 8007b90:	0628      	lsls	r0, r5, #24
 8007b92:	d501      	bpl.n	8007b98 <_printf_i+0xec>
 8007b94:	681d      	ldr	r5, [r3, #0]
 8007b96:	e002      	b.n	8007b9e <_printf_i+0xf2>
 8007b98:	0669      	lsls	r1, r5, #25
 8007b9a:	d5fb      	bpl.n	8007b94 <_printf_i+0xe8>
 8007b9c:	881d      	ldrh	r5, [r3, #0]
 8007b9e:	4854      	ldr	r0, [pc, #336]	; (8007cf0 <_printf_i+0x244>)
 8007ba0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ba2:	bf0c      	ite	eq
 8007ba4:	2308      	moveq	r3, #8
 8007ba6:	230a      	movne	r3, #10
 8007ba8:	2100      	movs	r1, #0
 8007baa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bae:	6866      	ldr	r6, [r4, #4]
 8007bb0:	60a6      	str	r6, [r4, #8]
 8007bb2:	2e00      	cmp	r6, #0
 8007bb4:	bfa2      	ittt	ge
 8007bb6:	6821      	ldrge	r1, [r4, #0]
 8007bb8:	f021 0104 	bicge.w	r1, r1, #4
 8007bbc:	6021      	strge	r1, [r4, #0]
 8007bbe:	b90d      	cbnz	r5, 8007bc4 <_printf_i+0x118>
 8007bc0:	2e00      	cmp	r6, #0
 8007bc2:	d04d      	beq.n	8007c60 <_printf_i+0x1b4>
 8007bc4:	4616      	mov	r6, r2
 8007bc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bca:	fb03 5711 	mls	r7, r3, r1, r5
 8007bce:	5dc7      	ldrb	r7, [r0, r7]
 8007bd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bd4:	462f      	mov	r7, r5
 8007bd6:	42bb      	cmp	r3, r7
 8007bd8:	460d      	mov	r5, r1
 8007bda:	d9f4      	bls.n	8007bc6 <_printf_i+0x11a>
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d10b      	bne.n	8007bf8 <_printf_i+0x14c>
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	07df      	lsls	r7, r3, #31
 8007be4:	d508      	bpl.n	8007bf8 <_printf_i+0x14c>
 8007be6:	6923      	ldr	r3, [r4, #16]
 8007be8:	6861      	ldr	r1, [r4, #4]
 8007bea:	4299      	cmp	r1, r3
 8007bec:	bfde      	ittt	le
 8007bee:	2330      	movle	r3, #48	; 0x30
 8007bf0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bf4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bf8:	1b92      	subs	r2, r2, r6
 8007bfa:	6122      	str	r2, [r4, #16]
 8007bfc:	f8cd a000 	str.w	sl, [sp]
 8007c00:	464b      	mov	r3, r9
 8007c02:	aa03      	add	r2, sp, #12
 8007c04:	4621      	mov	r1, r4
 8007c06:	4640      	mov	r0, r8
 8007c08:	f7ff fee2 	bl	80079d0 <_printf_common>
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	d14c      	bne.n	8007caa <_printf_i+0x1fe>
 8007c10:	f04f 30ff 	mov.w	r0, #4294967295
 8007c14:	b004      	add	sp, #16
 8007c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c1a:	4835      	ldr	r0, [pc, #212]	; (8007cf0 <_printf_i+0x244>)
 8007c1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	680e      	ldr	r6, [r1, #0]
 8007c24:	061f      	lsls	r7, r3, #24
 8007c26:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c2a:	600e      	str	r6, [r1, #0]
 8007c2c:	d514      	bpl.n	8007c58 <_printf_i+0x1ac>
 8007c2e:	07d9      	lsls	r1, r3, #31
 8007c30:	bf44      	itt	mi
 8007c32:	f043 0320 	orrmi.w	r3, r3, #32
 8007c36:	6023      	strmi	r3, [r4, #0]
 8007c38:	b91d      	cbnz	r5, 8007c42 <_printf_i+0x196>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	f023 0320 	bic.w	r3, r3, #32
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	2310      	movs	r3, #16
 8007c44:	e7b0      	b.n	8007ba8 <_printf_i+0xfc>
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	f043 0320 	orr.w	r3, r3, #32
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	2378      	movs	r3, #120	; 0x78
 8007c50:	4828      	ldr	r0, [pc, #160]	; (8007cf4 <_printf_i+0x248>)
 8007c52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c56:	e7e3      	b.n	8007c20 <_printf_i+0x174>
 8007c58:	065e      	lsls	r6, r3, #25
 8007c5a:	bf48      	it	mi
 8007c5c:	b2ad      	uxthmi	r5, r5
 8007c5e:	e7e6      	b.n	8007c2e <_printf_i+0x182>
 8007c60:	4616      	mov	r6, r2
 8007c62:	e7bb      	b.n	8007bdc <_printf_i+0x130>
 8007c64:	680b      	ldr	r3, [r1, #0]
 8007c66:	6826      	ldr	r6, [r4, #0]
 8007c68:	6960      	ldr	r0, [r4, #20]
 8007c6a:	1d1d      	adds	r5, r3, #4
 8007c6c:	600d      	str	r5, [r1, #0]
 8007c6e:	0635      	lsls	r5, r6, #24
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	d501      	bpl.n	8007c78 <_printf_i+0x1cc>
 8007c74:	6018      	str	r0, [r3, #0]
 8007c76:	e002      	b.n	8007c7e <_printf_i+0x1d2>
 8007c78:	0671      	lsls	r1, r6, #25
 8007c7a:	d5fb      	bpl.n	8007c74 <_printf_i+0x1c8>
 8007c7c:	8018      	strh	r0, [r3, #0]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	6123      	str	r3, [r4, #16]
 8007c82:	4616      	mov	r6, r2
 8007c84:	e7ba      	b.n	8007bfc <_printf_i+0x150>
 8007c86:	680b      	ldr	r3, [r1, #0]
 8007c88:	1d1a      	adds	r2, r3, #4
 8007c8a:	600a      	str	r2, [r1, #0]
 8007c8c:	681e      	ldr	r6, [r3, #0]
 8007c8e:	6862      	ldr	r2, [r4, #4]
 8007c90:	2100      	movs	r1, #0
 8007c92:	4630      	mov	r0, r6
 8007c94:	f7f8 fac4 	bl	8000220 <memchr>
 8007c98:	b108      	cbz	r0, 8007c9e <_printf_i+0x1f2>
 8007c9a:	1b80      	subs	r0, r0, r6
 8007c9c:	6060      	str	r0, [r4, #4]
 8007c9e:	6863      	ldr	r3, [r4, #4]
 8007ca0:	6123      	str	r3, [r4, #16]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ca8:	e7a8      	b.n	8007bfc <_printf_i+0x150>
 8007caa:	6923      	ldr	r3, [r4, #16]
 8007cac:	4632      	mov	r2, r6
 8007cae:	4649      	mov	r1, r9
 8007cb0:	4640      	mov	r0, r8
 8007cb2:	47d0      	blx	sl
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d0ab      	beq.n	8007c10 <_printf_i+0x164>
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	079b      	lsls	r3, r3, #30
 8007cbc:	d413      	bmi.n	8007ce6 <_printf_i+0x23a>
 8007cbe:	68e0      	ldr	r0, [r4, #12]
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	4298      	cmp	r0, r3
 8007cc4:	bfb8      	it	lt
 8007cc6:	4618      	movlt	r0, r3
 8007cc8:	e7a4      	b.n	8007c14 <_printf_i+0x168>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	4632      	mov	r2, r6
 8007cce:	4649      	mov	r1, r9
 8007cd0:	4640      	mov	r0, r8
 8007cd2:	47d0      	blx	sl
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	d09b      	beq.n	8007c10 <_printf_i+0x164>
 8007cd8:	3501      	adds	r5, #1
 8007cda:	68e3      	ldr	r3, [r4, #12]
 8007cdc:	9903      	ldr	r1, [sp, #12]
 8007cde:	1a5b      	subs	r3, r3, r1
 8007ce0:	42ab      	cmp	r3, r5
 8007ce2:	dcf2      	bgt.n	8007cca <_printf_i+0x21e>
 8007ce4:	e7eb      	b.n	8007cbe <_printf_i+0x212>
 8007ce6:	2500      	movs	r5, #0
 8007ce8:	f104 0619 	add.w	r6, r4, #25
 8007cec:	e7f5      	b.n	8007cda <_printf_i+0x22e>
 8007cee:	bf00      	nop
 8007cf0:	0800a1ce 	.word	0x0800a1ce
 8007cf4:	0800a1df 	.word	0x0800a1df

08007cf8 <realloc>:
 8007cf8:	4b02      	ldr	r3, [pc, #8]	; (8007d04 <realloc+0xc>)
 8007cfa:	460a      	mov	r2, r1
 8007cfc:	4601      	mov	r1, r0
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	f001 bb02 	b.w	8009308 <_realloc_r>
 8007d04:	20000030 	.word	0x20000030

08007d08 <_raise_r>:
 8007d08:	291f      	cmp	r1, #31
 8007d0a:	b538      	push	{r3, r4, r5, lr}
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	460d      	mov	r5, r1
 8007d10:	d904      	bls.n	8007d1c <_raise_r+0x14>
 8007d12:	2316      	movs	r3, #22
 8007d14:	6003      	str	r3, [r0, #0]
 8007d16:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1a:	bd38      	pop	{r3, r4, r5, pc}
 8007d1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d1e:	b112      	cbz	r2, 8007d26 <_raise_r+0x1e>
 8007d20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d24:	b94b      	cbnz	r3, 8007d3a <_raise_r+0x32>
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 f830 	bl	8007d8c <_getpid_r>
 8007d2c:	462a      	mov	r2, r5
 8007d2e:	4601      	mov	r1, r0
 8007d30:	4620      	mov	r0, r4
 8007d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d36:	f000 b817 	b.w	8007d68 <_kill_r>
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d00a      	beq.n	8007d54 <_raise_r+0x4c>
 8007d3e:	1c59      	adds	r1, r3, #1
 8007d40:	d103      	bne.n	8007d4a <_raise_r+0x42>
 8007d42:	2316      	movs	r3, #22
 8007d44:	6003      	str	r3, [r0, #0]
 8007d46:	2001      	movs	r0, #1
 8007d48:	e7e7      	b.n	8007d1a <_raise_r+0x12>
 8007d4a:	2400      	movs	r4, #0
 8007d4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d50:	4628      	mov	r0, r5
 8007d52:	4798      	blx	r3
 8007d54:	2000      	movs	r0, #0
 8007d56:	e7e0      	b.n	8007d1a <_raise_r+0x12>

08007d58 <raise>:
 8007d58:	4b02      	ldr	r3, [pc, #8]	; (8007d64 <raise+0xc>)
 8007d5a:	4601      	mov	r1, r0
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	f7ff bfd3 	b.w	8007d08 <_raise_r>
 8007d62:	bf00      	nop
 8007d64:	20000030 	.word	0x20000030

08007d68 <_kill_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4d07      	ldr	r5, [pc, #28]	; (8007d88 <_kill_r+0x20>)
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4604      	mov	r4, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	4611      	mov	r1, r2
 8007d74:	602b      	str	r3, [r5, #0]
 8007d76:	f7fc fa27 	bl	80041c8 <_kill>
 8007d7a:	1c43      	adds	r3, r0, #1
 8007d7c:	d102      	bne.n	8007d84 <_kill_r+0x1c>
 8007d7e:	682b      	ldr	r3, [r5, #0]
 8007d80:	b103      	cbz	r3, 8007d84 <_kill_r+0x1c>
 8007d82:	6023      	str	r3, [r4, #0]
 8007d84:	bd38      	pop	{r3, r4, r5, pc}
 8007d86:	bf00      	nop
 8007d88:	200015b0 	.word	0x200015b0

08007d8c <_getpid_r>:
 8007d8c:	f7fc ba14 	b.w	80041b8 <_getpid>

08007d90 <quorem>:
 8007d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	6903      	ldr	r3, [r0, #16]
 8007d96:	690c      	ldr	r4, [r1, #16]
 8007d98:	42a3      	cmp	r3, r4
 8007d9a:	4607      	mov	r7, r0
 8007d9c:	f2c0 8081 	blt.w	8007ea2 <quorem+0x112>
 8007da0:	3c01      	subs	r4, #1
 8007da2:	f101 0814 	add.w	r8, r1, #20
 8007da6:	f100 0514 	add.w	r5, r0, #20
 8007daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dae:	9301      	str	r3, [sp, #4]
 8007db0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007db4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007db8:	3301      	adds	r3, #1
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007dc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007dc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007dc8:	d331      	bcc.n	8007e2e <quorem+0x9e>
 8007dca:	f04f 0e00 	mov.w	lr, #0
 8007dce:	4640      	mov	r0, r8
 8007dd0:	46ac      	mov	ip, r5
 8007dd2:	46f2      	mov	sl, lr
 8007dd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007dd8:	b293      	uxth	r3, r2
 8007dda:	fb06 e303 	mla	r3, r6, r3, lr
 8007dde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	ebaa 0303 	sub.w	r3, sl, r3
 8007de8:	0c12      	lsrs	r2, r2, #16
 8007dea:	f8dc a000 	ldr.w	sl, [ip]
 8007dee:	fb06 e202 	mla	r2, r6, r2, lr
 8007df2:	fa13 f38a 	uxtah	r3, r3, sl
 8007df6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007dfa:	fa1f fa82 	uxth.w	sl, r2
 8007dfe:	f8dc 2000 	ldr.w	r2, [ip]
 8007e02:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007e06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e10:	4581      	cmp	r9, r0
 8007e12:	f84c 3b04 	str.w	r3, [ip], #4
 8007e16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e1a:	d2db      	bcs.n	8007dd4 <quorem+0x44>
 8007e1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e20:	b92b      	cbnz	r3, 8007e2e <quorem+0x9e>
 8007e22:	9b01      	ldr	r3, [sp, #4]
 8007e24:	3b04      	subs	r3, #4
 8007e26:	429d      	cmp	r5, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	d32e      	bcc.n	8007e8a <quorem+0xfa>
 8007e2c:	613c      	str	r4, [r7, #16]
 8007e2e:	4638      	mov	r0, r7
 8007e30:	f001 f8b0 	bl	8008f94 <__mcmp>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	db24      	blt.n	8007e82 <quorem+0xf2>
 8007e38:	3601      	adds	r6, #1
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f04f 0c00 	mov.w	ip, #0
 8007e40:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e44:	f8d0 e000 	ldr.w	lr, [r0]
 8007e48:	b293      	uxth	r3, r2
 8007e4a:	ebac 0303 	sub.w	r3, ip, r3
 8007e4e:	0c12      	lsrs	r2, r2, #16
 8007e50:	fa13 f38e 	uxtah	r3, r3, lr
 8007e54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e62:	45c1      	cmp	r9, r8
 8007e64:	f840 3b04 	str.w	r3, [r0], #4
 8007e68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e6c:	d2e8      	bcs.n	8007e40 <quorem+0xb0>
 8007e6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e76:	b922      	cbnz	r2, 8007e82 <quorem+0xf2>
 8007e78:	3b04      	subs	r3, #4
 8007e7a:	429d      	cmp	r5, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	d30a      	bcc.n	8007e96 <quorem+0x106>
 8007e80:	613c      	str	r4, [r7, #16]
 8007e82:	4630      	mov	r0, r6
 8007e84:	b003      	add	sp, #12
 8007e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8a:	6812      	ldr	r2, [r2, #0]
 8007e8c:	3b04      	subs	r3, #4
 8007e8e:	2a00      	cmp	r2, #0
 8007e90:	d1cc      	bne.n	8007e2c <quorem+0x9c>
 8007e92:	3c01      	subs	r4, #1
 8007e94:	e7c7      	b.n	8007e26 <quorem+0x96>
 8007e96:	6812      	ldr	r2, [r2, #0]
 8007e98:	3b04      	subs	r3, #4
 8007e9a:	2a00      	cmp	r2, #0
 8007e9c:	d1f0      	bne.n	8007e80 <quorem+0xf0>
 8007e9e:	3c01      	subs	r4, #1
 8007ea0:	e7eb      	b.n	8007e7a <quorem+0xea>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e7ee      	b.n	8007e84 <quorem+0xf4>
	...

08007ea8 <_dtoa_r>:
 8007ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eac:	ed2d 8b02 	vpush	{d8}
 8007eb0:	ec57 6b10 	vmov	r6, r7, d0
 8007eb4:	b095      	sub	sp, #84	; 0x54
 8007eb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007eb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ebc:	9105      	str	r1, [sp, #20]
 8007ebe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ec6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ec8:	b975      	cbnz	r5, 8007ee8 <_dtoa_r+0x40>
 8007eca:	2010      	movs	r0, #16
 8007ecc:	f000 fddc 	bl	8008a88 <malloc>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	6260      	str	r0, [r4, #36]	; 0x24
 8007ed4:	b920      	cbnz	r0, 8007ee0 <_dtoa_r+0x38>
 8007ed6:	4bb2      	ldr	r3, [pc, #712]	; (80081a0 <_dtoa_r+0x2f8>)
 8007ed8:	21ea      	movs	r1, #234	; 0xea
 8007eda:	48b2      	ldr	r0, [pc, #712]	; (80081a4 <_dtoa_r+0x2fc>)
 8007edc:	f001 fa4a 	bl	8009374 <__assert_func>
 8007ee0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ee4:	6005      	str	r5, [r0, #0]
 8007ee6:	60c5      	str	r5, [r0, #12]
 8007ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eea:	6819      	ldr	r1, [r3, #0]
 8007eec:	b151      	cbz	r1, 8007f04 <_dtoa_r+0x5c>
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	604a      	str	r2, [r1, #4]
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	4093      	lsls	r3, r2
 8007ef6:	608b      	str	r3, [r1, #8]
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f000 fe0d 	bl	8008b18 <_Bfree>
 8007efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f00:	2200      	movs	r2, #0
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	1e3b      	subs	r3, r7, #0
 8007f06:	bfb9      	ittee	lt
 8007f08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f0c:	9303      	strlt	r3, [sp, #12]
 8007f0e:	2300      	movge	r3, #0
 8007f10:	f8c8 3000 	strge.w	r3, [r8]
 8007f14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007f18:	4ba3      	ldr	r3, [pc, #652]	; (80081a8 <_dtoa_r+0x300>)
 8007f1a:	bfbc      	itt	lt
 8007f1c:	2201      	movlt	r2, #1
 8007f1e:	f8c8 2000 	strlt.w	r2, [r8]
 8007f22:	ea33 0309 	bics.w	r3, r3, r9
 8007f26:	d11b      	bne.n	8007f60 <_dtoa_r+0xb8>
 8007f28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f34:	4333      	orrs	r3, r6
 8007f36:	f000 857a 	beq.w	8008a2e <_dtoa_r+0xb86>
 8007f3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f3c:	b963      	cbnz	r3, 8007f58 <_dtoa_r+0xb0>
 8007f3e:	4b9b      	ldr	r3, [pc, #620]	; (80081ac <_dtoa_r+0x304>)
 8007f40:	e024      	b.n	8007f8c <_dtoa_r+0xe4>
 8007f42:	4b9b      	ldr	r3, [pc, #620]	; (80081b0 <_dtoa_r+0x308>)
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	3308      	adds	r3, #8
 8007f48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f4a:	6013      	str	r3, [r2, #0]
 8007f4c:	9800      	ldr	r0, [sp, #0]
 8007f4e:	b015      	add	sp, #84	; 0x54
 8007f50:	ecbd 8b02 	vpop	{d8}
 8007f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f58:	4b94      	ldr	r3, [pc, #592]	; (80081ac <_dtoa_r+0x304>)
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	3303      	adds	r3, #3
 8007f5e:	e7f3      	b.n	8007f48 <_dtoa_r+0xa0>
 8007f60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f64:	2200      	movs	r2, #0
 8007f66:	ec51 0b17 	vmov	r0, r1, d7
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007f70:	f7f8 fdca 	bl	8000b08 <__aeabi_dcmpeq>
 8007f74:	4680      	mov	r8, r0
 8007f76:	b158      	cbz	r0, 8007f90 <_dtoa_r+0xe8>
 8007f78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	6013      	str	r3, [r2, #0]
 8007f7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 8551 	beq.w	8008a28 <_dtoa_r+0xb80>
 8007f86:	488b      	ldr	r0, [pc, #556]	; (80081b4 <_dtoa_r+0x30c>)
 8007f88:	6018      	str	r0, [r3, #0]
 8007f8a:	1e43      	subs	r3, r0, #1
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	e7dd      	b.n	8007f4c <_dtoa_r+0xa4>
 8007f90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007f94:	aa12      	add	r2, sp, #72	; 0x48
 8007f96:	a913      	add	r1, sp, #76	; 0x4c
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f001 f89f 	bl	80090dc <__d2b>
 8007f9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007fa2:	4683      	mov	fp, r0
 8007fa4:	2d00      	cmp	r5, #0
 8007fa6:	d07c      	beq.n	80080a2 <_dtoa_r+0x1fa>
 8007fa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007faa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007fae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fb2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007fb6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007fba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007fbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007fc2:	4b7d      	ldr	r3, [pc, #500]	; (80081b8 <_dtoa_r+0x310>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	4639      	mov	r1, r7
 8007fca:	f7f8 f97d 	bl	80002c8 <__aeabi_dsub>
 8007fce:	a36e      	add	r3, pc, #440	; (adr r3, 8008188 <_dtoa_r+0x2e0>)
 8007fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd4:	f7f8 fb30 	bl	8000638 <__aeabi_dmul>
 8007fd8:	a36d      	add	r3, pc, #436	; (adr r3, 8008190 <_dtoa_r+0x2e8>)
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f7f8 f975 	bl	80002cc <__adddf3>
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	460f      	mov	r7, r1
 8007fe8:	f7f8 fabc 	bl	8000564 <__aeabi_i2d>
 8007fec:	a36a      	add	r3, pc, #424	; (adr r3, 8008198 <_dtoa_r+0x2f0>)
 8007fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff2:	f7f8 fb21 	bl	8000638 <__aeabi_dmul>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	4639      	mov	r1, r7
 8007ffe:	f7f8 f965 	bl	80002cc <__adddf3>
 8008002:	4606      	mov	r6, r0
 8008004:	460f      	mov	r7, r1
 8008006:	f7f8 fdc7 	bl	8000b98 <__aeabi_d2iz>
 800800a:	2200      	movs	r2, #0
 800800c:	4682      	mov	sl, r0
 800800e:	2300      	movs	r3, #0
 8008010:	4630      	mov	r0, r6
 8008012:	4639      	mov	r1, r7
 8008014:	f7f8 fd82 	bl	8000b1c <__aeabi_dcmplt>
 8008018:	b148      	cbz	r0, 800802e <_dtoa_r+0x186>
 800801a:	4650      	mov	r0, sl
 800801c:	f7f8 faa2 	bl	8000564 <__aeabi_i2d>
 8008020:	4632      	mov	r2, r6
 8008022:	463b      	mov	r3, r7
 8008024:	f7f8 fd70 	bl	8000b08 <__aeabi_dcmpeq>
 8008028:	b908      	cbnz	r0, 800802e <_dtoa_r+0x186>
 800802a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800802e:	f1ba 0f16 	cmp.w	sl, #22
 8008032:	d854      	bhi.n	80080de <_dtoa_r+0x236>
 8008034:	4b61      	ldr	r3, [pc, #388]	; (80081bc <_dtoa_r+0x314>)
 8008036:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008042:	f7f8 fd6b 	bl	8000b1c <__aeabi_dcmplt>
 8008046:	2800      	cmp	r0, #0
 8008048:	d04b      	beq.n	80080e2 <_dtoa_r+0x23a>
 800804a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800804e:	2300      	movs	r3, #0
 8008050:	930e      	str	r3, [sp, #56]	; 0x38
 8008052:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008054:	1b5d      	subs	r5, r3, r5
 8008056:	1e6b      	subs	r3, r5, #1
 8008058:	9304      	str	r3, [sp, #16]
 800805a:	bf43      	ittte	mi
 800805c:	2300      	movmi	r3, #0
 800805e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008062:	9304      	strmi	r3, [sp, #16]
 8008064:	f04f 0800 	movpl.w	r8, #0
 8008068:	f1ba 0f00 	cmp.w	sl, #0
 800806c:	db3b      	blt.n	80080e6 <_dtoa_r+0x23e>
 800806e:	9b04      	ldr	r3, [sp, #16]
 8008070:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008074:	4453      	add	r3, sl
 8008076:	9304      	str	r3, [sp, #16]
 8008078:	2300      	movs	r3, #0
 800807a:	9306      	str	r3, [sp, #24]
 800807c:	9b05      	ldr	r3, [sp, #20]
 800807e:	2b09      	cmp	r3, #9
 8008080:	d869      	bhi.n	8008156 <_dtoa_r+0x2ae>
 8008082:	2b05      	cmp	r3, #5
 8008084:	bfc4      	itt	gt
 8008086:	3b04      	subgt	r3, #4
 8008088:	9305      	strgt	r3, [sp, #20]
 800808a:	9b05      	ldr	r3, [sp, #20]
 800808c:	f1a3 0302 	sub.w	r3, r3, #2
 8008090:	bfcc      	ite	gt
 8008092:	2500      	movgt	r5, #0
 8008094:	2501      	movle	r5, #1
 8008096:	2b03      	cmp	r3, #3
 8008098:	d869      	bhi.n	800816e <_dtoa_r+0x2c6>
 800809a:	e8df f003 	tbb	[pc, r3]
 800809e:	4e2c      	.short	0x4e2c
 80080a0:	5a4c      	.short	0x5a4c
 80080a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80080a6:	441d      	add	r5, r3
 80080a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80080ac:	2b20      	cmp	r3, #32
 80080ae:	bfc1      	itttt	gt
 80080b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80080b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80080b8:	fa09 f303 	lslgt.w	r3, r9, r3
 80080bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80080c0:	bfda      	itte	le
 80080c2:	f1c3 0320 	rsble	r3, r3, #32
 80080c6:	fa06 f003 	lslle.w	r0, r6, r3
 80080ca:	4318      	orrgt	r0, r3
 80080cc:	f7f8 fa3a 	bl	8000544 <__aeabi_ui2d>
 80080d0:	2301      	movs	r3, #1
 80080d2:	4606      	mov	r6, r0
 80080d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80080d8:	3d01      	subs	r5, #1
 80080da:	9310      	str	r3, [sp, #64]	; 0x40
 80080dc:	e771      	b.n	8007fc2 <_dtoa_r+0x11a>
 80080de:	2301      	movs	r3, #1
 80080e0:	e7b6      	b.n	8008050 <_dtoa_r+0x1a8>
 80080e2:	900e      	str	r0, [sp, #56]	; 0x38
 80080e4:	e7b5      	b.n	8008052 <_dtoa_r+0x1aa>
 80080e6:	f1ca 0300 	rsb	r3, sl, #0
 80080ea:	9306      	str	r3, [sp, #24]
 80080ec:	2300      	movs	r3, #0
 80080ee:	eba8 080a 	sub.w	r8, r8, sl
 80080f2:	930d      	str	r3, [sp, #52]	; 0x34
 80080f4:	e7c2      	b.n	800807c <_dtoa_r+0x1d4>
 80080f6:	2300      	movs	r3, #0
 80080f8:	9308      	str	r3, [sp, #32]
 80080fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	dc39      	bgt.n	8008174 <_dtoa_r+0x2cc>
 8008100:	f04f 0901 	mov.w	r9, #1
 8008104:	f8cd 9004 	str.w	r9, [sp, #4]
 8008108:	464b      	mov	r3, r9
 800810a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800810e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008110:	2200      	movs	r2, #0
 8008112:	6042      	str	r2, [r0, #4]
 8008114:	2204      	movs	r2, #4
 8008116:	f102 0614 	add.w	r6, r2, #20
 800811a:	429e      	cmp	r6, r3
 800811c:	6841      	ldr	r1, [r0, #4]
 800811e:	d92f      	bls.n	8008180 <_dtoa_r+0x2d8>
 8008120:	4620      	mov	r0, r4
 8008122:	f000 fcb9 	bl	8008a98 <_Balloc>
 8008126:	9000      	str	r0, [sp, #0]
 8008128:	2800      	cmp	r0, #0
 800812a:	d14b      	bne.n	80081c4 <_dtoa_r+0x31c>
 800812c:	4b24      	ldr	r3, [pc, #144]	; (80081c0 <_dtoa_r+0x318>)
 800812e:	4602      	mov	r2, r0
 8008130:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008134:	e6d1      	b.n	8007eda <_dtoa_r+0x32>
 8008136:	2301      	movs	r3, #1
 8008138:	e7de      	b.n	80080f8 <_dtoa_r+0x250>
 800813a:	2300      	movs	r3, #0
 800813c:	9308      	str	r3, [sp, #32]
 800813e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008140:	eb0a 0903 	add.w	r9, sl, r3
 8008144:	f109 0301 	add.w	r3, r9, #1
 8008148:	2b01      	cmp	r3, #1
 800814a:	9301      	str	r3, [sp, #4]
 800814c:	bfb8      	it	lt
 800814e:	2301      	movlt	r3, #1
 8008150:	e7dd      	b.n	800810e <_dtoa_r+0x266>
 8008152:	2301      	movs	r3, #1
 8008154:	e7f2      	b.n	800813c <_dtoa_r+0x294>
 8008156:	2501      	movs	r5, #1
 8008158:	2300      	movs	r3, #0
 800815a:	9305      	str	r3, [sp, #20]
 800815c:	9508      	str	r5, [sp, #32]
 800815e:	f04f 39ff 	mov.w	r9, #4294967295
 8008162:	2200      	movs	r2, #0
 8008164:	f8cd 9004 	str.w	r9, [sp, #4]
 8008168:	2312      	movs	r3, #18
 800816a:	9209      	str	r2, [sp, #36]	; 0x24
 800816c:	e7cf      	b.n	800810e <_dtoa_r+0x266>
 800816e:	2301      	movs	r3, #1
 8008170:	9308      	str	r3, [sp, #32]
 8008172:	e7f4      	b.n	800815e <_dtoa_r+0x2b6>
 8008174:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008178:	f8cd 9004 	str.w	r9, [sp, #4]
 800817c:	464b      	mov	r3, r9
 800817e:	e7c6      	b.n	800810e <_dtoa_r+0x266>
 8008180:	3101      	adds	r1, #1
 8008182:	6041      	str	r1, [r0, #4]
 8008184:	0052      	lsls	r2, r2, #1
 8008186:	e7c6      	b.n	8008116 <_dtoa_r+0x26e>
 8008188:	636f4361 	.word	0x636f4361
 800818c:	3fd287a7 	.word	0x3fd287a7
 8008190:	8b60c8b3 	.word	0x8b60c8b3
 8008194:	3fc68a28 	.word	0x3fc68a28
 8008198:	509f79fb 	.word	0x509f79fb
 800819c:	3fd34413 	.word	0x3fd34413
 80081a0:	0800a1fd 	.word	0x0800a1fd
 80081a4:	0800a214 	.word	0x0800a214
 80081a8:	7ff00000 	.word	0x7ff00000
 80081ac:	0800a1f9 	.word	0x0800a1f9
 80081b0:	0800a1f0 	.word	0x0800a1f0
 80081b4:	0800a1cd 	.word	0x0800a1cd
 80081b8:	3ff80000 	.word	0x3ff80000
 80081bc:	0800a310 	.word	0x0800a310
 80081c0:	0800a273 	.word	0x0800a273
 80081c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081c6:	9a00      	ldr	r2, [sp, #0]
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	9b01      	ldr	r3, [sp, #4]
 80081cc:	2b0e      	cmp	r3, #14
 80081ce:	f200 80ad 	bhi.w	800832c <_dtoa_r+0x484>
 80081d2:	2d00      	cmp	r5, #0
 80081d4:	f000 80aa 	beq.w	800832c <_dtoa_r+0x484>
 80081d8:	f1ba 0f00 	cmp.w	sl, #0
 80081dc:	dd36      	ble.n	800824c <_dtoa_r+0x3a4>
 80081de:	4ac3      	ldr	r2, [pc, #780]	; (80084ec <_dtoa_r+0x644>)
 80081e0:	f00a 030f 	and.w	r3, sl, #15
 80081e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081e8:	ed93 7b00 	vldr	d7, [r3]
 80081ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80081f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80081f4:	eeb0 8a47 	vmov.f32	s16, s14
 80081f8:	eef0 8a67 	vmov.f32	s17, s15
 80081fc:	d016      	beq.n	800822c <_dtoa_r+0x384>
 80081fe:	4bbc      	ldr	r3, [pc, #752]	; (80084f0 <_dtoa_r+0x648>)
 8008200:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008204:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008208:	f7f8 fb40 	bl	800088c <__aeabi_ddiv>
 800820c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008210:	f007 070f 	and.w	r7, r7, #15
 8008214:	2503      	movs	r5, #3
 8008216:	4eb6      	ldr	r6, [pc, #728]	; (80084f0 <_dtoa_r+0x648>)
 8008218:	b957      	cbnz	r7, 8008230 <_dtoa_r+0x388>
 800821a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800821e:	ec53 2b18 	vmov	r2, r3, d8
 8008222:	f7f8 fb33 	bl	800088c <__aeabi_ddiv>
 8008226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800822a:	e029      	b.n	8008280 <_dtoa_r+0x3d8>
 800822c:	2502      	movs	r5, #2
 800822e:	e7f2      	b.n	8008216 <_dtoa_r+0x36e>
 8008230:	07f9      	lsls	r1, r7, #31
 8008232:	d508      	bpl.n	8008246 <_dtoa_r+0x39e>
 8008234:	ec51 0b18 	vmov	r0, r1, d8
 8008238:	e9d6 2300 	ldrd	r2, r3, [r6]
 800823c:	f7f8 f9fc 	bl	8000638 <__aeabi_dmul>
 8008240:	ec41 0b18 	vmov	d8, r0, r1
 8008244:	3501      	adds	r5, #1
 8008246:	107f      	asrs	r7, r7, #1
 8008248:	3608      	adds	r6, #8
 800824a:	e7e5      	b.n	8008218 <_dtoa_r+0x370>
 800824c:	f000 80a6 	beq.w	800839c <_dtoa_r+0x4f4>
 8008250:	f1ca 0600 	rsb	r6, sl, #0
 8008254:	4ba5      	ldr	r3, [pc, #660]	; (80084ec <_dtoa_r+0x644>)
 8008256:	4fa6      	ldr	r7, [pc, #664]	; (80084f0 <_dtoa_r+0x648>)
 8008258:	f006 020f 	and.w	r2, r6, #15
 800825c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008268:	f7f8 f9e6 	bl	8000638 <__aeabi_dmul>
 800826c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008270:	1136      	asrs	r6, r6, #4
 8008272:	2300      	movs	r3, #0
 8008274:	2502      	movs	r5, #2
 8008276:	2e00      	cmp	r6, #0
 8008278:	f040 8085 	bne.w	8008386 <_dtoa_r+0x4de>
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1d2      	bne.n	8008226 <_dtoa_r+0x37e>
 8008280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 808c 	beq.w	80083a0 <_dtoa_r+0x4f8>
 8008288:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800828c:	4b99      	ldr	r3, [pc, #612]	; (80084f4 <_dtoa_r+0x64c>)
 800828e:	2200      	movs	r2, #0
 8008290:	4630      	mov	r0, r6
 8008292:	4639      	mov	r1, r7
 8008294:	f7f8 fc42 	bl	8000b1c <__aeabi_dcmplt>
 8008298:	2800      	cmp	r0, #0
 800829a:	f000 8081 	beq.w	80083a0 <_dtoa_r+0x4f8>
 800829e:	9b01      	ldr	r3, [sp, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d07d      	beq.n	80083a0 <_dtoa_r+0x4f8>
 80082a4:	f1b9 0f00 	cmp.w	r9, #0
 80082a8:	dd3c      	ble.n	8008324 <_dtoa_r+0x47c>
 80082aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80082ae:	9307      	str	r3, [sp, #28]
 80082b0:	2200      	movs	r2, #0
 80082b2:	4b91      	ldr	r3, [pc, #580]	; (80084f8 <_dtoa_r+0x650>)
 80082b4:	4630      	mov	r0, r6
 80082b6:	4639      	mov	r1, r7
 80082b8:	f7f8 f9be 	bl	8000638 <__aeabi_dmul>
 80082bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082c0:	3501      	adds	r5, #1
 80082c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80082c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80082ca:	4628      	mov	r0, r5
 80082cc:	f7f8 f94a 	bl	8000564 <__aeabi_i2d>
 80082d0:	4632      	mov	r2, r6
 80082d2:	463b      	mov	r3, r7
 80082d4:	f7f8 f9b0 	bl	8000638 <__aeabi_dmul>
 80082d8:	4b88      	ldr	r3, [pc, #544]	; (80084fc <_dtoa_r+0x654>)
 80082da:	2200      	movs	r2, #0
 80082dc:	f7f7 fff6 	bl	80002cc <__adddf3>
 80082e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80082e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082e8:	9303      	str	r3, [sp, #12]
 80082ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d15c      	bne.n	80083aa <_dtoa_r+0x502>
 80082f0:	4b83      	ldr	r3, [pc, #524]	; (8008500 <_dtoa_r+0x658>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	4630      	mov	r0, r6
 80082f6:	4639      	mov	r1, r7
 80082f8:	f7f7 ffe6 	bl	80002c8 <__aeabi_dsub>
 80082fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008300:	4606      	mov	r6, r0
 8008302:	460f      	mov	r7, r1
 8008304:	f7f8 fc28 	bl	8000b58 <__aeabi_dcmpgt>
 8008308:	2800      	cmp	r0, #0
 800830a:	f040 8296 	bne.w	800883a <_dtoa_r+0x992>
 800830e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008312:	4630      	mov	r0, r6
 8008314:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008318:	4639      	mov	r1, r7
 800831a:	f7f8 fbff 	bl	8000b1c <__aeabi_dcmplt>
 800831e:	2800      	cmp	r0, #0
 8008320:	f040 8288 	bne.w	8008834 <_dtoa_r+0x98c>
 8008324:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008328:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800832c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800832e:	2b00      	cmp	r3, #0
 8008330:	f2c0 8158 	blt.w	80085e4 <_dtoa_r+0x73c>
 8008334:	f1ba 0f0e 	cmp.w	sl, #14
 8008338:	f300 8154 	bgt.w	80085e4 <_dtoa_r+0x73c>
 800833c:	4b6b      	ldr	r3, [pc, #428]	; (80084ec <_dtoa_r+0x644>)
 800833e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008342:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008348:	2b00      	cmp	r3, #0
 800834a:	f280 80e3 	bge.w	8008514 <_dtoa_r+0x66c>
 800834e:	9b01      	ldr	r3, [sp, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f300 80df 	bgt.w	8008514 <_dtoa_r+0x66c>
 8008356:	f040 826d 	bne.w	8008834 <_dtoa_r+0x98c>
 800835a:	4b69      	ldr	r3, [pc, #420]	; (8008500 <_dtoa_r+0x658>)
 800835c:	2200      	movs	r2, #0
 800835e:	4640      	mov	r0, r8
 8008360:	4649      	mov	r1, r9
 8008362:	f7f8 f969 	bl	8000638 <__aeabi_dmul>
 8008366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800836a:	f7f8 fbeb 	bl	8000b44 <__aeabi_dcmpge>
 800836e:	9e01      	ldr	r6, [sp, #4]
 8008370:	4637      	mov	r7, r6
 8008372:	2800      	cmp	r0, #0
 8008374:	f040 8243 	bne.w	80087fe <_dtoa_r+0x956>
 8008378:	9d00      	ldr	r5, [sp, #0]
 800837a:	2331      	movs	r3, #49	; 0x31
 800837c:	f805 3b01 	strb.w	r3, [r5], #1
 8008380:	f10a 0a01 	add.w	sl, sl, #1
 8008384:	e23f      	b.n	8008806 <_dtoa_r+0x95e>
 8008386:	07f2      	lsls	r2, r6, #31
 8008388:	d505      	bpl.n	8008396 <_dtoa_r+0x4ee>
 800838a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800838e:	f7f8 f953 	bl	8000638 <__aeabi_dmul>
 8008392:	3501      	adds	r5, #1
 8008394:	2301      	movs	r3, #1
 8008396:	1076      	asrs	r6, r6, #1
 8008398:	3708      	adds	r7, #8
 800839a:	e76c      	b.n	8008276 <_dtoa_r+0x3ce>
 800839c:	2502      	movs	r5, #2
 800839e:	e76f      	b.n	8008280 <_dtoa_r+0x3d8>
 80083a0:	9b01      	ldr	r3, [sp, #4]
 80083a2:	f8cd a01c 	str.w	sl, [sp, #28]
 80083a6:	930c      	str	r3, [sp, #48]	; 0x30
 80083a8:	e78d      	b.n	80082c6 <_dtoa_r+0x41e>
 80083aa:	9900      	ldr	r1, [sp, #0]
 80083ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80083ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083b0:	4b4e      	ldr	r3, [pc, #312]	; (80084ec <_dtoa_r+0x644>)
 80083b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083b6:	4401      	add	r1, r0
 80083b8:	9102      	str	r1, [sp, #8]
 80083ba:	9908      	ldr	r1, [sp, #32]
 80083bc:	eeb0 8a47 	vmov.f32	s16, s14
 80083c0:	eef0 8a67 	vmov.f32	s17, s15
 80083c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083cc:	2900      	cmp	r1, #0
 80083ce:	d045      	beq.n	800845c <_dtoa_r+0x5b4>
 80083d0:	494c      	ldr	r1, [pc, #304]	; (8008504 <_dtoa_r+0x65c>)
 80083d2:	2000      	movs	r0, #0
 80083d4:	f7f8 fa5a 	bl	800088c <__aeabi_ddiv>
 80083d8:	ec53 2b18 	vmov	r2, r3, d8
 80083dc:	f7f7 ff74 	bl	80002c8 <__aeabi_dsub>
 80083e0:	9d00      	ldr	r5, [sp, #0]
 80083e2:	ec41 0b18 	vmov	d8, r0, r1
 80083e6:	4639      	mov	r1, r7
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7f8 fbd5 	bl	8000b98 <__aeabi_d2iz>
 80083ee:	900c      	str	r0, [sp, #48]	; 0x30
 80083f0:	f7f8 f8b8 	bl	8000564 <__aeabi_i2d>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4630      	mov	r0, r6
 80083fa:	4639      	mov	r1, r7
 80083fc:	f7f7 ff64 	bl	80002c8 <__aeabi_dsub>
 8008400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008402:	3330      	adds	r3, #48	; 0x30
 8008404:	f805 3b01 	strb.w	r3, [r5], #1
 8008408:	ec53 2b18 	vmov	r2, r3, d8
 800840c:	4606      	mov	r6, r0
 800840e:	460f      	mov	r7, r1
 8008410:	f7f8 fb84 	bl	8000b1c <__aeabi_dcmplt>
 8008414:	2800      	cmp	r0, #0
 8008416:	d165      	bne.n	80084e4 <_dtoa_r+0x63c>
 8008418:	4632      	mov	r2, r6
 800841a:	463b      	mov	r3, r7
 800841c:	4935      	ldr	r1, [pc, #212]	; (80084f4 <_dtoa_r+0x64c>)
 800841e:	2000      	movs	r0, #0
 8008420:	f7f7 ff52 	bl	80002c8 <__aeabi_dsub>
 8008424:	ec53 2b18 	vmov	r2, r3, d8
 8008428:	f7f8 fb78 	bl	8000b1c <__aeabi_dcmplt>
 800842c:	2800      	cmp	r0, #0
 800842e:	f040 80b9 	bne.w	80085a4 <_dtoa_r+0x6fc>
 8008432:	9b02      	ldr	r3, [sp, #8]
 8008434:	429d      	cmp	r5, r3
 8008436:	f43f af75 	beq.w	8008324 <_dtoa_r+0x47c>
 800843a:	4b2f      	ldr	r3, [pc, #188]	; (80084f8 <_dtoa_r+0x650>)
 800843c:	ec51 0b18 	vmov	r0, r1, d8
 8008440:	2200      	movs	r2, #0
 8008442:	f7f8 f8f9 	bl	8000638 <__aeabi_dmul>
 8008446:	4b2c      	ldr	r3, [pc, #176]	; (80084f8 <_dtoa_r+0x650>)
 8008448:	ec41 0b18 	vmov	d8, r0, r1
 800844c:	2200      	movs	r2, #0
 800844e:	4630      	mov	r0, r6
 8008450:	4639      	mov	r1, r7
 8008452:	f7f8 f8f1 	bl	8000638 <__aeabi_dmul>
 8008456:	4606      	mov	r6, r0
 8008458:	460f      	mov	r7, r1
 800845a:	e7c4      	b.n	80083e6 <_dtoa_r+0x53e>
 800845c:	ec51 0b17 	vmov	r0, r1, d7
 8008460:	f7f8 f8ea 	bl	8000638 <__aeabi_dmul>
 8008464:	9b02      	ldr	r3, [sp, #8]
 8008466:	9d00      	ldr	r5, [sp, #0]
 8008468:	930c      	str	r3, [sp, #48]	; 0x30
 800846a:	ec41 0b18 	vmov	d8, r0, r1
 800846e:	4639      	mov	r1, r7
 8008470:	4630      	mov	r0, r6
 8008472:	f7f8 fb91 	bl	8000b98 <__aeabi_d2iz>
 8008476:	9011      	str	r0, [sp, #68]	; 0x44
 8008478:	f7f8 f874 	bl	8000564 <__aeabi_i2d>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4630      	mov	r0, r6
 8008482:	4639      	mov	r1, r7
 8008484:	f7f7 ff20 	bl	80002c8 <__aeabi_dsub>
 8008488:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800848a:	3330      	adds	r3, #48	; 0x30
 800848c:	f805 3b01 	strb.w	r3, [r5], #1
 8008490:	9b02      	ldr	r3, [sp, #8]
 8008492:	429d      	cmp	r5, r3
 8008494:	4606      	mov	r6, r0
 8008496:	460f      	mov	r7, r1
 8008498:	f04f 0200 	mov.w	r2, #0
 800849c:	d134      	bne.n	8008508 <_dtoa_r+0x660>
 800849e:	4b19      	ldr	r3, [pc, #100]	; (8008504 <_dtoa_r+0x65c>)
 80084a0:	ec51 0b18 	vmov	r0, r1, d8
 80084a4:	f7f7 ff12 	bl	80002cc <__adddf3>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	4630      	mov	r0, r6
 80084ae:	4639      	mov	r1, r7
 80084b0:	f7f8 fb52 	bl	8000b58 <__aeabi_dcmpgt>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d175      	bne.n	80085a4 <_dtoa_r+0x6fc>
 80084b8:	ec53 2b18 	vmov	r2, r3, d8
 80084bc:	4911      	ldr	r1, [pc, #68]	; (8008504 <_dtoa_r+0x65c>)
 80084be:	2000      	movs	r0, #0
 80084c0:	f7f7 ff02 	bl	80002c8 <__aeabi_dsub>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4630      	mov	r0, r6
 80084ca:	4639      	mov	r1, r7
 80084cc:	f7f8 fb26 	bl	8000b1c <__aeabi_dcmplt>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	f43f af27 	beq.w	8008324 <_dtoa_r+0x47c>
 80084d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084d8:	1e6b      	subs	r3, r5, #1
 80084da:	930c      	str	r3, [sp, #48]	; 0x30
 80084dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084e0:	2b30      	cmp	r3, #48	; 0x30
 80084e2:	d0f8      	beq.n	80084d6 <_dtoa_r+0x62e>
 80084e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80084e8:	e04a      	b.n	8008580 <_dtoa_r+0x6d8>
 80084ea:	bf00      	nop
 80084ec:	0800a310 	.word	0x0800a310
 80084f0:	0800a2e8 	.word	0x0800a2e8
 80084f4:	3ff00000 	.word	0x3ff00000
 80084f8:	40240000 	.word	0x40240000
 80084fc:	401c0000 	.word	0x401c0000
 8008500:	40140000 	.word	0x40140000
 8008504:	3fe00000 	.word	0x3fe00000
 8008508:	4baf      	ldr	r3, [pc, #700]	; (80087c8 <_dtoa_r+0x920>)
 800850a:	f7f8 f895 	bl	8000638 <__aeabi_dmul>
 800850e:	4606      	mov	r6, r0
 8008510:	460f      	mov	r7, r1
 8008512:	e7ac      	b.n	800846e <_dtoa_r+0x5c6>
 8008514:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008518:	9d00      	ldr	r5, [sp, #0]
 800851a:	4642      	mov	r2, r8
 800851c:	464b      	mov	r3, r9
 800851e:	4630      	mov	r0, r6
 8008520:	4639      	mov	r1, r7
 8008522:	f7f8 f9b3 	bl	800088c <__aeabi_ddiv>
 8008526:	f7f8 fb37 	bl	8000b98 <__aeabi_d2iz>
 800852a:	9002      	str	r0, [sp, #8]
 800852c:	f7f8 f81a 	bl	8000564 <__aeabi_i2d>
 8008530:	4642      	mov	r2, r8
 8008532:	464b      	mov	r3, r9
 8008534:	f7f8 f880 	bl	8000638 <__aeabi_dmul>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4630      	mov	r0, r6
 800853e:	4639      	mov	r1, r7
 8008540:	f7f7 fec2 	bl	80002c8 <__aeabi_dsub>
 8008544:	9e02      	ldr	r6, [sp, #8]
 8008546:	9f01      	ldr	r7, [sp, #4]
 8008548:	3630      	adds	r6, #48	; 0x30
 800854a:	f805 6b01 	strb.w	r6, [r5], #1
 800854e:	9e00      	ldr	r6, [sp, #0]
 8008550:	1bae      	subs	r6, r5, r6
 8008552:	42b7      	cmp	r7, r6
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	d137      	bne.n	80085ca <_dtoa_r+0x722>
 800855a:	f7f7 feb7 	bl	80002cc <__adddf3>
 800855e:	4642      	mov	r2, r8
 8008560:	464b      	mov	r3, r9
 8008562:	4606      	mov	r6, r0
 8008564:	460f      	mov	r7, r1
 8008566:	f7f8 faf7 	bl	8000b58 <__aeabi_dcmpgt>
 800856a:	b9c8      	cbnz	r0, 80085a0 <_dtoa_r+0x6f8>
 800856c:	4642      	mov	r2, r8
 800856e:	464b      	mov	r3, r9
 8008570:	4630      	mov	r0, r6
 8008572:	4639      	mov	r1, r7
 8008574:	f7f8 fac8 	bl	8000b08 <__aeabi_dcmpeq>
 8008578:	b110      	cbz	r0, 8008580 <_dtoa_r+0x6d8>
 800857a:	9b02      	ldr	r3, [sp, #8]
 800857c:	07d9      	lsls	r1, r3, #31
 800857e:	d40f      	bmi.n	80085a0 <_dtoa_r+0x6f8>
 8008580:	4620      	mov	r0, r4
 8008582:	4659      	mov	r1, fp
 8008584:	f000 fac8 	bl	8008b18 <_Bfree>
 8008588:	2300      	movs	r3, #0
 800858a:	702b      	strb	r3, [r5, #0]
 800858c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800858e:	f10a 0001 	add.w	r0, sl, #1
 8008592:	6018      	str	r0, [r3, #0]
 8008594:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008596:	2b00      	cmp	r3, #0
 8008598:	f43f acd8 	beq.w	8007f4c <_dtoa_r+0xa4>
 800859c:	601d      	str	r5, [r3, #0]
 800859e:	e4d5      	b.n	8007f4c <_dtoa_r+0xa4>
 80085a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80085a4:	462b      	mov	r3, r5
 80085a6:	461d      	mov	r5, r3
 80085a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ac:	2a39      	cmp	r2, #57	; 0x39
 80085ae:	d108      	bne.n	80085c2 <_dtoa_r+0x71a>
 80085b0:	9a00      	ldr	r2, [sp, #0]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d1f7      	bne.n	80085a6 <_dtoa_r+0x6fe>
 80085b6:	9a07      	ldr	r2, [sp, #28]
 80085b8:	9900      	ldr	r1, [sp, #0]
 80085ba:	3201      	adds	r2, #1
 80085bc:	9207      	str	r2, [sp, #28]
 80085be:	2230      	movs	r2, #48	; 0x30
 80085c0:	700a      	strb	r2, [r1, #0]
 80085c2:	781a      	ldrb	r2, [r3, #0]
 80085c4:	3201      	adds	r2, #1
 80085c6:	701a      	strb	r2, [r3, #0]
 80085c8:	e78c      	b.n	80084e4 <_dtoa_r+0x63c>
 80085ca:	4b7f      	ldr	r3, [pc, #508]	; (80087c8 <_dtoa_r+0x920>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	f7f8 f833 	bl	8000638 <__aeabi_dmul>
 80085d2:	2200      	movs	r2, #0
 80085d4:	2300      	movs	r3, #0
 80085d6:	4606      	mov	r6, r0
 80085d8:	460f      	mov	r7, r1
 80085da:	f7f8 fa95 	bl	8000b08 <__aeabi_dcmpeq>
 80085de:	2800      	cmp	r0, #0
 80085e0:	d09b      	beq.n	800851a <_dtoa_r+0x672>
 80085e2:	e7cd      	b.n	8008580 <_dtoa_r+0x6d8>
 80085e4:	9a08      	ldr	r2, [sp, #32]
 80085e6:	2a00      	cmp	r2, #0
 80085e8:	f000 80c4 	beq.w	8008774 <_dtoa_r+0x8cc>
 80085ec:	9a05      	ldr	r2, [sp, #20]
 80085ee:	2a01      	cmp	r2, #1
 80085f0:	f300 80a8 	bgt.w	8008744 <_dtoa_r+0x89c>
 80085f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085f6:	2a00      	cmp	r2, #0
 80085f8:	f000 80a0 	beq.w	800873c <_dtoa_r+0x894>
 80085fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008600:	9e06      	ldr	r6, [sp, #24]
 8008602:	4645      	mov	r5, r8
 8008604:	9a04      	ldr	r2, [sp, #16]
 8008606:	2101      	movs	r1, #1
 8008608:	441a      	add	r2, r3
 800860a:	4620      	mov	r0, r4
 800860c:	4498      	add	r8, r3
 800860e:	9204      	str	r2, [sp, #16]
 8008610:	f000 fb3e 	bl	8008c90 <__i2b>
 8008614:	4607      	mov	r7, r0
 8008616:	2d00      	cmp	r5, #0
 8008618:	dd0b      	ble.n	8008632 <_dtoa_r+0x78a>
 800861a:	9b04      	ldr	r3, [sp, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	dd08      	ble.n	8008632 <_dtoa_r+0x78a>
 8008620:	42ab      	cmp	r3, r5
 8008622:	9a04      	ldr	r2, [sp, #16]
 8008624:	bfa8      	it	ge
 8008626:	462b      	movge	r3, r5
 8008628:	eba8 0803 	sub.w	r8, r8, r3
 800862c:	1aed      	subs	r5, r5, r3
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	9304      	str	r3, [sp, #16]
 8008632:	9b06      	ldr	r3, [sp, #24]
 8008634:	b1fb      	cbz	r3, 8008676 <_dtoa_r+0x7ce>
 8008636:	9b08      	ldr	r3, [sp, #32]
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 809f 	beq.w	800877c <_dtoa_r+0x8d4>
 800863e:	2e00      	cmp	r6, #0
 8008640:	dd11      	ble.n	8008666 <_dtoa_r+0x7be>
 8008642:	4639      	mov	r1, r7
 8008644:	4632      	mov	r2, r6
 8008646:	4620      	mov	r0, r4
 8008648:	f000 fbde 	bl	8008e08 <__pow5mult>
 800864c:	465a      	mov	r2, fp
 800864e:	4601      	mov	r1, r0
 8008650:	4607      	mov	r7, r0
 8008652:	4620      	mov	r0, r4
 8008654:	f000 fb32 	bl	8008cbc <__multiply>
 8008658:	4659      	mov	r1, fp
 800865a:	9007      	str	r0, [sp, #28]
 800865c:	4620      	mov	r0, r4
 800865e:	f000 fa5b 	bl	8008b18 <_Bfree>
 8008662:	9b07      	ldr	r3, [sp, #28]
 8008664:	469b      	mov	fp, r3
 8008666:	9b06      	ldr	r3, [sp, #24]
 8008668:	1b9a      	subs	r2, r3, r6
 800866a:	d004      	beq.n	8008676 <_dtoa_r+0x7ce>
 800866c:	4659      	mov	r1, fp
 800866e:	4620      	mov	r0, r4
 8008670:	f000 fbca 	bl	8008e08 <__pow5mult>
 8008674:	4683      	mov	fp, r0
 8008676:	2101      	movs	r1, #1
 8008678:	4620      	mov	r0, r4
 800867a:	f000 fb09 	bl	8008c90 <__i2b>
 800867e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008680:	2b00      	cmp	r3, #0
 8008682:	4606      	mov	r6, r0
 8008684:	dd7c      	ble.n	8008780 <_dtoa_r+0x8d8>
 8008686:	461a      	mov	r2, r3
 8008688:	4601      	mov	r1, r0
 800868a:	4620      	mov	r0, r4
 800868c:	f000 fbbc 	bl	8008e08 <__pow5mult>
 8008690:	9b05      	ldr	r3, [sp, #20]
 8008692:	2b01      	cmp	r3, #1
 8008694:	4606      	mov	r6, r0
 8008696:	dd76      	ble.n	8008786 <_dtoa_r+0x8de>
 8008698:	2300      	movs	r3, #0
 800869a:	9306      	str	r3, [sp, #24]
 800869c:	6933      	ldr	r3, [r6, #16]
 800869e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80086a2:	6918      	ldr	r0, [r3, #16]
 80086a4:	f000 faa4 	bl	8008bf0 <__hi0bits>
 80086a8:	f1c0 0020 	rsb	r0, r0, #32
 80086ac:	9b04      	ldr	r3, [sp, #16]
 80086ae:	4418      	add	r0, r3
 80086b0:	f010 001f 	ands.w	r0, r0, #31
 80086b4:	f000 8086 	beq.w	80087c4 <_dtoa_r+0x91c>
 80086b8:	f1c0 0320 	rsb	r3, r0, #32
 80086bc:	2b04      	cmp	r3, #4
 80086be:	dd7f      	ble.n	80087c0 <_dtoa_r+0x918>
 80086c0:	f1c0 001c 	rsb	r0, r0, #28
 80086c4:	9b04      	ldr	r3, [sp, #16]
 80086c6:	4403      	add	r3, r0
 80086c8:	4480      	add	r8, r0
 80086ca:	4405      	add	r5, r0
 80086cc:	9304      	str	r3, [sp, #16]
 80086ce:	f1b8 0f00 	cmp.w	r8, #0
 80086d2:	dd05      	ble.n	80086e0 <_dtoa_r+0x838>
 80086d4:	4659      	mov	r1, fp
 80086d6:	4642      	mov	r2, r8
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 fbef 	bl	8008ebc <__lshift>
 80086de:	4683      	mov	fp, r0
 80086e0:	9b04      	ldr	r3, [sp, #16]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	dd05      	ble.n	80086f2 <_dtoa_r+0x84a>
 80086e6:	4631      	mov	r1, r6
 80086e8:	461a      	mov	r2, r3
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 fbe6 	bl	8008ebc <__lshift>
 80086f0:	4606      	mov	r6, r0
 80086f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d069      	beq.n	80087cc <_dtoa_r+0x924>
 80086f8:	4631      	mov	r1, r6
 80086fa:	4658      	mov	r0, fp
 80086fc:	f000 fc4a 	bl	8008f94 <__mcmp>
 8008700:	2800      	cmp	r0, #0
 8008702:	da63      	bge.n	80087cc <_dtoa_r+0x924>
 8008704:	2300      	movs	r3, #0
 8008706:	4659      	mov	r1, fp
 8008708:	220a      	movs	r2, #10
 800870a:	4620      	mov	r0, r4
 800870c:	f000 fa26 	bl	8008b5c <__multadd>
 8008710:	9b08      	ldr	r3, [sp, #32]
 8008712:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008716:	4683      	mov	fp, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 818f 	beq.w	8008a3c <_dtoa_r+0xb94>
 800871e:	4639      	mov	r1, r7
 8008720:	2300      	movs	r3, #0
 8008722:	220a      	movs	r2, #10
 8008724:	4620      	mov	r0, r4
 8008726:	f000 fa19 	bl	8008b5c <__multadd>
 800872a:	f1b9 0f00 	cmp.w	r9, #0
 800872e:	4607      	mov	r7, r0
 8008730:	f300 808e 	bgt.w	8008850 <_dtoa_r+0x9a8>
 8008734:	9b05      	ldr	r3, [sp, #20]
 8008736:	2b02      	cmp	r3, #2
 8008738:	dc50      	bgt.n	80087dc <_dtoa_r+0x934>
 800873a:	e089      	b.n	8008850 <_dtoa_r+0x9a8>
 800873c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800873e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008742:	e75d      	b.n	8008600 <_dtoa_r+0x758>
 8008744:	9b01      	ldr	r3, [sp, #4]
 8008746:	1e5e      	subs	r6, r3, #1
 8008748:	9b06      	ldr	r3, [sp, #24]
 800874a:	42b3      	cmp	r3, r6
 800874c:	bfbf      	itttt	lt
 800874e:	9b06      	ldrlt	r3, [sp, #24]
 8008750:	9606      	strlt	r6, [sp, #24]
 8008752:	1af2      	sublt	r2, r6, r3
 8008754:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008756:	bfb6      	itet	lt
 8008758:	189b      	addlt	r3, r3, r2
 800875a:	1b9e      	subge	r6, r3, r6
 800875c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	bfb8      	it	lt
 8008762:	2600      	movlt	r6, #0
 8008764:	2b00      	cmp	r3, #0
 8008766:	bfb5      	itete	lt
 8008768:	eba8 0503 	sublt.w	r5, r8, r3
 800876c:	9b01      	ldrge	r3, [sp, #4]
 800876e:	2300      	movlt	r3, #0
 8008770:	4645      	movge	r5, r8
 8008772:	e747      	b.n	8008604 <_dtoa_r+0x75c>
 8008774:	9e06      	ldr	r6, [sp, #24]
 8008776:	9f08      	ldr	r7, [sp, #32]
 8008778:	4645      	mov	r5, r8
 800877a:	e74c      	b.n	8008616 <_dtoa_r+0x76e>
 800877c:	9a06      	ldr	r2, [sp, #24]
 800877e:	e775      	b.n	800866c <_dtoa_r+0x7c4>
 8008780:	9b05      	ldr	r3, [sp, #20]
 8008782:	2b01      	cmp	r3, #1
 8008784:	dc18      	bgt.n	80087b8 <_dtoa_r+0x910>
 8008786:	9b02      	ldr	r3, [sp, #8]
 8008788:	b9b3      	cbnz	r3, 80087b8 <_dtoa_r+0x910>
 800878a:	9b03      	ldr	r3, [sp, #12]
 800878c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008790:	b9a3      	cbnz	r3, 80087bc <_dtoa_r+0x914>
 8008792:	9b03      	ldr	r3, [sp, #12]
 8008794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008798:	0d1b      	lsrs	r3, r3, #20
 800879a:	051b      	lsls	r3, r3, #20
 800879c:	b12b      	cbz	r3, 80087aa <_dtoa_r+0x902>
 800879e:	9b04      	ldr	r3, [sp, #16]
 80087a0:	3301      	adds	r3, #1
 80087a2:	9304      	str	r3, [sp, #16]
 80087a4:	f108 0801 	add.w	r8, r8, #1
 80087a8:	2301      	movs	r3, #1
 80087aa:	9306      	str	r3, [sp, #24]
 80087ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f47f af74 	bne.w	800869c <_dtoa_r+0x7f4>
 80087b4:	2001      	movs	r0, #1
 80087b6:	e779      	b.n	80086ac <_dtoa_r+0x804>
 80087b8:	2300      	movs	r3, #0
 80087ba:	e7f6      	b.n	80087aa <_dtoa_r+0x902>
 80087bc:	9b02      	ldr	r3, [sp, #8]
 80087be:	e7f4      	b.n	80087aa <_dtoa_r+0x902>
 80087c0:	d085      	beq.n	80086ce <_dtoa_r+0x826>
 80087c2:	4618      	mov	r0, r3
 80087c4:	301c      	adds	r0, #28
 80087c6:	e77d      	b.n	80086c4 <_dtoa_r+0x81c>
 80087c8:	40240000 	.word	0x40240000
 80087cc:	9b01      	ldr	r3, [sp, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	dc38      	bgt.n	8008844 <_dtoa_r+0x99c>
 80087d2:	9b05      	ldr	r3, [sp, #20]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	dd35      	ble.n	8008844 <_dtoa_r+0x99c>
 80087d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80087dc:	f1b9 0f00 	cmp.w	r9, #0
 80087e0:	d10d      	bne.n	80087fe <_dtoa_r+0x956>
 80087e2:	4631      	mov	r1, r6
 80087e4:	464b      	mov	r3, r9
 80087e6:	2205      	movs	r2, #5
 80087e8:	4620      	mov	r0, r4
 80087ea:	f000 f9b7 	bl	8008b5c <__multadd>
 80087ee:	4601      	mov	r1, r0
 80087f0:	4606      	mov	r6, r0
 80087f2:	4658      	mov	r0, fp
 80087f4:	f000 fbce 	bl	8008f94 <__mcmp>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	f73f adbd 	bgt.w	8008378 <_dtoa_r+0x4d0>
 80087fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008800:	9d00      	ldr	r5, [sp, #0]
 8008802:	ea6f 0a03 	mvn.w	sl, r3
 8008806:	f04f 0800 	mov.w	r8, #0
 800880a:	4631      	mov	r1, r6
 800880c:	4620      	mov	r0, r4
 800880e:	f000 f983 	bl	8008b18 <_Bfree>
 8008812:	2f00      	cmp	r7, #0
 8008814:	f43f aeb4 	beq.w	8008580 <_dtoa_r+0x6d8>
 8008818:	f1b8 0f00 	cmp.w	r8, #0
 800881c:	d005      	beq.n	800882a <_dtoa_r+0x982>
 800881e:	45b8      	cmp	r8, r7
 8008820:	d003      	beq.n	800882a <_dtoa_r+0x982>
 8008822:	4641      	mov	r1, r8
 8008824:	4620      	mov	r0, r4
 8008826:	f000 f977 	bl	8008b18 <_Bfree>
 800882a:	4639      	mov	r1, r7
 800882c:	4620      	mov	r0, r4
 800882e:	f000 f973 	bl	8008b18 <_Bfree>
 8008832:	e6a5      	b.n	8008580 <_dtoa_r+0x6d8>
 8008834:	2600      	movs	r6, #0
 8008836:	4637      	mov	r7, r6
 8008838:	e7e1      	b.n	80087fe <_dtoa_r+0x956>
 800883a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800883c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008840:	4637      	mov	r7, r6
 8008842:	e599      	b.n	8008378 <_dtoa_r+0x4d0>
 8008844:	9b08      	ldr	r3, [sp, #32]
 8008846:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 80fd 	beq.w	8008a4a <_dtoa_r+0xba2>
 8008850:	2d00      	cmp	r5, #0
 8008852:	dd05      	ble.n	8008860 <_dtoa_r+0x9b8>
 8008854:	4639      	mov	r1, r7
 8008856:	462a      	mov	r2, r5
 8008858:	4620      	mov	r0, r4
 800885a:	f000 fb2f 	bl	8008ebc <__lshift>
 800885e:	4607      	mov	r7, r0
 8008860:	9b06      	ldr	r3, [sp, #24]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d05c      	beq.n	8008920 <_dtoa_r+0xa78>
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	4620      	mov	r0, r4
 800886a:	f000 f915 	bl	8008a98 <_Balloc>
 800886e:	4605      	mov	r5, r0
 8008870:	b928      	cbnz	r0, 800887e <_dtoa_r+0x9d6>
 8008872:	4b80      	ldr	r3, [pc, #512]	; (8008a74 <_dtoa_r+0xbcc>)
 8008874:	4602      	mov	r2, r0
 8008876:	f240 21ea 	movw	r1, #746	; 0x2ea
 800887a:	f7ff bb2e 	b.w	8007eda <_dtoa_r+0x32>
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	3202      	adds	r2, #2
 8008882:	0092      	lsls	r2, r2, #2
 8008884:	f107 010c 	add.w	r1, r7, #12
 8008888:	300c      	adds	r0, #12
 800888a:	f7fe fdb5 	bl	80073f8 <memcpy>
 800888e:	2201      	movs	r2, #1
 8008890:	4629      	mov	r1, r5
 8008892:	4620      	mov	r0, r4
 8008894:	f000 fb12 	bl	8008ebc <__lshift>
 8008898:	9b00      	ldr	r3, [sp, #0]
 800889a:	3301      	adds	r3, #1
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	9b00      	ldr	r3, [sp, #0]
 80088a0:	444b      	add	r3, r9
 80088a2:	9307      	str	r3, [sp, #28]
 80088a4:	9b02      	ldr	r3, [sp, #8]
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	46b8      	mov	r8, r7
 80088ac:	9306      	str	r3, [sp, #24]
 80088ae:	4607      	mov	r7, r0
 80088b0:	9b01      	ldr	r3, [sp, #4]
 80088b2:	4631      	mov	r1, r6
 80088b4:	3b01      	subs	r3, #1
 80088b6:	4658      	mov	r0, fp
 80088b8:	9302      	str	r3, [sp, #8]
 80088ba:	f7ff fa69 	bl	8007d90 <quorem>
 80088be:	4603      	mov	r3, r0
 80088c0:	3330      	adds	r3, #48	; 0x30
 80088c2:	9004      	str	r0, [sp, #16]
 80088c4:	4641      	mov	r1, r8
 80088c6:	4658      	mov	r0, fp
 80088c8:	9308      	str	r3, [sp, #32]
 80088ca:	f000 fb63 	bl	8008f94 <__mcmp>
 80088ce:	463a      	mov	r2, r7
 80088d0:	4681      	mov	r9, r0
 80088d2:	4631      	mov	r1, r6
 80088d4:	4620      	mov	r0, r4
 80088d6:	f000 fb79 	bl	8008fcc <__mdiff>
 80088da:	68c2      	ldr	r2, [r0, #12]
 80088dc:	9b08      	ldr	r3, [sp, #32]
 80088de:	4605      	mov	r5, r0
 80088e0:	bb02      	cbnz	r2, 8008924 <_dtoa_r+0xa7c>
 80088e2:	4601      	mov	r1, r0
 80088e4:	4658      	mov	r0, fp
 80088e6:	f000 fb55 	bl	8008f94 <__mcmp>
 80088ea:	9b08      	ldr	r3, [sp, #32]
 80088ec:	4602      	mov	r2, r0
 80088ee:	4629      	mov	r1, r5
 80088f0:	4620      	mov	r0, r4
 80088f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80088f6:	f000 f90f 	bl	8008b18 <_Bfree>
 80088fa:	9b05      	ldr	r3, [sp, #20]
 80088fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088fe:	9d01      	ldr	r5, [sp, #4]
 8008900:	ea43 0102 	orr.w	r1, r3, r2
 8008904:	9b06      	ldr	r3, [sp, #24]
 8008906:	430b      	orrs	r3, r1
 8008908:	9b08      	ldr	r3, [sp, #32]
 800890a:	d10d      	bne.n	8008928 <_dtoa_r+0xa80>
 800890c:	2b39      	cmp	r3, #57	; 0x39
 800890e:	d029      	beq.n	8008964 <_dtoa_r+0xabc>
 8008910:	f1b9 0f00 	cmp.w	r9, #0
 8008914:	dd01      	ble.n	800891a <_dtoa_r+0xa72>
 8008916:	9b04      	ldr	r3, [sp, #16]
 8008918:	3331      	adds	r3, #49	; 0x31
 800891a:	9a02      	ldr	r2, [sp, #8]
 800891c:	7013      	strb	r3, [r2, #0]
 800891e:	e774      	b.n	800880a <_dtoa_r+0x962>
 8008920:	4638      	mov	r0, r7
 8008922:	e7b9      	b.n	8008898 <_dtoa_r+0x9f0>
 8008924:	2201      	movs	r2, #1
 8008926:	e7e2      	b.n	80088ee <_dtoa_r+0xa46>
 8008928:	f1b9 0f00 	cmp.w	r9, #0
 800892c:	db06      	blt.n	800893c <_dtoa_r+0xa94>
 800892e:	9905      	ldr	r1, [sp, #20]
 8008930:	ea41 0909 	orr.w	r9, r1, r9
 8008934:	9906      	ldr	r1, [sp, #24]
 8008936:	ea59 0101 	orrs.w	r1, r9, r1
 800893a:	d120      	bne.n	800897e <_dtoa_r+0xad6>
 800893c:	2a00      	cmp	r2, #0
 800893e:	ddec      	ble.n	800891a <_dtoa_r+0xa72>
 8008940:	4659      	mov	r1, fp
 8008942:	2201      	movs	r2, #1
 8008944:	4620      	mov	r0, r4
 8008946:	9301      	str	r3, [sp, #4]
 8008948:	f000 fab8 	bl	8008ebc <__lshift>
 800894c:	4631      	mov	r1, r6
 800894e:	4683      	mov	fp, r0
 8008950:	f000 fb20 	bl	8008f94 <__mcmp>
 8008954:	2800      	cmp	r0, #0
 8008956:	9b01      	ldr	r3, [sp, #4]
 8008958:	dc02      	bgt.n	8008960 <_dtoa_r+0xab8>
 800895a:	d1de      	bne.n	800891a <_dtoa_r+0xa72>
 800895c:	07da      	lsls	r2, r3, #31
 800895e:	d5dc      	bpl.n	800891a <_dtoa_r+0xa72>
 8008960:	2b39      	cmp	r3, #57	; 0x39
 8008962:	d1d8      	bne.n	8008916 <_dtoa_r+0xa6e>
 8008964:	9a02      	ldr	r2, [sp, #8]
 8008966:	2339      	movs	r3, #57	; 0x39
 8008968:	7013      	strb	r3, [r2, #0]
 800896a:	462b      	mov	r3, r5
 800896c:	461d      	mov	r5, r3
 800896e:	3b01      	subs	r3, #1
 8008970:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008974:	2a39      	cmp	r2, #57	; 0x39
 8008976:	d050      	beq.n	8008a1a <_dtoa_r+0xb72>
 8008978:	3201      	adds	r2, #1
 800897a:	701a      	strb	r2, [r3, #0]
 800897c:	e745      	b.n	800880a <_dtoa_r+0x962>
 800897e:	2a00      	cmp	r2, #0
 8008980:	dd03      	ble.n	800898a <_dtoa_r+0xae2>
 8008982:	2b39      	cmp	r3, #57	; 0x39
 8008984:	d0ee      	beq.n	8008964 <_dtoa_r+0xabc>
 8008986:	3301      	adds	r3, #1
 8008988:	e7c7      	b.n	800891a <_dtoa_r+0xa72>
 800898a:	9a01      	ldr	r2, [sp, #4]
 800898c:	9907      	ldr	r1, [sp, #28]
 800898e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008992:	428a      	cmp	r2, r1
 8008994:	d02a      	beq.n	80089ec <_dtoa_r+0xb44>
 8008996:	4659      	mov	r1, fp
 8008998:	2300      	movs	r3, #0
 800899a:	220a      	movs	r2, #10
 800899c:	4620      	mov	r0, r4
 800899e:	f000 f8dd 	bl	8008b5c <__multadd>
 80089a2:	45b8      	cmp	r8, r7
 80089a4:	4683      	mov	fp, r0
 80089a6:	f04f 0300 	mov.w	r3, #0
 80089aa:	f04f 020a 	mov.w	r2, #10
 80089ae:	4641      	mov	r1, r8
 80089b0:	4620      	mov	r0, r4
 80089b2:	d107      	bne.n	80089c4 <_dtoa_r+0xb1c>
 80089b4:	f000 f8d2 	bl	8008b5c <__multadd>
 80089b8:	4680      	mov	r8, r0
 80089ba:	4607      	mov	r7, r0
 80089bc:	9b01      	ldr	r3, [sp, #4]
 80089be:	3301      	adds	r3, #1
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	e775      	b.n	80088b0 <_dtoa_r+0xa08>
 80089c4:	f000 f8ca 	bl	8008b5c <__multadd>
 80089c8:	4639      	mov	r1, r7
 80089ca:	4680      	mov	r8, r0
 80089cc:	2300      	movs	r3, #0
 80089ce:	220a      	movs	r2, #10
 80089d0:	4620      	mov	r0, r4
 80089d2:	f000 f8c3 	bl	8008b5c <__multadd>
 80089d6:	4607      	mov	r7, r0
 80089d8:	e7f0      	b.n	80089bc <_dtoa_r+0xb14>
 80089da:	f1b9 0f00 	cmp.w	r9, #0
 80089de:	9a00      	ldr	r2, [sp, #0]
 80089e0:	bfcc      	ite	gt
 80089e2:	464d      	movgt	r5, r9
 80089e4:	2501      	movle	r5, #1
 80089e6:	4415      	add	r5, r2
 80089e8:	f04f 0800 	mov.w	r8, #0
 80089ec:	4659      	mov	r1, fp
 80089ee:	2201      	movs	r2, #1
 80089f0:	4620      	mov	r0, r4
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	f000 fa62 	bl	8008ebc <__lshift>
 80089f8:	4631      	mov	r1, r6
 80089fa:	4683      	mov	fp, r0
 80089fc:	f000 faca 	bl	8008f94 <__mcmp>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	dcb2      	bgt.n	800896a <_dtoa_r+0xac2>
 8008a04:	d102      	bne.n	8008a0c <_dtoa_r+0xb64>
 8008a06:	9b01      	ldr	r3, [sp, #4]
 8008a08:	07db      	lsls	r3, r3, #31
 8008a0a:	d4ae      	bmi.n	800896a <_dtoa_r+0xac2>
 8008a0c:	462b      	mov	r3, r5
 8008a0e:	461d      	mov	r5, r3
 8008a10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a14:	2a30      	cmp	r2, #48	; 0x30
 8008a16:	d0fa      	beq.n	8008a0e <_dtoa_r+0xb66>
 8008a18:	e6f7      	b.n	800880a <_dtoa_r+0x962>
 8008a1a:	9a00      	ldr	r2, [sp, #0]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d1a5      	bne.n	800896c <_dtoa_r+0xac4>
 8008a20:	f10a 0a01 	add.w	sl, sl, #1
 8008a24:	2331      	movs	r3, #49	; 0x31
 8008a26:	e779      	b.n	800891c <_dtoa_r+0xa74>
 8008a28:	4b13      	ldr	r3, [pc, #76]	; (8008a78 <_dtoa_r+0xbd0>)
 8008a2a:	f7ff baaf 	b.w	8007f8c <_dtoa_r+0xe4>
 8008a2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f47f aa86 	bne.w	8007f42 <_dtoa_r+0x9a>
 8008a36:	4b11      	ldr	r3, [pc, #68]	; (8008a7c <_dtoa_r+0xbd4>)
 8008a38:	f7ff baa8 	b.w	8007f8c <_dtoa_r+0xe4>
 8008a3c:	f1b9 0f00 	cmp.w	r9, #0
 8008a40:	dc03      	bgt.n	8008a4a <_dtoa_r+0xba2>
 8008a42:	9b05      	ldr	r3, [sp, #20]
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	f73f aec9 	bgt.w	80087dc <_dtoa_r+0x934>
 8008a4a:	9d00      	ldr	r5, [sp, #0]
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4658      	mov	r0, fp
 8008a50:	f7ff f99e 	bl	8007d90 <quorem>
 8008a54:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008a58:	f805 3b01 	strb.w	r3, [r5], #1
 8008a5c:	9a00      	ldr	r2, [sp, #0]
 8008a5e:	1aaa      	subs	r2, r5, r2
 8008a60:	4591      	cmp	r9, r2
 8008a62:	ddba      	ble.n	80089da <_dtoa_r+0xb32>
 8008a64:	4659      	mov	r1, fp
 8008a66:	2300      	movs	r3, #0
 8008a68:	220a      	movs	r2, #10
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 f876 	bl	8008b5c <__multadd>
 8008a70:	4683      	mov	fp, r0
 8008a72:	e7eb      	b.n	8008a4c <_dtoa_r+0xba4>
 8008a74:	0800a273 	.word	0x0800a273
 8008a78:	0800a1cc 	.word	0x0800a1cc
 8008a7c:	0800a1f0 	.word	0x0800a1f0

08008a80 <_localeconv_r>:
 8008a80:	4800      	ldr	r0, [pc, #0]	; (8008a84 <_localeconv_r+0x4>)
 8008a82:	4770      	bx	lr
 8008a84:	20000184 	.word	0x20000184

08008a88 <malloc>:
 8008a88:	4b02      	ldr	r3, [pc, #8]	; (8008a94 <malloc+0xc>)
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	6818      	ldr	r0, [r3, #0]
 8008a8e:	f000 bbe1 	b.w	8009254 <_malloc_r>
 8008a92:	bf00      	nop
 8008a94:	20000030 	.word	0x20000030

08008a98 <_Balloc>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	460d      	mov	r5, r1
 8008aa0:	b976      	cbnz	r6, 8008ac0 <_Balloc+0x28>
 8008aa2:	2010      	movs	r0, #16
 8008aa4:	f7ff fff0 	bl	8008a88 <malloc>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	6260      	str	r0, [r4, #36]	; 0x24
 8008aac:	b920      	cbnz	r0, 8008ab8 <_Balloc+0x20>
 8008aae:	4b18      	ldr	r3, [pc, #96]	; (8008b10 <_Balloc+0x78>)
 8008ab0:	4818      	ldr	r0, [pc, #96]	; (8008b14 <_Balloc+0x7c>)
 8008ab2:	2166      	movs	r1, #102	; 0x66
 8008ab4:	f000 fc5e 	bl	8009374 <__assert_func>
 8008ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008abc:	6006      	str	r6, [r0, #0]
 8008abe:	60c6      	str	r6, [r0, #12]
 8008ac0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ac2:	68f3      	ldr	r3, [r6, #12]
 8008ac4:	b183      	cbz	r3, 8008ae8 <_Balloc+0x50>
 8008ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ace:	b9b8      	cbnz	r0, 8008b00 <_Balloc+0x68>
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	fa01 f605 	lsl.w	r6, r1, r5
 8008ad6:	1d72      	adds	r2, r6, #5
 8008ad8:	0092      	lsls	r2, r2, #2
 8008ada:	4620      	mov	r0, r4
 8008adc:	f000 fb5a 	bl	8009194 <_calloc_r>
 8008ae0:	b160      	cbz	r0, 8008afc <_Balloc+0x64>
 8008ae2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ae6:	e00e      	b.n	8008b06 <_Balloc+0x6e>
 8008ae8:	2221      	movs	r2, #33	; 0x21
 8008aea:	2104      	movs	r1, #4
 8008aec:	4620      	mov	r0, r4
 8008aee:	f000 fb51 	bl	8009194 <_calloc_r>
 8008af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008af4:	60f0      	str	r0, [r6, #12]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1e4      	bne.n	8008ac6 <_Balloc+0x2e>
 8008afc:	2000      	movs	r0, #0
 8008afe:	bd70      	pop	{r4, r5, r6, pc}
 8008b00:	6802      	ldr	r2, [r0, #0]
 8008b02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b06:	2300      	movs	r3, #0
 8008b08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b0c:	e7f7      	b.n	8008afe <_Balloc+0x66>
 8008b0e:	bf00      	nop
 8008b10:	0800a1fd 	.word	0x0800a1fd
 8008b14:	0800a284 	.word	0x0800a284

08008b18 <_Bfree>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	460c      	mov	r4, r1
 8008b20:	b976      	cbnz	r6, 8008b40 <_Bfree+0x28>
 8008b22:	2010      	movs	r0, #16
 8008b24:	f7ff ffb0 	bl	8008a88 <malloc>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	6268      	str	r0, [r5, #36]	; 0x24
 8008b2c:	b920      	cbnz	r0, 8008b38 <_Bfree+0x20>
 8008b2e:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <_Bfree+0x3c>)
 8008b30:	4809      	ldr	r0, [pc, #36]	; (8008b58 <_Bfree+0x40>)
 8008b32:	218a      	movs	r1, #138	; 0x8a
 8008b34:	f000 fc1e 	bl	8009374 <__assert_func>
 8008b38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b3c:	6006      	str	r6, [r0, #0]
 8008b3e:	60c6      	str	r6, [r0, #12]
 8008b40:	b13c      	cbz	r4, 8008b52 <_Bfree+0x3a>
 8008b42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b44:	6862      	ldr	r2, [r4, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b4c:	6021      	str	r1, [r4, #0]
 8008b4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b52:	bd70      	pop	{r4, r5, r6, pc}
 8008b54:	0800a1fd 	.word	0x0800a1fd
 8008b58:	0800a284 	.word	0x0800a284

08008b5c <__multadd>:
 8008b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b60:	690e      	ldr	r6, [r1, #16]
 8008b62:	4607      	mov	r7, r0
 8008b64:	4698      	mov	r8, r3
 8008b66:	460c      	mov	r4, r1
 8008b68:	f101 0014 	add.w	r0, r1, #20
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	6805      	ldr	r5, [r0, #0]
 8008b70:	b2a9      	uxth	r1, r5
 8008b72:	fb02 8101 	mla	r1, r2, r1, r8
 8008b76:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008b7a:	0c2d      	lsrs	r5, r5, #16
 8008b7c:	fb02 c505 	mla	r5, r2, r5, ip
 8008b80:	b289      	uxth	r1, r1
 8008b82:	3301      	adds	r3, #1
 8008b84:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008b88:	429e      	cmp	r6, r3
 8008b8a:	f840 1b04 	str.w	r1, [r0], #4
 8008b8e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008b92:	dcec      	bgt.n	8008b6e <__multadd+0x12>
 8008b94:	f1b8 0f00 	cmp.w	r8, #0
 8008b98:	d022      	beq.n	8008be0 <__multadd+0x84>
 8008b9a:	68a3      	ldr	r3, [r4, #8]
 8008b9c:	42b3      	cmp	r3, r6
 8008b9e:	dc19      	bgt.n	8008bd4 <__multadd+0x78>
 8008ba0:	6861      	ldr	r1, [r4, #4]
 8008ba2:	4638      	mov	r0, r7
 8008ba4:	3101      	adds	r1, #1
 8008ba6:	f7ff ff77 	bl	8008a98 <_Balloc>
 8008baa:	4605      	mov	r5, r0
 8008bac:	b928      	cbnz	r0, 8008bba <__multadd+0x5e>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	4b0d      	ldr	r3, [pc, #52]	; (8008be8 <__multadd+0x8c>)
 8008bb2:	480e      	ldr	r0, [pc, #56]	; (8008bec <__multadd+0x90>)
 8008bb4:	21b5      	movs	r1, #181	; 0xb5
 8008bb6:	f000 fbdd 	bl	8009374 <__assert_func>
 8008bba:	6922      	ldr	r2, [r4, #16]
 8008bbc:	3202      	adds	r2, #2
 8008bbe:	f104 010c 	add.w	r1, r4, #12
 8008bc2:	0092      	lsls	r2, r2, #2
 8008bc4:	300c      	adds	r0, #12
 8008bc6:	f7fe fc17 	bl	80073f8 <memcpy>
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4638      	mov	r0, r7
 8008bce:	f7ff ffa3 	bl	8008b18 <_Bfree>
 8008bd2:	462c      	mov	r4, r5
 8008bd4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008bd8:	3601      	adds	r6, #1
 8008bda:	f8c3 8014 	str.w	r8, [r3, #20]
 8008bde:	6126      	str	r6, [r4, #16]
 8008be0:	4620      	mov	r0, r4
 8008be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be6:	bf00      	nop
 8008be8:	0800a273 	.word	0x0800a273
 8008bec:	0800a284 	.word	0x0800a284

08008bf0 <__hi0bits>:
 8008bf0:	0c03      	lsrs	r3, r0, #16
 8008bf2:	041b      	lsls	r3, r3, #16
 8008bf4:	b9d3      	cbnz	r3, 8008c2c <__hi0bits+0x3c>
 8008bf6:	0400      	lsls	r0, r0, #16
 8008bf8:	2310      	movs	r3, #16
 8008bfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008bfe:	bf04      	itt	eq
 8008c00:	0200      	lsleq	r0, r0, #8
 8008c02:	3308      	addeq	r3, #8
 8008c04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c08:	bf04      	itt	eq
 8008c0a:	0100      	lsleq	r0, r0, #4
 8008c0c:	3304      	addeq	r3, #4
 8008c0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c12:	bf04      	itt	eq
 8008c14:	0080      	lsleq	r0, r0, #2
 8008c16:	3302      	addeq	r3, #2
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	db05      	blt.n	8008c28 <__hi0bits+0x38>
 8008c1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c20:	f103 0301 	add.w	r3, r3, #1
 8008c24:	bf08      	it	eq
 8008c26:	2320      	moveq	r3, #32
 8008c28:	4618      	mov	r0, r3
 8008c2a:	4770      	bx	lr
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	e7e4      	b.n	8008bfa <__hi0bits+0xa>

08008c30 <__lo0bits>:
 8008c30:	6803      	ldr	r3, [r0, #0]
 8008c32:	f013 0207 	ands.w	r2, r3, #7
 8008c36:	4601      	mov	r1, r0
 8008c38:	d00b      	beq.n	8008c52 <__lo0bits+0x22>
 8008c3a:	07da      	lsls	r2, r3, #31
 8008c3c:	d424      	bmi.n	8008c88 <__lo0bits+0x58>
 8008c3e:	0798      	lsls	r0, r3, #30
 8008c40:	bf49      	itett	mi
 8008c42:	085b      	lsrmi	r3, r3, #1
 8008c44:	089b      	lsrpl	r3, r3, #2
 8008c46:	2001      	movmi	r0, #1
 8008c48:	600b      	strmi	r3, [r1, #0]
 8008c4a:	bf5c      	itt	pl
 8008c4c:	600b      	strpl	r3, [r1, #0]
 8008c4e:	2002      	movpl	r0, #2
 8008c50:	4770      	bx	lr
 8008c52:	b298      	uxth	r0, r3
 8008c54:	b9b0      	cbnz	r0, 8008c84 <__lo0bits+0x54>
 8008c56:	0c1b      	lsrs	r3, r3, #16
 8008c58:	2010      	movs	r0, #16
 8008c5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008c5e:	bf04      	itt	eq
 8008c60:	0a1b      	lsreq	r3, r3, #8
 8008c62:	3008      	addeq	r0, #8
 8008c64:	071a      	lsls	r2, r3, #28
 8008c66:	bf04      	itt	eq
 8008c68:	091b      	lsreq	r3, r3, #4
 8008c6a:	3004      	addeq	r0, #4
 8008c6c:	079a      	lsls	r2, r3, #30
 8008c6e:	bf04      	itt	eq
 8008c70:	089b      	lsreq	r3, r3, #2
 8008c72:	3002      	addeq	r0, #2
 8008c74:	07da      	lsls	r2, r3, #31
 8008c76:	d403      	bmi.n	8008c80 <__lo0bits+0x50>
 8008c78:	085b      	lsrs	r3, r3, #1
 8008c7a:	f100 0001 	add.w	r0, r0, #1
 8008c7e:	d005      	beq.n	8008c8c <__lo0bits+0x5c>
 8008c80:	600b      	str	r3, [r1, #0]
 8008c82:	4770      	bx	lr
 8008c84:	4610      	mov	r0, r2
 8008c86:	e7e8      	b.n	8008c5a <__lo0bits+0x2a>
 8008c88:	2000      	movs	r0, #0
 8008c8a:	4770      	bx	lr
 8008c8c:	2020      	movs	r0, #32
 8008c8e:	4770      	bx	lr

08008c90 <__i2b>:
 8008c90:	b510      	push	{r4, lr}
 8008c92:	460c      	mov	r4, r1
 8008c94:	2101      	movs	r1, #1
 8008c96:	f7ff feff 	bl	8008a98 <_Balloc>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	b928      	cbnz	r0, 8008caa <__i2b+0x1a>
 8008c9e:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <__i2b+0x24>)
 8008ca0:	4805      	ldr	r0, [pc, #20]	; (8008cb8 <__i2b+0x28>)
 8008ca2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ca6:	f000 fb65 	bl	8009374 <__assert_func>
 8008caa:	2301      	movs	r3, #1
 8008cac:	6144      	str	r4, [r0, #20]
 8008cae:	6103      	str	r3, [r0, #16]
 8008cb0:	bd10      	pop	{r4, pc}
 8008cb2:	bf00      	nop
 8008cb4:	0800a273 	.word	0x0800a273
 8008cb8:	0800a284 	.word	0x0800a284

08008cbc <__multiply>:
 8008cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	4614      	mov	r4, r2
 8008cc2:	690a      	ldr	r2, [r1, #16]
 8008cc4:	6923      	ldr	r3, [r4, #16]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	bfb8      	it	lt
 8008cca:	460b      	movlt	r3, r1
 8008ccc:	460d      	mov	r5, r1
 8008cce:	bfbc      	itt	lt
 8008cd0:	4625      	movlt	r5, r4
 8008cd2:	461c      	movlt	r4, r3
 8008cd4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008cd8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008cdc:	68ab      	ldr	r3, [r5, #8]
 8008cde:	6869      	ldr	r1, [r5, #4]
 8008ce0:	eb0a 0709 	add.w	r7, sl, r9
 8008ce4:	42bb      	cmp	r3, r7
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	bfb8      	it	lt
 8008cea:	3101      	addlt	r1, #1
 8008cec:	f7ff fed4 	bl	8008a98 <_Balloc>
 8008cf0:	b930      	cbnz	r0, 8008d00 <__multiply+0x44>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	4b42      	ldr	r3, [pc, #264]	; (8008e00 <__multiply+0x144>)
 8008cf6:	4843      	ldr	r0, [pc, #268]	; (8008e04 <__multiply+0x148>)
 8008cf8:	f240 115d 	movw	r1, #349	; 0x15d
 8008cfc:	f000 fb3a 	bl	8009374 <__assert_func>
 8008d00:	f100 0614 	add.w	r6, r0, #20
 8008d04:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008d08:	4633      	mov	r3, r6
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	4543      	cmp	r3, r8
 8008d0e:	d31e      	bcc.n	8008d4e <__multiply+0x92>
 8008d10:	f105 0c14 	add.w	ip, r5, #20
 8008d14:	f104 0314 	add.w	r3, r4, #20
 8008d18:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008d1c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008d20:	9202      	str	r2, [sp, #8]
 8008d22:	ebac 0205 	sub.w	r2, ip, r5
 8008d26:	3a15      	subs	r2, #21
 8008d28:	f022 0203 	bic.w	r2, r2, #3
 8008d2c:	3204      	adds	r2, #4
 8008d2e:	f105 0115 	add.w	r1, r5, #21
 8008d32:	458c      	cmp	ip, r1
 8008d34:	bf38      	it	cc
 8008d36:	2204      	movcc	r2, #4
 8008d38:	9201      	str	r2, [sp, #4]
 8008d3a:	9a02      	ldr	r2, [sp, #8]
 8008d3c:	9303      	str	r3, [sp, #12]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d808      	bhi.n	8008d54 <__multiply+0x98>
 8008d42:	2f00      	cmp	r7, #0
 8008d44:	dc55      	bgt.n	8008df2 <__multiply+0x136>
 8008d46:	6107      	str	r7, [r0, #16]
 8008d48:	b005      	add	sp, #20
 8008d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4e:	f843 2b04 	str.w	r2, [r3], #4
 8008d52:	e7db      	b.n	8008d0c <__multiply+0x50>
 8008d54:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d58:	f1ba 0f00 	cmp.w	sl, #0
 8008d5c:	d020      	beq.n	8008da0 <__multiply+0xe4>
 8008d5e:	f105 0e14 	add.w	lr, r5, #20
 8008d62:	46b1      	mov	r9, r6
 8008d64:	2200      	movs	r2, #0
 8008d66:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008d6a:	f8d9 b000 	ldr.w	fp, [r9]
 8008d6e:	b2a1      	uxth	r1, r4
 8008d70:	fa1f fb8b 	uxth.w	fp, fp
 8008d74:	fb0a b101 	mla	r1, sl, r1, fp
 8008d78:	4411      	add	r1, r2
 8008d7a:	f8d9 2000 	ldr.w	r2, [r9]
 8008d7e:	0c24      	lsrs	r4, r4, #16
 8008d80:	0c12      	lsrs	r2, r2, #16
 8008d82:	fb0a 2404 	mla	r4, sl, r4, r2
 8008d86:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008d8a:	b289      	uxth	r1, r1
 8008d8c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008d90:	45f4      	cmp	ip, lr
 8008d92:	f849 1b04 	str.w	r1, [r9], #4
 8008d96:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008d9a:	d8e4      	bhi.n	8008d66 <__multiply+0xaa>
 8008d9c:	9901      	ldr	r1, [sp, #4]
 8008d9e:	5072      	str	r2, [r6, r1]
 8008da0:	9a03      	ldr	r2, [sp, #12]
 8008da2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008da6:	3304      	adds	r3, #4
 8008da8:	f1b9 0f00 	cmp.w	r9, #0
 8008dac:	d01f      	beq.n	8008dee <__multiply+0x132>
 8008dae:	6834      	ldr	r4, [r6, #0]
 8008db0:	f105 0114 	add.w	r1, r5, #20
 8008db4:	46b6      	mov	lr, r6
 8008db6:	f04f 0a00 	mov.w	sl, #0
 8008dba:	880a      	ldrh	r2, [r1, #0]
 8008dbc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008dc0:	fb09 b202 	mla	r2, r9, r2, fp
 8008dc4:	4492      	add	sl, r2
 8008dc6:	b2a4      	uxth	r4, r4
 8008dc8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008dcc:	f84e 4b04 	str.w	r4, [lr], #4
 8008dd0:	f851 4b04 	ldr.w	r4, [r1], #4
 8008dd4:	f8be 2000 	ldrh.w	r2, [lr]
 8008dd8:	0c24      	lsrs	r4, r4, #16
 8008dda:	fb09 2404 	mla	r4, r9, r4, r2
 8008dde:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008de2:	458c      	cmp	ip, r1
 8008de4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008de8:	d8e7      	bhi.n	8008dba <__multiply+0xfe>
 8008dea:	9a01      	ldr	r2, [sp, #4]
 8008dec:	50b4      	str	r4, [r6, r2]
 8008dee:	3604      	adds	r6, #4
 8008df0:	e7a3      	b.n	8008d3a <__multiply+0x7e>
 8008df2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1a5      	bne.n	8008d46 <__multiply+0x8a>
 8008dfa:	3f01      	subs	r7, #1
 8008dfc:	e7a1      	b.n	8008d42 <__multiply+0x86>
 8008dfe:	bf00      	nop
 8008e00:	0800a273 	.word	0x0800a273
 8008e04:	0800a284 	.word	0x0800a284

08008e08 <__pow5mult>:
 8008e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e0c:	4615      	mov	r5, r2
 8008e0e:	f012 0203 	ands.w	r2, r2, #3
 8008e12:	4606      	mov	r6, r0
 8008e14:	460f      	mov	r7, r1
 8008e16:	d007      	beq.n	8008e28 <__pow5mult+0x20>
 8008e18:	4c25      	ldr	r4, [pc, #148]	; (8008eb0 <__pow5mult+0xa8>)
 8008e1a:	3a01      	subs	r2, #1
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e22:	f7ff fe9b 	bl	8008b5c <__multadd>
 8008e26:	4607      	mov	r7, r0
 8008e28:	10ad      	asrs	r5, r5, #2
 8008e2a:	d03d      	beq.n	8008ea8 <__pow5mult+0xa0>
 8008e2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e2e:	b97c      	cbnz	r4, 8008e50 <__pow5mult+0x48>
 8008e30:	2010      	movs	r0, #16
 8008e32:	f7ff fe29 	bl	8008a88 <malloc>
 8008e36:	4602      	mov	r2, r0
 8008e38:	6270      	str	r0, [r6, #36]	; 0x24
 8008e3a:	b928      	cbnz	r0, 8008e48 <__pow5mult+0x40>
 8008e3c:	4b1d      	ldr	r3, [pc, #116]	; (8008eb4 <__pow5mult+0xac>)
 8008e3e:	481e      	ldr	r0, [pc, #120]	; (8008eb8 <__pow5mult+0xb0>)
 8008e40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e44:	f000 fa96 	bl	8009374 <__assert_func>
 8008e48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e4c:	6004      	str	r4, [r0, #0]
 8008e4e:	60c4      	str	r4, [r0, #12]
 8008e50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e58:	b94c      	cbnz	r4, 8008e6e <__pow5mult+0x66>
 8008e5a:	f240 2171 	movw	r1, #625	; 0x271
 8008e5e:	4630      	mov	r0, r6
 8008e60:	f7ff ff16 	bl	8008c90 <__i2b>
 8008e64:	2300      	movs	r3, #0
 8008e66:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	6003      	str	r3, [r0, #0]
 8008e6e:	f04f 0900 	mov.w	r9, #0
 8008e72:	07eb      	lsls	r3, r5, #31
 8008e74:	d50a      	bpl.n	8008e8c <__pow5mult+0x84>
 8008e76:	4639      	mov	r1, r7
 8008e78:	4622      	mov	r2, r4
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	f7ff ff1e 	bl	8008cbc <__multiply>
 8008e80:	4639      	mov	r1, r7
 8008e82:	4680      	mov	r8, r0
 8008e84:	4630      	mov	r0, r6
 8008e86:	f7ff fe47 	bl	8008b18 <_Bfree>
 8008e8a:	4647      	mov	r7, r8
 8008e8c:	106d      	asrs	r5, r5, #1
 8008e8e:	d00b      	beq.n	8008ea8 <__pow5mult+0xa0>
 8008e90:	6820      	ldr	r0, [r4, #0]
 8008e92:	b938      	cbnz	r0, 8008ea4 <__pow5mult+0x9c>
 8008e94:	4622      	mov	r2, r4
 8008e96:	4621      	mov	r1, r4
 8008e98:	4630      	mov	r0, r6
 8008e9a:	f7ff ff0f 	bl	8008cbc <__multiply>
 8008e9e:	6020      	str	r0, [r4, #0]
 8008ea0:	f8c0 9000 	str.w	r9, [r0]
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	e7e4      	b.n	8008e72 <__pow5mult+0x6a>
 8008ea8:	4638      	mov	r0, r7
 8008eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eae:	bf00      	nop
 8008eb0:	0800a3d8 	.word	0x0800a3d8
 8008eb4:	0800a1fd 	.word	0x0800a1fd
 8008eb8:	0800a284 	.word	0x0800a284

08008ebc <__lshift>:
 8008ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	6849      	ldr	r1, [r1, #4]
 8008ec4:	6923      	ldr	r3, [r4, #16]
 8008ec6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008eca:	68a3      	ldr	r3, [r4, #8]
 8008ecc:	4607      	mov	r7, r0
 8008ece:	4691      	mov	r9, r2
 8008ed0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ed4:	f108 0601 	add.w	r6, r8, #1
 8008ed8:	42b3      	cmp	r3, r6
 8008eda:	db0b      	blt.n	8008ef4 <__lshift+0x38>
 8008edc:	4638      	mov	r0, r7
 8008ede:	f7ff fddb 	bl	8008a98 <_Balloc>
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	b948      	cbnz	r0, 8008efa <__lshift+0x3e>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	4b28      	ldr	r3, [pc, #160]	; (8008f8c <__lshift+0xd0>)
 8008eea:	4829      	ldr	r0, [pc, #164]	; (8008f90 <__lshift+0xd4>)
 8008eec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ef0:	f000 fa40 	bl	8009374 <__assert_func>
 8008ef4:	3101      	adds	r1, #1
 8008ef6:	005b      	lsls	r3, r3, #1
 8008ef8:	e7ee      	b.n	8008ed8 <__lshift+0x1c>
 8008efa:	2300      	movs	r3, #0
 8008efc:	f100 0114 	add.w	r1, r0, #20
 8008f00:	f100 0210 	add.w	r2, r0, #16
 8008f04:	4618      	mov	r0, r3
 8008f06:	4553      	cmp	r3, sl
 8008f08:	db33      	blt.n	8008f72 <__lshift+0xb6>
 8008f0a:	6920      	ldr	r0, [r4, #16]
 8008f0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f10:	f104 0314 	add.w	r3, r4, #20
 8008f14:	f019 091f 	ands.w	r9, r9, #31
 8008f18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f20:	d02b      	beq.n	8008f7a <__lshift+0xbe>
 8008f22:	f1c9 0e20 	rsb	lr, r9, #32
 8008f26:	468a      	mov	sl, r1
 8008f28:	2200      	movs	r2, #0
 8008f2a:	6818      	ldr	r0, [r3, #0]
 8008f2c:	fa00 f009 	lsl.w	r0, r0, r9
 8008f30:	4302      	orrs	r2, r0
 8008f32:	f84a 2b04 	str.w	r2, [sl], #4
 8008f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f3a:	459c      	cmp	ip, r3
 8008f3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f40:	d8f3      	bhi.n	8008f2a <__lshift+0x6e>
 8008f42:	ebac 0304 	sub.w	r3, ip, r4
 8008f46:	3b15      	subs	r3, #21
 8008f48:	f023 0303 	bic.w	r3, r3, #3
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	f104 0015 	add.w	r0, r4, #21
 8008f52:	4584      	cmp	ip, r0
 8008f54:	bf38      	it	cc
 8008f56:	2304      	movcc	r3, #4
 8008f58:	50ca      	str	r2, [r1, r3]
 8008f5a:	b10a      	cbz	r2, 8008f60 <__lshift+0xa4>
 8008f5c:	f108 0602 	add.w	r6, r8, #2
 8008f60:	3e01      	subs	r6, #1
 8008f62:	4638      	mov	r0, r7
 8008f64:	612e      	str	r6, [r5, #16]
 8008f66:	4621      	mov	r1, r4
 8008f68:	f7ff fdd6 	bl	8008b18 <_Bfree>
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f72:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f76:	3301      	adds	r3, #1
 8008f78:	e7c5      	b.n	8008f06 <__lshift+0x4a>
 8008f7a:	3904      	subs	r1, #4
 8008f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f80:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f84:	459c      	cmp	ip, r3
 8008f86:	d8f9      	bhi.n	8008f7c <__lshift+0xc0>
 8008f88:	e7ea      	b.n	8008f60 <__lshift+0xa4>
 8008f8a:	bf00      	nop
 8008f8c:	0800a273 	.word	0x0800a273
 8008f90:	0800a284 	.word	0x0800a284

08008f94 <__mcmp>:
 8008f94:	b530      	push	{r4, r5, lr}
 8008f96:	6902      	ldr	r2, [r0, #16]
 8008f98:	690c      	ldr	r4, [r1, #16]
 8008f9a:	1b12      	subs	r2, r2, r4
 8008f9c:	d10e      	bne.n	8008fbc <__mcmp+0x28>
 8008f9e:	f100 0314 	add.w	r3, r0, #20
 8008fa2:	3114      	adds	r1, #20
 8008fa4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008fa8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008fac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008fb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008fb4:	42a5      	cmp	r5, r4
 8008fb6:	d003      	beq.n	8008fc0 <__mcmp+0x2c>
 8008fb8:	d305      	bcc.n	8008fc6 <__mcmp+0x32>
 8008fba:	2201      	movs	r2, #1
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	bd30      	pop	{r4, r5, pc}
 8008fc0:	4283      	cmp	r3, r0
 8008fc2:	d3f3      	bcc.n	8008fac <__mcmp+0x18>
 8008fc4:	e7fa      	b.n	8008fbc <__mcmp+0x28>
 8008fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fca:	e7f7      	b.n	8008fbc <__mcmp+0x28>

08008fcc <__mdiff>:
 8008fcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	4617      	mov	r7, r2
 8008fda:	f7ff ffdb 	bl	8008f94 <__mcmp>
 8008fde:	1e05      	subs	r5, r0, #0
 8008fe0:	d110      	bne.n	8009004 <__mdiff+0x38>
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f7ff fd57 	bl	8008a98 <_Balloc>
 8008fea:	b930      	cbnz	r0, 8008ffa <__mdiff+0x2e>
 8008fec:	4b39      	ldr	r3, [pc, #228]	; (80090d4 <__mdiff+0x108>)
 8008fee:	4602      	mov	r2, r0
 8008ff0:	f240 2132 	movw	r1, #562	; 0x232
 8008ff4:	4838      	ldr	r0, [pc, #224]	; (80090d8 <__mdiff+0x10c>)
 8008ff6:	f000 f9bd 	bl	8009374 <__assert_func>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009000:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009004:	bfa4      	itt	ge
 8009006:	463b      	movge	r3, r7
 8009008:	4627      	movge	r7, r4
 800900a:	4630      	mov	r0, r6
 800900c:	6879      	ldr	r1, [r7, #4]
 800900e:	bfa6      	itte	ge
 8009010:	461c      	movge	r4, r3
 8009012:	2500      	movge	r5, #0
 8009014:	2501      	movlt	r5, #1
 8009016:	f7ff fd3f 	bl	8008a98 <_Balloc>
 800901a:	b920      	cbnz	r0, 8009026 <__mdiff+0x5a>
 800901c:	4b2d      	ldr	r3, [pc, #180]	; (80090d4 <__mdiff+0x108>)
 800901e:	4602      	mov	r2, r0
 8009020:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009024:	e7e6      	b.n	8008ff4 <__mdiff+0x28>
 8009026:	693e      	ldr	r6, [r7, #16]
 8009028:	60c5      	str	r5, [r0, #12]
 800902a:	6925      	ldr	r5, [r4, #16]
 800902c:	f107 0114 	add.w	r1, r7, #20
 8009030:	f104 0914 	add.w	r9, r4, #20
 8009034:	f100 0e14 	add.w	lr, r0, #20
 8009038:	f107 0210 	add.w	r2, r7, #16
 800903c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009040:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009044:	46f2      	mov	sl, lr
 8009046:	2700      	movs	r7, #0
 8009048:	f859 3b04 	ldr.w	r3, [r9], #4
 800904c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009050:	fa1f f883 	uxth.w	r8, r3
 8009054:	fa17 f78b 	uxtah	r7, r7, fp
 8009058:	0c1b      	lsrs	r3, r3, #16
 800905a:	eba7 0808 	sub.w	r8, r7, r8
 800905e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009062:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009066:	fa1f f888 	uxth.w	r8, r8
 800906a:	141f      	asrs	r7, r3, #16
 800906c:	454d      	cmp	r5, r9
 800906e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009072:	f84a 3b04 	str.w	r3, [sl], #4
 8009076:	d8e7      	bhi.n	8009048 <__mdiff+0x7c>
 8009078:	1b2b      	subs	r3, r5, r4
 800907a:	3b15      	subs	r3, #21
 800907c:	f023 0303 	bic.w	r3, r3, #3
 8009080:	3304      	adds	r3, #4
 8009082:	3415      	adds	r4, #21
 8009084:	42a5      	cmp	r5, r4
 8009086:	bf38      	it	cc
 8009088:	2304      	movcc	r3, #4
 800908a:	4419      	add	r1, r3
 800908c:	4473      	add	r3, lr
 800908e:	469e      	mov	lr, r3
 8009090:	460d      	mov	r5, r1
 8009092:	4565      	cmp	r5, ip
 8009094:	d30e      	bcc.n	80090b4 <__mdiff+0xe8>
 8009096:	f10c 0203 	add.w	r2, ip, #3
 800909a:	1a52      	subs	r2, r2, r1
 800909c:	f022 0203 	bic.w	r2, r2, #3
 80090a0:	3903      	subs	r1, #3
 80090a2:	458c      	cmp	ip, r1
 80090a4:	bf38      	it	cc
 80090a6:	2200      	movcc	r2, #0
 80090a8:	441a      	add	r2, r3
 80090aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80090ae:	b17b      	cbz	r3, 80090d0 <__mdiff+0x104>
 80090b0:	6106      	str	r6, [r0, #16]
 80090b2:	e7a5      	b.n	8009000 <__mdiff+0x34>
 80090b4:	f855 8b04 	ldr.w	r8, [r5], #4
 80090b8:	fa17 f488 	uxtah	r4, r7, r8
 80090bc:	1422      	asrs	r2, r4, #16
 80090be:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80090c2:	b2a4      	uxth	r4, r4
 80090c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80090c8:	f84e 4b04 	str.w	r4, [lr], #4
 80090cc:	1417      	asrs	r7, r2, #16
 80090ce:	e7e0      	b.n	8009092 <__mdiff+0xc6>
 80090d0:	3e01      	subs	r6, #1
 80090d2:	e7ea      	b.n	80090aa <__mdiff+0xde>
 80090d4:	0800a273 	.word	0x0800a273
 80090d8:	0800a284 	.word	0x0800a284

080090dc <__d2b>:
 80090dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090e0:	4689      	mov	r9, r1
 80090e2:	2101      	movs	r1, #1
 80090e4:	ec57 6b10 	vmov	r6, r7, d0
 80090e8:	4690      	mov	r8, r2
 80090ea:	f7ff fcd5 	bl	8008a98 <_Balloc>
 80090ee:	4604      	mov	r4, r0
 80090f0:	b930      	cbnz	r0, 8009100 <__d2b+0x24>
 80090f2:	4602      	mov	r2, r0
 80090f4:	4b25      	ldr	r3, [pc, #148]	; (800918c <__d2b+0xb0>)
 80090f6:	4826      	ldr	r0, [pc, #152]	; (8009190 <__d2b+0xb4>)
 80090f8:	f240 310a 	movw	r1, #778	; 0x30a
 80090fc:	f000 f93a 	bl	8009374 <__assert_func>
 8009100:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009104:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009108:	bb35      	cbnz	r5, 8009158 <__d2b+0x7c>
 800910a:	2e00      	cmp	r6, #0
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	d028      	beq.n	8009162 <__d2b+0x86>
 8009110:	4668      	mov	r0, sp
 8009112:	9600      	str	r6, [sp, #0]
 8009114:	f7ff fd8c 	bl	8008c30 <__lo0bits>
 8009118:	9900      	ldr	r1, [sp, #0]
 800911a:	b300      	cbz	r0, 800915e <__d2b+0x82>
 800911c:	9a01      	ldr	r2, [sp, #4]
 800911e:	f1c0 0320 	rsb	r3, r0, #32
 8009122:	fa02 f303 	lsl.w	r3, r2, r3
 8009126:	430b      	orrs	r3, r1
 8009128:	40c2      	lsrs	r2, r0
 800912a:	6163      	str	r3, [r4, #20]
 800912c:	9201      	str	r2, [sp, #4]
 800912e:	9b01      	ldr	r3, [sp, #4]
 8009130:	61a3      	str	r3, [r4, #24]
 8009132:	2b00      	cmp	r3, #0
 8009134:	bf14      	ite	ne
 8009136:	2202      	movne	r2, #2
 8009138:	2201      	moveq	r2, #1
 800913a:	6122      	str	r2, [r4, #16]
 800913c:	b1d5      	cbz	r5, 8009174 <__d2b+0x98>
 800913e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009142:	4405      	add	r5, r0
 8009144:	f8c9 5000 	str.w	r5, [r9]
 8009148:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800914c:	f8c8 0000 	str.w	r0, [r8]
 8009150:	4620      	mov	r0, r4
 8009152:	b003      	add	sp, #12
 8009154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800915c:	e7d5      	b.n	800910a <__d2b+0x2e>
 800915e:	6161      	str	r1, [r4, #20]
 8009160:	e7e5      	b.n	800912e <__d2b+0x52>
 8009162:	a801      	add	r0, sp, #4
 8009164:	f7ff fd64 	bl	8008c30 <__lo0bits>
 8009168:	9b01      	ldr	r3, [sp, #4]
 800916a:	6163      	str	r3, [r4, #20]
 800916c:	2201      	movs	r2, #1
 800916e:	6122      	str	r2, [r4, #16]
 8009170:	3020      	adds	r0, #32
 8009172:	e7e3      	b.n	800913c <__d2b+0x60>
 8009174:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009178:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800917c:	f8c9 0000 	str.w	r0, [r9]
 8009180:	6918      	ldr	r0, [r3, #16]
 8009182:	f7ff fd35 	bl	8008bf0 <__hi0bits>
 8009186:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800918a:	e7df      	b.n	800914c <__d2b+0x70>
 800918c:	0800a273 	.word	0x0800a273
 8009190:	0800a284 	.word	0x0800a284

08009194 <_calloc_r>:
 8009194:	b513      	push	{r0, r1, r4, lr}
 8009196:	434a      	muls	r2, r1
 8009198:	4611      	mov	r1, r2
 800919a:	9201      	str	r2, [sp, #4]
 800919c:	f000 f85a 	bl	8009254 <_malloc_r>
 80091a0:	4604      	mov	r4, r0
 80091a2:	b118      	cbz	r0, 80091ac <_calloc_r+0x18>
 80091a4:	9a01      	ldr	r2, [sp, #4]
 80091a6:	2100      	movs	r1, #0
 80091a8:	f7fe f934 	bl	8007414 <memset>
 80091ac:	4620      	mov	r0, r4
 80091ae:	b002      	add	sp, #8
 80091b0:	bd10      	pop	{r4, pc}
	...

080091b4 <_free_r>:
 80091b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091b6:	2900      	cmp	r1, #0
 80091b8:	d048      	beq.n	800924c <_free_r+0x98>
 80091ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091be:	9001      	str	r0, [sp, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f1a1 0404 	sub.w	r4, r1, #4
 80091c6:	bfb8      	it	lt
 80091c8:	18e4      	addlt	r4, r4, r3
 80091ca:	f000 f915 	bl	80093f8 <__malloc_lock>
 80091ce:	4a20      	ldr	r2, [pc, #128]	; (8009250 <_free_r+0x9c>)
 80091d0:	9801      	ldr	r0, [sp, #4]
 80091d2:	6813      	ldr	r3, [r2, #0]
 80091d4:	4615      	mov	r5, r2
 80091d6:	b933      	cbnz	r3, 80091e6 <_free_r+0x32>
 80091d8:	6063      	str	r3, [r4, #4]
 80091da:	6014      	str	r4, [r2, #0]
 80091dc:	b003      	add	sp, #12
 80091de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091e2:	f000 b90f 	b.w	8009404 <__malloc_unlock>
 80091e6:	42a3      	cmp	r3, r4
 80091e8:	d90b      	bls.n	8009202 <_free_r+0x4e>
 80091ea:	6821      	ldr	r1, [r4, #0]
 80091ec:	1862      	adds	r2, r4, r1
 80091ee:	4293      	cmp	r3, r2
 80091f0:	bf04      	itt	eq
 80091f2:	681a      	ldreq	r2, [r3, #0]
 80091f4:	685b      	ldreq	r3, [r3, #4]
 80091f6:	6063      	str	r3, [r4, #4]
 80091f8:	bf04      	itt	eq
 80091fa:	1852      	addeq	r2, r2, r1
 80091fc:	6022      	streq	r2, [r4, #0]
 80091fe:	602c      	str	r4, [r5, #0]
 8009200:	e7ec      	b.n	80091dc <_free_r+0x28>
 8009202:	461a      	mov	r2, r3
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	b10b      	cbz	r3, 800920c <_free_r+0x58>
 8009208:	42a3      	cmp	r3, r4
 800920a:	d9fa      	bls.n	8009202 <_free_r+0x4e>
 800920c:	6811      	ldr	r1, [r2, #0]
 800920e:	1855      	adds	r5, r2, r1
 8009210:	42a5      	cmp	r5, r4
 8009212:	d10b      	bne.n	800922c <_free_r+0x78>
 8009214:	6824      	ldr	r4, [r4, #0]
 8009216:	4421      	add	r1, r4
 8009218:	1854      	adds	r4, r2, r1
 800921a:	42a3      	cmp	r3, r4
 800921c:	6011      	str	r1, [r2, #0]
 800921e:	d1dd      	bne.n	80091dc <_free_r+0x28>
 8009220:	681c      	ldr	r4, [r3, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	6053      	str	r3, [r2, #4]
 8009226:	4421      	add	r1, r4
 8009228:	6011      	str	r1, [r2, #0]
 800922a:	e7d7      	b.n	80091dc <_free_r+0x28>
 800922c:	d902      	bls.n	8009234 <_free_r+0x80>
 800922e:	230c      	movs	r3, #12
 8009230:	6003      	str	r3, [r0, #0]
 8009232:	e7d3      	b.n	80091dc <_free_r+0x28>
 8009234:	6825      	ldr	r5, [r4, #0]
 8009236:	1961      	adds	r1, r4, r5
 8009238:	428b      	cmp	r3, r1
 800923a:	bf04      	itt	eq
 800923c:	6819      	ldreq	r1, [r3, #0]
 800923e:	685b      	ldreq	r3, [r3, #4]
 8009240:	6063      	str	r3, [r4, #4]
 8009242:	bf04      	itt	eq
 8009244:	1949      	addeq	r1, r1, r5
 8009246:	6021      	streq	r1, [r4, #0]
 8009248:	6054      	str	r4, [r2, #4]
 800924a:	e7c7      	b.n	80091dc <_free_r+0x28>
 800924c:	b003      	add	sp, #12
 800924e:	bd30      	pop	{r4, r5, pc}
 8009250:	2000144c 	.word	0x2000144c

08009254 <_malloc_r>:
 8009254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009256:	1ccd      	adds	r5, r1, #3
 8009258:	f025 0503 	bic.w	r5, r5, #3
 800925c:	3508      	adds	r5, #8
 800925e:	2d0c      	cmp	r5, #12
 8009260:	bf38      	it	cc
 8009262:	250c      	movcc	r5, #12
 8009264:	2d00      	cmp	r5, #0
 8009266:	4606      	mov	r6, r0
 8009268:	db01      	blt.n	800926e <_malloc_r+0x1a>
 800926a:	42a9      	cmp	r1, r5
 800926c:	d903      	bls.n	8009276 <_malloc_r+0x22>
 800926e:	230c      	movs	r3, #12
 8009270:	6033      	str	r3, [r6, #0]
 8009272:	2000      	movs	r0, #0
 8009274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009276:	f000 f8bf 	bl	80093f8 <__malloc_lock>
 800927a:	4921      	ldr	r1, [pc, #132]	; (8009300 <_malloc_r+0xac>)
 800927c:	680a      	ldr	r2, [r1, #0]
 800927e:	4614      	mov	r4, r2
 8009280:	b99c      	cbnz	r4, 80092aa <_malloc_r+0x56>
 8009282:	4f20      	ldr	r7, [pc, #128]	; (8009304 <_malloc_r+0xb0>)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	b923      	cbnz	r3, 8009292 <_malloc_r+0x3e>
 8009288:	4621      	mov	r1, r4
 800928a:	4630      	mov	r0, r6
 800928c:	f000 f862 	bl	8009354 <_sbrk_r>
 8009290:	6038      	str	r0, [r7, #0]
 8009292:	4629      	mov	r1, r5
 8009294:	4630      	mov	r0, r6
 8009296:	f000 f85d 	bl	8009354 <_sbrk_r>
 800929a:	1c43      	adds	r3, r0, #1
 800929c:	d123      	bne.n	80092e6 <_malloc_r+0x92>
 800929e:	230c      	movs	r3, #12
 80092a0:	6033      	str	r3, [r6, #0]
 80092a2:	4630      	mov	r0, r6
 80092a4:	f000 f8ae 	bl	8009404 <__malloc_unlock>
 80092a8:	e7e3      	b.n	8009272 <_malloc_r+0x1e>
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	1b5b      	subs	r3, r3, r5
 80092ae:	d417      	bmi.n	80092e0 <_malloc_r+0x8c>
 80092b0:	2b0b      	cmp	r3, #11
 80092b2:	d903      	bls.n	80092bc <_malloc_r+0x68>
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	441c      	add	r4, r3
 80092b8:	6025      	str	r5, [r4, #0]
 80092ba:	e004      	b.n	80092c6 <_malloc_r+0x72>
 80092bc:	6863      	ldr	r3, [r4, #4]
 80092be:	42a2      	cmp	r2, r4
 80092c0:	bf0c      	ite	eq
 80092c2:	600b      	streq	r3, [r1, #0]
 80092c4:	6053      	strne	r3, [r2, #4]
 80092c6:	4630      	mov	r0, r6
 80092c8:	f000 f89c 	bl	8009404 <__malloc_unlock>
 80092cc:	f104 000b 	add.w	r0, r4, #11
 80092d0:	1d23      	adds	r3, r4, #4
 80092d2:	f020 0007 	bic.w	r0, r0, #7
 80092d6:	1ac2      	subs	r2, r0, r3
 80092d8:	d0cc      	beq.n	8009274 <_malloc_r+0x20>
 80092da:	1a1b      	subs	r3, r3, r0
 80092dc:	50a3      	str	r3, [r4, r2]
 80092de:	e7c9      	b.n	8009274 <_malloc_r+0x20>
 80092e0:	4622      	mov	r2, r4
 80092e2:	6864      	ldr	r4, [r4, #4]
 80092e4:	e7cc      	b.n	8009280 <_malloc_r+0x2c>
 80092e6:	1cc4      	adds	r4, r0, #3
 80092e8:	f024 0403 	bic.w	r4, r4, #3
 80092ec:	42a0      	cmp	r0, r4
 80092ee:	d0e3      	beq.n	80092b8 <_malloc_r+0x64>
 80092f0:	1a21      	subs	r1, r4, r0
 80092f2:	4630      	mov	r0, r6
 80092f4:	f000 f82e 	bl	8009354 <_sbrk_r>
 80092f8:	3001      	adds	r0, #1
 80092fa:	d1dd      	bne.n	80092b8 <_malloc_r+0x64>
 80092fc:	e7cf      	b.n	800929e <_malloc_r+0x4a>
 80092fe:	bf00      	nop
 8009300:	2000144c 	.word	0x2000144c
 8009304:	20001450 	.word	0x20001450

08009308 <_realloc_r>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	4607      	mov	r7, r0
 800930c:	4614      	mov	r4, r2
 800930e:	460e      	mov	r6, r1
 8009310:	b921      	cbnz	r1, 800931c <_realloc_r+0x14>
 8009312:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009316:	4611      	mov	r1, r2
 8009318:	f7ff bf9c 	b.w	8009254 <_malloc_r>
 800931c:	b922      	cbnz	r2, 8009328 <_realloc_r+0x20>
 800931e:	f7ff ff49 	bl	80091b4 <_free_r>
 8009322:	4625      	mov	r5, r4
 8009324:	4628      	mov	r0, r5
 8009326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009328:	f000 f872 	bl	8009410 <_malloc_usable_size_r>
 800932c:	42a0      	cmp	r0, r4
 800932e:	d20f      	bcs.n	8009350 <_realloc_r+0x48>
 8009330:	4621      	mov	r1, r4
 8009332:	4638      	mov	r0, r7
 8009334:	f7ff ff8e 	bl	8009254 <_malloc_r>
 8009338:	4605      	mov	r5, r0
 800933a:	2800      	cmp	r0, #0
 800933c:	d0f2      	beq.n	8009324 <_realloc_r+0x1c>
 800933e:	4631      	mov	r1, r6
 8009340:	4622      	mov	r2, r4
 8009342:	f7fe f859 	bl	80073f8 <memcpy>
 8009346:	4631      	mov	r1, r6
 8009348:	4638      	mov	r0, r7
 800934a:	f7ff ff33 	bl	80091b4 <_free_r>
 800934e:	e7e9      	b.n	8009324 <_realloc_r+0x1c>
 8009350:	4635      	mov	r5, r6
 8009352:	e7e7      	b.n	8009324 <_realloc_r+0x1c>

08009354 <_sbrk_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	4d06      	ldr	r5, [pc, #24]	; (8009370 <_sbrk_r+0x1c>)
 8009358:	2300      	movs	r3, #0
 800935a:	4604      	mov	r4, r0
 800935c:	4608      	mov	r0, r1
 800935e:	602b      	str	r3, [r5, #0]
 8009360:	f7fa ffba 	bl	80042d8 <_sbrk>
 8009364:	1c43      	adds	r3, r0, #1
 8009366:	d102      	bne.n	800936e <_sbrk_r+0x1a>
 8009368:	682b      	ldr	r3, [r5, #0]
 800936a:	b103      	cbz	r3, 800936e <_sbrk_r+0x1a>
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	200015b0 	.word	0x200015b0

08009374 <__assert_func>:
 8009374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009376:	4614      	mov	r4, r2
 8009378:	461a      	mov	r2, r3
 800937a:	4b09      	ldr	r3, [pc, #36]	; (80093a0 <__assert_func+0x2c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4605      	mov	r5, r0
 8009380:	68d8      	ldr	r0, [r3, #12]
 8009382:	b14c      	cbz	r4, 8009398 <__assert_func+0x24>
 8009384:	4b07      	ldr	r3, [pc, #28]	; (80093a4 <__assert_func+0x30>)
 8009386:	9100      	str	r1, [sp, #0]
 8009388:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800938c:	4906      	ldr	r1, [pc, #24]	; (80093a8 <__assert_func+0x34>)
 800938e:	462b      	mov	r3, r5
 8009390:	f000 f80e 	bl	80093b0 <fiprintf>
 8009394:	f7fd ffff 	bl	8007396 <abort>
 8009398:	4b04      	ldr	r3, [pc, #16]	; (80093ac <__assert_func+0x38>)
 800939a:	461c      	mov	r4, r3
 800939c:	e7f3      	b.n	8009386 <__assert_func+0x12>
 800939e:	bf00      	nop
 80093a0:	20000030 	.word	0x20000030
 80093a4:	0800a3e4 	.word	0x0800a3e4
 80093a8:	0800a3f1 	.word	0x0800a3f1
 80093ac:	0800a41f 	.word	0x0800a41f

080093b0 <fiprintf>:
 80093b0:	b40e      	push	{r1, r2, r3}
 80093b2:	b503      	push	{r0, r1, lr}
 80093b4:	4601      	mov	r1, r0
 80093b6:	ab03      	add	r3, sp, #12
 80093b8:	4805      	ldr	r0, [pc, #20]	; (80093d0 <fiprintf+0x20>)
 80093ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80093be:	6800      	ldr	r0, [r0, #0]
 80093c0:	9301      	str	r3, [sp, #4]
 80093c2:	f000 f857 	bl	8009474 <_vfiprintf_r>
 80093c6:	b002      	add	sp, #8
 80093c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093cc:	b003      	add	sp, #12
 80093ce:	4770      	bx	lr
 80093d0:	20000030 	.word	0x20000030

080093d4 <__ascii_mbtowc>:
 80093d4:	b082      	sub	sp, #8
 80093d6:	b901      	cbnz	r1, 80093da <__ascii_mbtowc+0x6>
 80093d8:	a901      	add	r1, sp, #4
 80093da:	b142      	cbz	r2, 80093ee <__ascii_mbtowc+0x1a>
 80093dc:	b14b      	cbz	r3, 80093f2 <__ascii_mbtowc+0x1e>
 80093de:	7813      	ldrb	r3, [r2, #0]
 80093e0:	600b      	str	r3, [r1, #0]
 80093e2:	7812      	ldrb	r2, [r2, #0]
 80093e4:	1e10      	subs	r0, r2, #0
 80093e6:	bf18      	it	ne
 80093e8:	2001      	movne	r0, #1
 80093ea:	b002      	add	sp, #8
 80093ec:	4770      	bx	lr
 80093ee:	4610      	mov	r0, r2
 80093f0:	e7fb      	b.n	80093ea <__ascii_mbtowc+0x16>
 80093f2:	f06f 0001 	mvn.w	r0, #1
 80093f6:	e7f8      	b.n	80093ea <__ascii_mbtowc+0x16>

080093f8 <__malloc_lock>:
 80093f8:	4801      	ldr	r0, [pc, #4]	; (8009400 <__malloc_lock+0x8>)
 80093fa:	f000 bbf1 	b.w	8009be0 <__retarget_lock_acquire_recursive>
 80093fe:	bf00      	nop
 8009400:	200015b8 	.word	0x200015b8

08009404 <__malloc_unlock>:
 8009404:	4801      	ldr	r0, [pc, #4]	; (800940c <__malloc_unlock+0x8>)
 8009406:	f000 bbec 	b.w	8009be2 <__retarget_lock_release_recursive>
 800940a:	bf00      	nop
 800940c:	200015b8 	.word	0x200015b8

08009410 <_malloc_usable_size_r>:
 8009410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009414:	1f18      	subs	r0, r3, #4
 8009416:	2b00      	cmp	r3, #0
 8009418:	bfbc      	itt	lt
 800941a:	580b      	ldrlt	r3, [r1, r0]
 800941c:	18c0      	addlt	r0, r0, r3
 800941e:	4770      	bx	lr

08009420 <__sfputc_r>:
 8009420:	6893      	ldr	r3, [r2, #8]
 8009422:	3b01      	subs	r3, #1
 8009424:	2b00      	cmp	r3, #0
 8009426:	b410      	push	{r4}
 8009428:	6093      	str	r3, [r2, #8]
 800942a:	da08      	bge.n	800943e <__sfputc_r+0x1e>
 800942c:	6994      	ldr	r4, [r2, #24]
 800942e:	42a3      	cmp	r3, r4
 8009430:	db01      	blt.n	8009436 <__sfputc_r+0x16>
 8009432:	290a      	cmp	r1, #10
 8009434:	d103      	bne.n	800943e <__sfputc_r+0x1e>
 8009436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800943a:	f000 b94b 	b.w	80096d4 <__swbuf_r>
 800943e:	6813      	ldr	r3, [r2, #0]
 8009440:	1c58      	adds	r0, r3, #1
 8009442:	6010      	str	r0, [r2, #0]
 8009444:	7019      	strb	r1, [r3, #0]
 8009446:	4608      	mov	r0, r1
 8009448:	f85d 4b04 	ldr.w	r4, [sp], #4
 800944c:	4770      	bx	lr

0800944e <__sfputs_r>:
 800944e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009450:	4606      	mov	r6, r0
 8009452:	460f      	mov	r7, r1
 8009454:	4614      	mov	r4, r2
 8009456:	18d5      	adds	r5, r2, r3
 8009458:	42ac      	cmp	r4, r5
 800945a:	d101      	bne.n	8009460 <__sfputs_r+0x12>
 800945c:	2000      	movs	r0, #0
 800945e:	e007      	b.n	8009470 <__sfputs_r+0x22>
 8009460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009464:	463a      	mov	r2, r7
 8009466:	4630      	mov	r0, r6
 8009468:	f7ff ffda 	bl	8009420 <__sfputc_r>
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	d1f3      	bne.n	8009458 <__sfputs_r+0xa>
 8009470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009474 <_vfiprintf_r>:
 8009474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009478:	460d      	mov	r5, r1
 800947a:	b09d      	sub	sp, #116	; 0x74
 800947c:	4614      	mov	r4, r2
 800947e:	4698      	mov	r8, r3
 8009480:	4606      	mov	r6, r0
 8009482:	b118      	cbz	r0, 800948c <_vfiprintf_r+0x18>
 8009484:	6983      	ldr	r3, [r0, #24]
 8009486:	b90b      	cbnz	r3, 800948c <_vfiprintf_r+0x18>
 8009488:	f000 fb0c 	bl	8009aa4 <__sinit>
 800948c:	4b89      	ldr	r3, [pc, #548]	; (80096b4 <_vfiprintf_r+0x240>)
 800948e:	429d      	cmp	r5, r3
 8009490:	d11b      	bne.n	80094ca <_vfiprintf_r+0x56>
 8009492:	6875      	ldr	r5, [r6, #4]
 8009494:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009496:	07d9      	lsls	r1, r3, #31
 8009498:	d405      	bmi.n	80094a6 <_vfiprintf_r+0x32>
 800949a:	89ab      	ldrh	r3, [r5, #12]
 800949c:	059a      	lsls	r2, r3, #22
 800949e:	d402      	bmi.n	80094a6 <_vfiprintf_r+0x32>
 80094a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094a2:	f000 fb9d 	bl	8009be0 <__retarget_lock_acquire_recursive>
 80094a6:	89ab      	ldrh	r3, [r5, #12]
 80094a8:	071b      	lsls	r3, r3, #28
 80094aa:	d501      	bpl.n	80094b0 <_vfiprintf_r+0x3c>
 80094ac:	692b      	ldr	r3, [r5, #16]
 80094ae:	b9eb      	cbnz	r3, 80094ec <_vfiprintf_r+0x78>
 80094b0:	4629      	mov	r1, r5
 80094b2:	4630      	mov	r0, r6
 80094b4:	f000 f96e 	bl	8009794 <__swsetup_r>
 80094b8:	b1c0      	cbz	r0, 80094ec <_vfiprintf_r+0x78>
 80094ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094bc:	07dc      	lsls	r4, r3, #31
 80094be:	d50e      	bpl.n	80094de <_vfiprintf_r+0x6a>
 80094c0:	f04f 30ff 	mov.w	r0, #4294967295
 80094c4:	b01d      	add	sp, #116	; 0x74
 80094c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ca:	4b7b      	ldr	r3, [pc, #492]	; (80096b8 <_vfiprintf_r+0x244>)
 80094cc:	429d      	cmp	r5, r3
 80094ce:	d101      	bne.n	80094d4 <_vfiprintf_r+0x60>
 80094d0:	68b5      	ldr	r5, [r6, #8]
 80094d2:	e7df      	b.n	8009494 <_vfiprintf_r+0x20>
 80094d4:	4b79      	ldr	r3, [pc, #484]	; (80096bc <_vfiprintf_r+0x248>)
 80094d6:	429d      	cmp	r5, r3
 80094d8:	bf08      	it	eq
 80094da:	68f5      	ldreq	r5, [r6, #12]
 80094dc:	e7da      	b.n	8009494 <_vfiprintf_r+0x20>
 80094de:	89ab      	ldrh	r3, [r5, #12]
 80094e0:	0598      	lsls	r0, r3, #22
 80094e2:	d4ed      	bmi.n	80094c0 <_vfiprintf_r+0x4c>
 80094e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094e6:	f000 fb7c 	bl	8009be2 <__retarget_lock_release_recursive>
 80094ea:	e7e9      	b.n	80094c0 <_vfiprintf_r+0x4c>
 80094ec:	2300      	movs	r3, #0
 80094ee:	9309      	str	r3, [sp, #36]	; 0x24
 80094f0:	2320      	movs	r3, #32
 80094f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80094fa:	2330      	movs	r3, #48	; 0x30
 80094fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80096c0 <_vfiprintf_r+0x24c>
 8009500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009504:	f04f 0901 	mov.w	r9, #1
 8009508:	4623      	mov	r3, r4
 800950a:	469a      	mov	sl, r3
 800950c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009510:	b10a      	cbz	r2, 8009516 <_vfiprintf_r+0xa2>
 8009512:	2a25      	cmp	r2, #37	; 0x25
 8009514:	d1f9      	bne.n	800950a <_vfiprintf_r+0x96>
 8009516:	ebba 0b04 	subs.w	fp, sl, r4
 800951a:	d00b      	beq.n	8009534 <_vfiprintf_r+0xc0>
 800951c:	465b      	mov	r3, fp
 800951e:	4622      	mov	r2, r4
 8009520:	4629      	mov	r1, r5
 8009522:	4630      	mov	r0, r6
 8009524:	f7ff ff93 	bl	800944e <__sfputs_r>
 8009528:	3001      	adds	r0, #1
 800952a:	f000 80aa 	beq.w	8009682 <_vfiprintf_r+0x20e>
 800952e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009530:	445a      	add	r2, fp
 8009532:	9209      	str	r2, [sp, #36]	; 0x24
 8009534:	f89a 3000 	ldrb.w	r3, [sl]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 80a2 	beq.w	8009682 <_vfiprintf_r+0x20e>
 800953e:	2300      	movs	r3, #0
 8009540:	f04f 32ff 	mov.w	r2, #4294967295
 8009544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009548:	f10a 0a01 	add.w	sl, sl, #1
 800954c:	9304      	str	r3, [sp, #16]
 800954e:	9307      	str	r3, [sp, #28]
 8009550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009554:	931a      	str	r3, [sp, #104]	; 0x68
 8009556:	4654      	mov	r4, sl
 8009558:	2205      	movs	r2, #5
 800955a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800955e:	4858      	ldr	r0, [pc, #352]	; (80096c0 <_vfiprintf_r+0x24c>)
 8009560:	f7f6 fe5e 	bl	8000220 <memchr>
 8009564:	9a04      	ldr	r2, [sp, #16]
 8009566:	b9d8      	cbnz	r0, 80095a0 <_vfiprintf_r+0x12c>
 8009568:	06d1      	lsls	r1, r2, #27
 800956a:	bf44      	itt	mi
 800956c:	2320      	movmi	r3, #32
 800956e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009572:	0713      	lsls	r3, r2, #28
 8009574:	bf44      	itt	mi
 8009576:	232b      	movmi	r3, #43	; 0x2b
 8009578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800957c:	f89a 3000 	ldrb.w	r3, [sl]
 8009580:	2b2a      	cmp	r3, #42	; 0x2a
 8009582:	d015      	beq.n	80095b0 <_vfiprintf_r+0x13c>
 8009584:	9a07      	ldr	r2, [sp, #28]
 8009586:	4654      	mov	r4, sl
 8009588:	2000      	movs	r0, #0
 800958a:	f04f 0c0a 	mov.w	ip, #10
 800958e:	4621      	mov	r1, r4
 8009590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009594:	3b30      	subs	r3, #48	; 0x30
 8009596:	2b09      	cmp	r3, #9
 8009598:	d94e      	bls.n	8009638 <_vfiprintf_r+0x1c4>
 800959a:	b1b0      	cbz	r0, 80095ca <_vfiprintf_r+0x156>
 800959c:	9207      	str	r2, [sp, #28]
 800959e:	e014      	b.n	80095ca <_vfiprintf_r+0x156>
 80095a0:	eba0 0308 	sub.w	r3, r0, r8
 80095a4:	fa09 f303 	lsl.w	r3, r9, r3
 80095a8:	4313      	orrs	r3, r2
 80095aa:	9304      	str	r3, [sp, #16]
 80095ac:	46a2      	mov	sl, r4
 80095ae:	e7d2      	b.n	8009556 <_vfiprintf_r+0xe2>
 80095b0:	9b03      	ldr	r3, [sp, #12]
 80095b2:	1d19      	adds	r1, r3, #4
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	9103      	str	r1, [sp, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	bfbb      	ittet	lt
 80095bc:	425b      	neglt	r3, r3
 80095be:	f042 0202 	orrlt.w	r2, r2, #2
 80095c2:	9307      	strge	r3, [sp, #28]
 80095c4:	9307      	strlt	r3, [sp, #28]
 80095c6:	bfb8      	it	lt
 80095c8:	9204      	strlt	r2, [sp, #16]
 80095ca:	7823      	ldrb	r3, [r4, #0]
 80095cc:	2b2e      	cmp	r3, #46	; 0x2e
 80095ce:	d10c      	bne.n	80095ea <_vfiprintf_r+0x176>
 80095d0:	7863      	ldrb	r3, [r4, #1]
 80095d2:	2b2a      	cmp	r3, #42	; 0x2a
 80095d4:	d135      	bne.n	8009642 <_vfiprintf_r+0x1ce>
 80095d6:	9b03      	ldr	r3, [sp, #12]
 80095d8:	1d1a      	adds	r2, r3, #4
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	9203      	str	r2, [sp, #12]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	bfb8      	it	lt
 80095e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80095e6:	3402      	adds	r4, #2
 80095e8:	9305      	str	r3, [sp, #20]
 80095ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096d0 <_vfiprintf_r+0x25c>
 80095ee:	7821      	ldrb	r1, [r4, #0]
 80095f0:	2203      	movs	r2, #3
 80095f2:	4650      	mov	r0, sl
 80095f4:	f7f6 fe14 	bl	8000220 <memchr>
 80095f8:	b140      	cbz	r0, 800960c <_vfiprintf_r+0x198>
 80095fa:	2340      	movs	r3, #64	; 0x40
 80095fc:	eba0 000a 	sub.w	r0, r0, sl
 8009600:	fa03 f000 	lsl.w	r0, r3, r0
 8009604:	9b04      	ldr	r3, [sp, #16]
 8009606:	4303      	orrs	r3, r0
 8009608:	3401      	adds	r4, #1
 800960a:	9304      	str	r3, [sp, #16]
 800960c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009610:	482c      	ldr	r0, [pc, #176]	; (80096c4 <_vfiprintf_r+0x250>)
 8009612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009616:	2206      	movs	r2, #6
 8009618:	f7f6 fe02 	bl	8000220 <memchr>
 800961c:	2800      	cmp	r0, #0
 800961e:	d03f      	beq.n	80096a0 <_vfiprintf_r+0x22c>
 8009620:	4b29      	ldr	r3, [pc, #164]	; (80096c8 <_vfiprintf_r+0x254>)
 8009622:	bb1b      	cbnz	r3, 800966c <_vfiprintf_r+0x1f8>
 8009624:	9b03      	ldr	r3, [sp, #12]
 8009626:	3307      	adds	r3, #7
 8009628:	f023 0307 	bic.w	r3, r3, #7
 800962c:	3308      	adds	r3, #8
 800962e:	9303      	str	r3, [sp, #12]
 8009630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009632:	443b      	add	r3, r7
 8009634:	9309      	str	r3, [sp, #36]	; 0x24
 8009636:	e767      	b.n	8009508 <_vfiprintf_r+0x94>
 8009638:	fb0c 3202 	mla	r2, ip, r2, r3
 800963c:	460c      	mov	r4, r1
 800963e:	2001      	movs	r0, #1
 8009640:	e7a5      	b.n	800958e <_vfiprintf_r+0x11a>
 8009642:	2300      	movs	r3, #0
 8009644:	3401      	adds	r4, #1
 8009646:	9305      	str	r3, [sp, #20]
 8009648:	4619      	mov	r1, r3
 800964a:	f04f 0c0a 	mov.w	ip, #10
 800964e:	4620      	mov	r0, r4
 8009650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009654:	3a30      	subs	r2, #48	; 0x30
 8009656:	2a09      	cmp	r2, #9
 8009658:	d903      	bls.n	8009662 <_vfiprintf_r+0x1ee>
 800965a:	2b00      	cmp	r3, #0
 800965c:	d0c5      	beq.n	80095ea <_vfiprintf_r+0x176>
 800965e:	9105      	str	r1, [sp, #20]
 8009660:	e7c3      	b.n	80095ea <_vfiprintf_r+0x176>
 8009662:	fb0c 2101 	mla	r1, ip, r1, r2
 8009666:	4604      	mov	r4, r0
 8009668:	2301      	movs	r3, #1
 800966a:	e7f0      	b.n	800964e <_vfiprintf_r+0x1da>
 800966c:	ab03      	add	r3, sp, #12
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	462a      	mov	r2, r5
 8009672:	4b16      	ldr	r3, [pc, #88]	; (80096cc <_vfiprintf_r+0x258>)
 8009674:	a904      	add	r1, sp, #16
 8009676:	4630      	mov	r0, r6
 8009678:	f7fd ff74 	bl	8007564 <_printf_float>
 800967c:	4607      	mov	r7, r0
 800967e:	1c78      	adds	r0, r7, #1
 8009680:	d1d6      	bne.n	8009630 <_vfiprintf_r+0x1bc>
 8009682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009684:	07d9      	lsls	r1, r3, #31
 8009686:	d405      	bmi.n	8009694 <_vfiprintf_r+0x220>
 8009688:	89ab      	ldrh	r3, [r5, #12]
 800968a:	059a      	lsls	r2, r3, #22
 800968c:	d402      	bmi.n	8009694 <_vfiprintf_r+0x220>
 800968e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009690:	f000 faa7 	bl	8009be2 <__retarget_lock_release_recursive>
 8009694:	89ab      	ldrh	r3, [r5, #12]
 8009696:	065b      	lsls	r3, r3, #25
 8009698:	f53f af12 	bmi.w	80094c0 <_vfiprintf_r+0x4c>
 800969c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800969e:	e711      	b.n	80094c4 <_vfiprintf_r+0x50>
 80096a0:	ab03      	add	r3, sp, #12
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	462a      	mov	r2, r5
 80096a6:	4b09      	ldr	r3, [pc, #36]	; (80096cc <_vfiprintf_r+0x258>)
 80096a8:	a904      	add	r1, sp, #16
 80096aa:	4630      	mov	r0, r6
 80096ac:	f7fe f9fe 	bl	8007aac <_printf_i>
 80096b0:	e7e4      	b.n	800967c <_vfiprintf_r+0x208>
 80096b2:	bf00      	nop
 80096b4:	0800a55c 	.word	0x0800a55c
 80096b8:	0800a57c 	.word	0x0800a57c
 80096bc:	0800a53c 	.word	0x0800a53c
 80096c0:	0800a42a 	.word	0x0800a42a
 80096c4:	0800a434 	.word	0x0800a434
 80096c8:	08007565 	.word	0x08007565
 80096cc:	0800944f 	.word	0x0800944f
 80096d0:	0800a430 	.word	0x0800a430

080096d4 <__swbuf_r>:
 80096d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d6:	460e      	mov	r6, r1
 80096d8:	4614      	mov	r4, r2
 80096da:	4605      	mov	r5, r0
 80096dc:	b118      	cbz	r0, 80096e6 <__swbuf_r+0x12>
 80096de:	6983      	ldr	r3, [r0, #24]
 80096e0:	b90b      	cbnz	r3, 80096e6 <__swbuf_r+0x12>
 80096e2:	f000 f9df 	bl	8009aa4 <__sinit>
 80096e6:	4b21      	ldr	r3, [pc, #132]	; (800976c <__swbuf_r+0x98>)
 80096e8:	429c      	cmp	r4, r3
 80096ea:	d12b      	bne.n	8009744 <__swbuf_r+0x70>
 80096ec:	686c      	ldr	r4, [r5, #4]
 80096ee:	69a3      	ldr	r3, [r4, #24]
 80096f0:	60a3      	str	r3, [r4, #8]
 80096f2:	89a3      	ldrh	r3, [r4, #12]
 80096f4:	071a      	lsls	r2, r3, #28
 80096f6:	d52f      	bpl.n	8009758 <__swbuf_r+0x84>
 80096f8:	6923      	ldr	r3, [r4, #16]
 80096fa:	b36b      	cbz	r3, 8009758 <__swbuf_r+0x84>
 80096fc:	6923      	ldr	r3, [r4, #16]
 80096fe:	6820      	ldr	r0, [r4, #0]
 8009700:	1ac0      	subs	r0, r0, r3
 8009702:	6963      	ldr	r3, [r4, #20]
 8009704:	b2f6      	uxtb	r6, r6
 8009706:	4283      	cmp	r3, r0
 8009708:	4637      	mov	r7, r6
 800970a:	dc04      	bgt.n	8009716 <__swbuf_r+0x42>
 800970c:	4621      	mov	r1, r4
 800970e:	4628      	mov	r0, r5
 8009710:	f000 f934 	bl	800997c <_fflush_r>
 8009714:	bb30      	cbnz	r0, 8009764 <__swbuf_r+0x90>
 8009716:	68a3      	ldr	r3, [r4, #8]
 8009718:	3b01      	subs	r3, #1
 800971a:	60a3      	str	r3, [r4, #8]
 800971c:	6823      	ldr	r3, [r4, #0]
 800971e:	1c5a      	adds	r2, r3, #1
 8009720:	6022      	str	r2, [r4, #0]
 8009722:	701e      	strb	r6, [r3, #0]
 8009724:	6963      	ldr	r3, [r4, #20]
 8009726:	3001      	adds	r0, #1
 8009728:	4283      	cmp	r3, r0
 800972a:	d004      	beq.n	8009736 <__swbuf_r+0x62>
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	07db      	lsls	r3, r3, #31
 8009730:	d506      	bpl.n	8009740 <__swbuf_r+0x6c>
 8009732:	2e0a      	cmp	r6, #10
 8009734:	d104      	bne.n	8009740 <__swbuf_r+0x6c>
 8009736:	4621      	mov	r1, r4
 8009738:	4628      	mov	r0, r5
 800973a:	f000 f91f 	bl	800997c <_fflush_r>
 800973e:	b988      	cbnz	r0, 8009764 <__swbuf_r+0x90>
 8009740:	4638      	mov	r0, r7
 8009742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009744:	4b0a      	ldr	r3, [pc, #40]	; (8009770 <__swbuf_r+0x9c>)
 8009746:	429c      	cmp	r4, r3
 8009748:	d101      	bne.n	800974e <__swbuf_r+0x7a>
 800974a:	68ac      	ldr	r4, [r5, #8]
 800974c:	e7cf      	b.n	80096ee <__swbuf_r+0x1a>
 800974e:	4b09      	ldr	r3, [pc, #36]	; (8009774 <__swbuf_r+0xa0>)
 8009750:	429c      	cmp	r4, r3
 8009752:	bf08      	it	eq
 8009754:	68ec      	ldreq	r4, [r5, #12]
 8009756:	e7ca      	b.n	80096ee <__swbuf_r+0x1a>
 8009758:	4621      	mov	r1, r4
 800975a:	4628      	mov	r0, r5
 800975c:	f000 f81a 	bl	8009794 <__swsetup_r>
 8009760:	2800      	cmp	r0, #0
 8009762:	d0cb      	beq.n	80096fc <__swbuf_r+0x28>
 8009764:	f04f 37ff 	mov.w	r7, #4294967295
 8009768:	e7ea      	b.n	8009740 <__swbuf_r+0x6c>
 800976a:	bf00      	nop
 800976c:	0800a55c 	.word	0x0800a55c
 8009770:	0800a57c 	.word	0x0800a57c
 8009774:	0800a53c 	.word	0x0800a53c

08009778 <__ascii_wctomb>:
 8009778:	b149      	cbz	r1, 800978e <__ascii_wctomb+0x16>
 800977a:	2aff      	cmp	r2, #255	; 0xff
 800977c:	bf85      	ittet	hi
 800977e:	238a      	movhi	r3, #138	; 0x8a
 8009780:	6003      	strhi	r3, [r0, #0]
 8009782:	700a      	strbls	r2, [r1, #0]
 8009784:	f04f 30ff 	movhi.w	r0, #4294967295
 8009788:	bf98      	it	ls
 800978a:	2001      	movls	r0, #1
 800978c:	4770      	bx	lr
 800978e:	4608      	mov	r0, r1
 8009790:	4770      	bx	lr
	...

08009794 <__swsetup_r>:
 8009794:	4b32      	ldr	r3, [pc, #200]	; (8009860 <__swsetup_r+0xcc>)
 8009796:	b570      	push	{r4, r5, r6, lr}
 8009798:	681d      	ldr	r5, [r3, #0]
 800979a:	4606      	mov	r6, r0
 800979c:	460c      	mov	r4, r1
 800979e:	b125      	cbz	r5, 80097aa <__swsetup_r+0x16>
 80097a0:	69ab      	ldr	r3, [r5, #24]
 80097a2:	b913      	cbnz	r3, 80097aa <__swsetup_r+0x16>
 80097a4:	4628      	mov	r0, r5
 80097a6:	f000 f97d 	bl	8009aa4 <__sinit>
 80097aa:	4b2e      	ldr	r3, [pc, #184]	; (8009864 <__swsetup_r+0xd0>)
 80097ac:	429c      	cmp	r4, r3
 80097ae:	d10f      	bne.n	80097d0 <__swsetup_r+0x3c>
 80097b0:	686c      	ldr	r4, [r5, #4]
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097b8:	0719      	lsls	r1, r3, #28
 80097ba:	d42c      	bmi.n	8009816 <__swsetup_r+0x82>
 80097bc:	06dd      	lsls	r5, r3, #27
 80097be:	d411      	bmi.n	80097e4 <__swsetup_r+0x50>
 80097c0:	2309      	movs	r3, #9
 80097c2:	6033      	str	r3, [r6, #0]
 80097c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097c8:	81a3      	strh	r3, [r4, #12]
 80097ca:	f04f 30ff 	mov.w	r0, #4294967295
 80097ce:	e03e      	b.n	800984e <__swsetup_r+0xba>
 80097d0:	4b25      	ldr	r3, [pc, #148]	; (8009868 <__swsetup_r+0xd4>)
 80097d2:	429c      	cmp	r4, r3
 80097d4:	d101      	bne.n	80097da <__swsetup_r+0x46>
 80097d6:	68ac      	ldr	r4, [r5, #8]
 80097d8:	e7eb      	b.n	80097b2 <__swsetup_r+0x1e>
 80097da:	4b24      	ldr	r3, [pc, #144]	; (800986c <__swsetup_r+0xd8>)
 80097dc:	429c      	cmp	r4, r3
 80097de:	bf08      	it	eq
 80097e0:	68ec      	ldreq	r4, [r5, #12]
 80097e2:	e7e6      	b.n	80097b2 <__swsetup_r+0x1e>
 80097e4:	0758      	lsls	r0, r3, #29
 80097e6:	d512      	bpl.n	800980e <__swsetup_r+0x7a>
 80097e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097ea:	b141      	cbz	r1, 80097fe <__swsetup_r+0x6a>
 80097ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097f0:	4299      	cmp	r1, r3
 80097f2:	d002      	beq.n	80097fa <__swsetup_r+0x66>
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7ff fcdd 	bl	80091b4 <_free_r>
 80097fa:	2300      	movs	r3, #0
 80097fc:	6363      	str	r3, [r4, #52]	; 0x34
 80097fe:	89a3      	ldrh	r3, [r4, #12]
 8009800:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009804:	81a3      	strh	r3, [r4, #12]
 8009806:	2300      	movs	r3, #0
 8009808:	6063      	str	r3, [r4, #4]
 800980a:	6923      	ldr	r3, [r4, #16]
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	89a3      	ldrh	r3, [r4, #12]
 8009810:	f043 0308 	orr.w	r3, r3, #8
 8009814:	81a3      	strh	r3, [r4, #12]
 8009816:	6923      	ldr	r3, [r4, #16]
 8009818:	b94b      	cbnz	r3, 800982e <__swsetup_r+0x9a>
 800981a:	89a3      	ldrh	r3, [r4, #12]
 800981c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009824:	d003      	beq.n	800982e <__swsetup_r+0x9a>
 8009826:	4621      	mov	r1, r4
 8009828:	4630      	mov	r0, r6
 800982a:	f000 f9ff 	bl	8009c2c <__smakebuf_r>
 800982e:	89a0      	ldrh	r0, [r4, #12]
 8009830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009834:	f010 0301 	ands.w	r3, r0, #1
 8009838:	d00a      	beq.n	8009850 <__swsetup_r+0xbc>
 800983a:	2300      	movs	r3, #0
 800983c:	60a3      	str	r3, [r4, #8]
 800983e:	6963      	ldr	r3, [r4, #20]
 8009840:	425b      	negs	r3, r3
 8009842:	61a3      	str	r3, [r4, #24]
 8009844:	6923      	ldr	r3, [r4, #16]
 8009846:	b943      	cbnz	r3, 800985a <__swsetup_r+0xc6>
 8009848:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800984c:	d1ba      	bne.n	80097c4 <__swsetup_r+0x30>
 800984e:	bd70      	pop	{r4, r5, r6, pc}
 8009850:	0781      	lsls	r1, r0, #30
 8009852:	bf58      	it	pl
 8009854:	6963      	ldrpl	r3, [r4, #20]
 8009856:	60a3      	str	r3, [r4, #8]
 8009858:	e7f4      	b.n	8009844 <__swsetup_r+0xb0>
 800985a:	2000      	movs	r0, #0
 800985c:	e7f7      	b.n	800984e <__swsetup_r+0xba>
 800985e:	bf00      	nop
 8009860:	20000030 	.word	0x20000030
 8009864:	0800a55c 	.word	0x0800a55c
 8009868:	0800a57c 	.word	0x0800a57c
 800986c:	0800a53c 	.word	0x0800a53c

08009870 <__sflush_r>:
 8009870:	898a      	ldrh	r2, [r1, #12]
 8009872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009876:	4605      	mov	r5, r0
 8009878:	0710      	lsls	r0, r2, #28
 800987a:	460c      	mov	r4, r1
 800987c:	d458      	bmi.n	8009930 <__sflush_r+0xc0>
 800987e:	684b      	ldr	r3, [r1, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	dc05      	bgt.n	8009890 <__sflush_r+0x20>
 8009884:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009886:	2b00      	cmp	r3, #0
 8009888:	dc02      	bgt.n	8009890 <__sflush_r+0x20>
 800988a:	2000      	movs	r0, #0
 800988c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009892:	2e00      	cmp	r6, #0
 8009894:	d0f9      	beq.n	800988a <__sflush_r+0x1a>
 8009896:	2300      	movs	r3, #0
 8009898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800989c:	682f      	ldr	r7, [r5, #0]
 800989e:	602b      	str	r3, [r5, #0]
 80098a0:	d032      	beq.n	8009908 <__sflush_r+0x98>
 80098a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098a4:	89a3      	ldrh	r3, [r4, #12]
 80098a6:	075a      	lsls	r2, r3, #29
 80098a8:	d505      	bpl.n	80098b6 <__sflush_r+0x46>
 80098aa:	6863      	ldr	r3, [r4, #4]
 80098ac:	1ac0      	subs	r0, r0, r3
 80098ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098b0:	b10b      	cbz	r3, 80098b6 <__sflush_r+0x46>
 80098b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098b4:	1ac0      	subs	r0, r0, r3
 80098b6:	2300      	movs	r3, #0
 80098b8:	4602      	mov	r2, r0
 80098ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098bc:	6a21      	ldr	r1, [r4, #32]
 80098be:	4628      	mov	r0, r5
 80098c0:	47b0      	blx	r6
 80098c2:	1c43      	adds	r3, r0, #1
 80098c4:	89a3      	ldrh	r3, [r4, #12]
 80098c6:	d106      	bne.n	80098d6 <__sflush_r+0x66>
 80098c8:	6829      	ldr	r1, [r5, #0]
 80098ca:	291d      	cmp	r1, #29
 80098cc:	d82c      	bhi.n	8009928 <__sflush_r+0xb8>
 80098ce:	4a2a      	ldr	r2, [pc, #168]	; (8009978 <__sflush_r+0x108>)
 80098d0:	40ca      	lsrs	r2, r1
 80098d2:	07d6      	lsls	r6, r2, #31
 80098d4:	d528      	bpl.n	8009928 <__sflush_r+0xb8>
 80098d6:	2200      	movs	r2, #0
 80098d8:	6062      	str	r2, [r4, #4]
 80098da:	04d9      	lsls	r1, r3, #19
 80098dc:	6922      	ldr	r2, [r4, #16]
 80098de:	6022      	str	r2, [r4, #0]
 80098e0:	d504      	bpl.n	80098ec <__sflush_r+0x7c>
 80098e2:	1c42      	adds	r2, r0, #1
 80098e4:	d101      	bne.n	80098ea <__sflush_r+0x7a>
 80098e6:	682b      	ldr	r3, [r5, #0]
 80098e8:	b903      	cbnz	r3, 80098ec <__sflush_r+0x7c>
 80098ea:	6560      	str	r0, [r4, #84]	; 0x54
 80098ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ee:	602f      	str	r7, [r5, #0]
 80098f0:	2900      	cmp	r1, #0
 80098f2:	d0ca      	beq.n	800988a <__sflush_r+0x1a>
 80098f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098f8:	4299      	cmp	r1, r3
 80098fa:	d002      	beq.n	8009902 <__sflush_r+0x92>
 80098fc:	4628      	mov	r0, r5
 80098fe:	f7ff fc59 	bl	80091b4 <_free_r>
 8009902:	2000      	movs	r0, #0
 8009904:	6360      	str	r0, [r4, #52]	; 0x34
 8009906:	e7c1      	b.n	800988c <__sflush_r+0x1c>
 8009908:	6a21      	ldr	r1, [r4, #32]
 800990a:	2301      	movs	r3, #1
 800990c:	4628      	mov	r0, r5
 800990e:	47b0      	blx	r6
 8009910:	1c41      	adds	r1, r0, #1
 8009912:	d1c7      	bne.n	80098a4 <__sflush_r+0x34>
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0c4      	beq.n	80098a4 <__sflush_r+0x34>
 800991a:	2b1d      	cmp	r3, #29
 800991c:	d001      	beq.n	8009922 <__sflush_r+0xb2>
 800991e:	2b16      	cmp	r3, #22
 8009920:	d101      	bne.n	8009926 <__sflush_r+0xb6>
 8009922:	602f      	str	r7, [r5, #0]
 8009924:	e7b1      	b.n	800988a <__sflush_r+0x1a>
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	e7ad      	b.n	800988c <__sflush_r+0x1c>
 8009930:	690f      	ldr	r7, [r1, #16]
 8009932:	2f00      	cmp	r7, #0
 8009934:	d0a9      	beq.n	800988a <__sflush_r+0x1a>
 8009936:	0793      	lsls	r3, r2, #30
 8009938:	680e      	ldr	r6, [r1, #0]
 800993a:	bf08      	it	eq
 800993c:	694b      	ldreq	r3, [r1, #20]
 800993e:	600f      	str	r7, [r1, #0]
 8009940:	bf18      	it	ne
 8009942:	2300      	movne	r3, #0
 8009944:	eba6 0807 	sub.w	r8, r6, r7
 8009948:	608b      	str	r3, [r1, #8]
 800994a:	f1b8 0f00 	cmp.w	r8, #0
 800994e:	dd9c      	ble.n	800988a <__sflush_r+0x1a>
 8009950:	6a21      	ldr	r1, [r4, #32]
 8009952:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009954:	4643      	mov	r3, r8
 8009956:	463a      	mov	r2, r7
 8009958:	4628      	mov	r0, r5
 800995a:	47b0      	blx	r6
 800995c:	2800      	cmp	r0, #0
 800995e:	dc06      	bgt.n	800996e <__sflush_r+0xfe>
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009966:	81a3      	strh	r3, [r4, #12]
 8009968:	f04f 30ff 	mov.w	r0, #4294967295
 800996c:	e78e      	b.n	800988c <__sflush_r+0x1c>
 800996e:	4407      	add	r7, r0
 8009970:	eba8 0800 	sub.w	r8, r8, r0
 8009974:	e7e9      	b.n	800994a <__sflush_r+0xda>
 8009976:	bf00      	nop
 8009978:	20400001 	.word	0x20400001

0800997c <_fflush_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	690b      	ldr	r3, [r1, #16]
 8009980:	4605      	mov	r5, r0
 8009982:	460c      	mov	r4, r1
 8009984:	b913      	cbnz	r3, 800998c <_fflush_r+0x10>
 8009986:	2500      	movs	r5, #0
 8009988:	4628      	mov	r0, r5
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	b118      	cbz	r0, 8009996 <_fflush_r+0x1a>
 800998e:	6983      	ldr	r3, [r0, #24]
 8009990:	b90b      	cbnz	r3, 8009996 <_fflush_r+0x1a>
 8009992:	f000 f887 	bl	8009aa4 <__sinit>
 8009996:	4b14      	ldr	r3, [pc, #80]	; (80099e8 <_fflush_r+0x6c>)
 8009998:	429c      	cmp	r4, r3
 800999a:	d11b      	bne.n	80099d4 <_fflush_r+0x58>
 800999c:	686c      	ldr	r4, [r5, #4]
 800999e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d0ef      	beq.n	8009986 <_fflush_r+0xa>
 80099a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099a8:	07d0      	lsls	r0, r2, #31
 80099aa:	d404      	bmi.n	80099b6 <_fflush_r+0x3a>
 80099ac:	0599      	lsls	r1, r3, #22
 80099ae:	d402      	bmi.n	80099b6 <_fflush_r+0x3a>
 80099b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099b2:	f000 f915 	bl	8009be0 <__retarget_lock_acquire_recursive>
 80099b6:	4628      	mov	r0, r5
 80099b8:	4621      	mov	r1, r4
 80099ba:	f7ff ff59 	bl	8009870 <__sflush_r>
 80099be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099c0:	07da      	lsls	r2, r3, #31
 80099c2:	4605      	mov	r5, r0
 80099c4:	d4e0      	bmi.n	8009988 <_fflush_r+0xc>
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	059b      	lsls	r3, r3, #22
 80099ca:	d4dd      	bmi.n	8009988 <_fflush_r+0xc>
 80099cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099ce:	f000 f908 	bl	8009be2 <__retarget_lock_release_recursive>
 80099d2:	e7d9      	b.n	8009988 <_fflush_r+0xc>
 80099d4:	4b05      	ldr	r3, [pc, #20]	; (80099ec <_fflush_r+0x70>)
 80099d6:	429c      	cmp	r4, r3
 80099d8:	d101      	bne.n	80099de <_fflush_r+0x62>
 80099da:	68ac      	ldr	r4, [r5, #8]
 80099dc:	e7df      	b.n	800999e <_fflush_r+0x22>
 80099de:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <_fflush_r+0x74>)
 80099e0:	429c      	cmp	r4, r3
 80099e2:	bf08      	it	eq
 80099e4:	68ec      	ldreq	r4, [r5, #12]
 80099e6:	e7da      	b.n	800999e <_fflush_r+0x22>
 80099e8:	0800a55c 	.word	0x0800a55c
 80099ec:	0800a57c 	.word	0x0800a57c
 80099f0:	0800a53c 	.word	0x0800a53c

080099f4 <std>:
 80099f4:	2300      	movs	r3, #0
 80099f6:	b510      	push	{r4, lr}
 80099f8:	4604      	mov	r4, r0
 80099fa:	e9c0 3300 	strd	r3, r3, [r0]
 80099fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a02:	6083      	str	r3, [r0, #8]
 8009a04:	8181      	strh	r1, [r0, #12]
 8009a06:	6643      	str	r3, [r0, #100]	; 0x64
 8009a08:	81c2      	strh	r2, [r0, #14]
 8009a0a:	6183      	str	r3, [r0, #24]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	2208      	movs	r2, #8
 8009a10:	305c      	adds	r0, #92	; 0x5c
 8009a12:	f7fd fcff 	bl	8007414 <memset>
 8009a16:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <std+0x38>)
 8009a18:	6263      	str	r3, [r4, #36]	; 0x24
 8009a1a:	4b05      	ldr	r3, [pc, #20]	; (8009a30 <std+0x3c>)
 8009a1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a1e:	4b05      	ldr	r3, [pc, #20]	; (8009a34 <std+0x40>)
 8009a20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a22:	4b05      	ldr	r3, [pc, #20]	; (8009a38 <std+0x44>)
 8009a24:	6224      	str	r4, [r4, #32]
 8009a26:	6323      	str	r3, [r4, #48]	; 0x30
 8009a28:	bd10      	pop	{r4, pc}
 8009a2a:	bf00      	nop
 8009a2c:	08009cad 	.word	0x08009cad
 8009a30:	08009ccf 	.word	0x08009ccf
 8009a34:	08009d07 	.word	0x08009d07
 8009a38:	08009d2b 	.word	0x08009d2b

08009a3c <_cleanup_r>:
 8009a3c:	4901      	ldr	r1, [pc, #4]	; (8009a44 <_cleanup_r+0x8>)
 8009a3e:	f000 b8af 	b.w	8009ba0 <_fwalk_reent>
 8009a42:	bf00      	nop
 8009a44:	0800997d 	.word	0x0800997d

08009a48 <__sfmoreglue>:
 8009a48:	b570      	push	{r4, r5, r6, lr}
 8009a4a:	1e4a      	subs	r2, r1, #1
 8009a4c:	2568      	movs	r5, #104	; 0x68
 8009a4e:	4355      	muls	r5, r2
 8009a50:	460e      	mov	r6, r1
 8009a52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a56:	f7ff fbfd 	bl	8009254 <_malloc_r>
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	b140      	cbz	r0, 8009a70 <__sfmoreglue+0x28>
 8009a5e:	2100      	movs	r1, #0
 8009a60:	e9c0 1600 	strd	r1, r6, [r0]
 8009a64:	300c      	adds	r0, #12
 8009a66:	60a0      	str	r0, [r4, #8]
 8009a68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a6c:	f7fd fcd2 	bl	8007414 <memset>
 8009a70:	4620      	mov	r0, r4
 8009a72:	bd70      	pop	{r4, r5, r6, pc}

08009a74 <__sfp_lock_acquire>:
 8009a74:	4801      	ldr	r0, [pc, #4]	; (8009a7c <__sfp_lock_acquire+0x8>)
 8009a76:	f000 b8b3 	b.w	8009be0 <__retarget_lock_acquire_recursive>
 8009a7a:	bf00      	nop
 8009a7c:	200015bc 	.word	0x200015bc

08009a80 <__sfp_lock_release>:
 8009a80:	4801      	ldr	r0, [pc, #4]	; (8009a88 <__sfp_lock_release+0x8>)
 8009a82:	f000 b8ae 	b.w	8009be2 <__retarget_lock_release_recursive>
 8009a86:	bf00      	nop
 8009a88:	200015bc 	.word	0x200015bc

08009a8c <__sinit_lock_acquire>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	; (8009a94 <__sinit_lock_acquire+0x8>)
 8009a8e:	f000 b8a7 	b.w	8009be0 <__retarget_lock_acquire_recursive>
 8009a92:	bf00      	nop
 8009a94:	200015b7 	.word	0x200015b7

08009a98 <__sinit_lock_release>:
 8009a98:	4801      	ldr	r0, [pc, #4]	; (8009aa0 <__sinit_lock_release+0x8>)
 8009a9a:	f000 b8a2 	b.w	8009be2 <__retarget_lock_release_recursive>
 8009a9e:	bf00      	nop
 8009aa0:	200015b7 	.word	0x200015b7

08009aa4 <__sinit>:
 8009aa4:	b510      	push	{r4, lr}
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	f7ff fff0 	bl	8009a8c <__sinit_lock_acquire>
 8009aac:	69a3      	ldr	r3, [r4, #24]
 8009aae:	b11b      	cbz	r3, 8009ab8 <__sinit+0x14>
 8009ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ab4:	f7ff bff0 	b.w	8009a98 <__sinit_lock_release>
 8009ab8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009abc:	6523      	str	r3, [r4, #80]	; 0x50
 8009abe:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <__sinit+0x68>)
 8009ac0:	4a13      	ldr	r2, [pc, #76]	; (8009b10 <__sinit+0x6c>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ac6:	42a3      	cmp	r3, r4
 8009ac8:	bf04      	itt	eq
 8009aca:	2301      	moveq	r3, #1
 8009acc:	61a3      	streq	r3, [r4, #24]
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f000 f820 	bl	8009b14 <__sfp>
 8009ad4:	6060      	str	r0, [r4, #4]
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f000 f81c 	bl	8009b14 <__sfp>
 8009adc:	60a0      	str	r0, [r4, #8]
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f000 f818 	bl	8009b14 <__sfp>
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	60e0      	str	r0, [r4, #12]
 8009ae8:	2104      	movs	r1, #4
 8009aea:	6860      	ldr	r0, [r4, #4]
 8009aec:	f7ff ff82 	bl	80099f4 <std>
 8009af0:	68a0      	ldr	r0, [r4, #8]
 8009af2:	2201      	movs	r2, #1
 8009af4:	2109      	movs	r1, #9
 8009af6:	f7ff ff7d 	bl	80099f4 <std>
 8009afa:	68e0      	ldr	r0, [r4, #12]
 8009afc:	2202      	movs	r2, #2
 8009afe:	2112      	movs	r1, #18
 8009b00:	f7ff ff78 	bl	80099f4 <std>
 8009b04:	2301      	movs	r3, #1
 8009b06:	61a3      	str	r3, [r4, #24]
 8009b08:	e7d2      	b.n	8009ab0 <__sinit+0xc>
 8009b0a:	bf00      	nop
 8009b0c:	0800a1b8 	.word	0x0800a1b8
 8009b10:	08009a3d 	.word	0x08009a3d

08009b14 <__sfp>:
 8009b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b16:	4607      	mov	r7, r0
 8009b18:	f7ff ffac 	bl	8009a74 <__sfp_lock_acquire>
 8009b1c:	4b1e      	ldr	r3, [pc, #120]	; (8009b98 <__sfp+0x84>)
 8009b1e:	681e      	ldr	r6, [r3, #0]
 8009b20:	69b3      	ldr	r3, [r6, #24]
 8009b22:	b913      	cbnz	r3, 8009b2a <__sfp+0x16>
 8009b24:	4630      	mov	r0, r6
 8009b26:	f7ff ffbd 	bl	8009aa4 <__sinit>
 8009b2a:	3648      	adds	r6, #72	; 0x48
 8009b2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b30:	3b01      	subs	r3, #1
 8009b32:	d503      	bpl.n	8009b3c <__sfp+0x28>
 8009b34:	6833      	ldr	r3, [r6, #0]
 8009b36:	b30b      	cbz	r3, 8009b7c <__sfp+0x68>
 8009b38:	6836      	ldr	r6, [r6, #0]
 8009b3a:	e7f7      	b.n	8009b2c <__sfp+0x18>
 8009b3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b40:	b9d5      	cbnz	r5, 8009b78 <__sfp+0x64>
 8009b42:	4b16      	ldr	r3, [pc, #88]	; (8009b9c <__sfp+0x88>)
 8009b44:	60e3      	str	r3, [r4, #12]
 8009b46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b4a:	6665      	str	r5, [r4, #100]	; 0x64
 8009b4c:	f000 f847 	bl	8009bde <__retarget_lock_init_recursive>
 8009b50:	f7ff ff96 	bl	8009a80 <__sfp_lock_release>
 8009b54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b5c:	6025      	str	r5, [r4, #0]
 8009b5e:	61a5      	str	r5, [r4, #24]
 8009b60:	2208      	movs	r2, #8
 8009b62:	4629      	mov	r1, r5
 8009b64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b68:	f7fd fc54 	bl	8007414 <memset>
 8009b6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b74:	4620      	mov	r0, r4
 8009b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b78:	3468      	adds	r4, #104	; 0x68
 8009b7a:	e7d9      	b.n	8009b30 <__sfp+0x1c>
 8009b7c:	2104      	movs	r1, #4
 8009b7e:	4638      	mov	r0, r7
 8009b80:	f7ff ff62 	bl	8009a48 <__sfmoreglue>
 8009b84:	4604      	mov	r4, r0
 8009b86:	6030      	str	r0, [r6, #0]
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d1d5      	bne.n	8009b38 <__sfp+0x24>
 8009b8c:	f7ff ff78 	bl	8009a80 <__sfp_lock_release>
 8009b90:	230c      	movs	r3, #12
 8009b92:	603b      	str	r3, [r7, #0]
 8009b94:	e7ee      	b.n	8009b74 <__sfp+0x60>
 8009b96:	bf00      	nop
 8009b98:	0800a1b8 	.word	0x0800a1b8
 8009b9c:	ffff0001 	.word	0xffff0001

08009ba0 <_fwalk_reent>:
 8009ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba4:	4606      	mov	r6, r0
 8009ba6:	4688      	mov	r8, r1
 8009ba8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009bac:	2700      	movs	r7, #0
 8009bae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bb2:	f1b9 0901 	subs.w	r9, r9, #1
 8009bb6:	d505      	bpl.n	8009bc4 <_fwalk_reent+0x24>
 8009bb8:	6824      	ldr	r4, [r4, #0]
 8009bba:	2c00      	cmp	r4, #0
 8009bbc:	d1f7      	bne.n	8009bae <_fwalk_reent+0xe>
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc4:	89ab      	ldrh	r3, [r5, #12]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d907      	bls.n	8009bda <_fwalk_reent+0x3a>
 8009bca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	d003      	beq.n	8009bda <_fwalk_reent+0x3a>
 8009bd2:	4629      	mov	r1, r5
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	47c0      	blx	r8
 8009bd8:	4307      	orrs	r7, r0
 8009bda:	3568      	adds	r5, #104	; 0x68
 8009bdc:	e7e9      	b.n	8009bb2 <_fwalk_reent+0x12>

08009bde <__retarget_lock_init_recursive>:
 8009bde:	4770      	bx	lr

08009be0 <__retarget_lock_acquire_recursive>:
 8009be0:	4770      	bx	lr

08009be2 <__retarget_lock_release_recursive>:
 8009be2:	4770      	bx	lr

08009be4 <__swhatbuf_r>:
 8009be4:	b570      	push	{r4, r5, r6, lr}
 8009be6:	460e      	mov	r6, r1
 8009be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bec:	2900      	cmp	r1, #0
 8009bee:	b096      	sub	sp, #88	; 0x58
 8009bf0:	4614      	mov	r4, r2
 8009bf2:	461d      	mov	r5, r3
 8009bf4:	da07      	bge.n	8009c06 <__swhatbuf_r+0x22>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	602b      	str	r3, [r5, #0]
 8009bfa:	89b3      	ldrh	r3, [r6, #12]
 8009bfc:	061a      	lsls	r2, r3, #24
 8009bfe:	d410      	bmi.n	8009c22 <__swhatbuf_r+0x3e>
 8009c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c04:	e00e      	b.n	8009c24 <__swhatbuf_r+0x40>
 8009c06:	466a      	mov	r2, sp
 8009c08:	f000 f8b6 	bl	8009d78 <_fstat_r>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	dbf2      	blt.n	8009bf6 <__swhatbuf_r+0x12>
 8009c10:	9a01      	ldr	r2, [sp, #4]
 8009c12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c1a:	425a      	negs	r2, r3
 8009c1c:	415a      	adcs	r2, r3
 8009c1e:	602a      	str	r2, [r5, #0]
 8009c20:	e7ee      	b.n	8009c00 <__swhatbuf_r+0x1c>
 8009c22:	2340      	movs	r3, #64	; 0x40
 8009c24:	2000      	movs	r0, #0
 8009c26:	6023      	str	r3, [r4, #0]
 8009c28:	b016      	add	sp, #88	; 0x58
 8009c2a:	bd70      	pop	{r4, r5, r6, pc}

08009c2c <__smakebuf_r>:
 8009c2c:	898b      	ldrh	r3, [r1, #12]
 8009c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c30:	079d      	lsls	r5, r3, #30
 8009c32:	4606      	mov	r6, r0
 8009c34:	460c      	mov	r4, r1
 8009c36:	d507      	bpl.n	8009c48 <__smakebuf_r+0x1c>
 8009c38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	6123      	str	r3, [r4, #16]
 8009c40:	2301      	movs	r3, #1
 8009c42:	6163      	str	r3, [r4, #20]
 8009c44:	b002      	add	sp, #8
 8009c46:	bd70      	pop	{r4, r5, r6, pc}
 8009c48:	ab01      	add	r3, sp, #4
 8009c4a:	466a      	mov	r2, sp
 8009c4c:	f7ff ffca 	bl	8009be4 <__swhatbuf_r>
 8009c50:	9900      	ldr	r1, [sp, #0]
 8009c52:	4605      	mov	r5, r0
 8009c54:	4630      	mov	r0, r6
 8009c56:	f7ff fafd 	bl	8009254 <_malloc_r>
 8009c5a:	b948      	cbnz	r0, 8009c70 <__smakebuf_r+0x44>
 8009c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c60:	059a      	lsls	r2, r3, #22
 8009c62:	d4ef      	bmi.n	8009c44 <__smakebuf_r+0x18>
 8009c64:	f023 0303 	bic.w	r3, r3, #3
 8009c68:	f043 0302 	orr.w	r3, r3, #2
 8009c6c:	81a3      	strh	r3, [r4, #12]
 8009c6e:	e7e3      	b.n	8009c38 <__smakebuf_r+0xc>
 8009c70:	4b0d      	ldr	r3, [pc, #52]	; (8009ca8 <__smakebuf_r+0x7c>)
 8009c72:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c74:	89a3      	ldrh	r3, [r4, #12]
 8009c76:	6020      	str	r0, [r4, #0]
 8009c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c7c:	81a3      	strh	r3, [r4, #12]
 8009c7e:	9b00      	ldr	r3, [sp, #0]
 8009c80:	6163      	str	r3, [r4, #20]
 8009c82:	9b01      	ldr	r3, [sp, #4]
 8009c84:	6120      	str	r0, [r4, #16]
 8009c86:	b15b      	cbz	r3, 8009ca0 <__smakebuf_r+0x74>
 8009c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f000 f885 	bl	8009d9c <_isatty_r>
 8009c92:	b128      	cbz	r0, 8009ca0 <__smakebuf_r+0x74>
 8009c94:	89a3      	ldrh	r3, [r4, #12]
 8009c96:	f023 0303 	bic.w	r3, r3, #3
 8009c9a:	f043 0301 	orr.w	r3, r3, #1
 8009c9e:	81a3      	strh	r3, [r4, #12]
 8009ca0:	89a0      	ldrh	r0, [r4, #12]
 8009ca2:	4305      	orrs	r5, r0
 8009ca4:	81a5      	strh	r5, [r4, #12]
 8009ca6:	e7cd      	b.n	8009c44 <__smakebuf_r+0x18>
 8009ca8:	08009a3d 	.word	0x08009a3d

08009cac <__sread>:
 8009cac:	b510      	push	{r4, lr}
 8009cae:	460c      	mov	r4, r1
 8009cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cb4:	f000 f894 	bl	8009de0 <_read_r>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	bfab      	itete	ge
 8009cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8009cc0:	181b      	addge	r3, r3, r0
 8009cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cc6:	bfac      	ite	ge
 8009cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cca:	81a3      	strhlt	r3, [r4, #12]
 8009ccc:	bd10      	pop	{r4, pc}

08009cce <__swrite>:
 8009cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd2:	461f      	mov	r7, r3
 8009cd4:	898b      	ldrh	r3, [r1, #12]
 8009cd6:	05db      	lsls	r3, r3, #23
 8009cd8:	4605      	mov	r5, r0
 8009cda:	460c      	mov	r4, r1
 8009cdc:	4616      	mov	r6, r2
 8009cde:	d505      	bpl.n	8009cec <__swrite+0x1e>
 8009ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f000 f868 	bl	8009dbc <_lseek_r>
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cf6:	81a3      	strh	r3, [r4, #12]
 8009cf8:	4632      	mov	r2, r6
 8009cfa:	463b      	mov	r3, r7
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d02:	f000 b817 	b.w	8009d34 <_write_r>

08009d06 <__sseek>:
 8009d06:	b510      	push	{r4, lr}
 8009d08:	460c      	mov	r4, r1
 8009d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d0e:	f000 f855 	bl	8009dbc <_lseek_r>
 8009d12:	1c43      	adds	r3, r0, #1
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	bf15      	itete	ne
 8009d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d22:	81a3      	strheq	r3, [r4, #12]
 8009d24:	bf18      	it	ne
 8009d26:	81a3      	strhne	r3, [r4, #12]
 8009d28:	bd10      	pop	{r4, pc}

08009d2a <__sclose>:
 8009d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d2e:	f000 b813 	b.w	8009d58 <_close_r>
	...

08009d34 <_write_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	4d07      	ldr	r5, [pc, #28]	; (8009d54 <_write_r+0x20>)
 8009d38:	4604      	mov	r4, r0
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	2200      	movs	r2, #0
 8009d40:	602a      	str	r2, [r5, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	f7fa fa77 	bl	8004236 <_write>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d102      	bne.n	8009d52 <_write_r+0x1e>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	b103      	cbz	r3, 8009d52 <_write_r+0x1e>
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	bd38      	pop	{r3, r4, r5, pc}
 8009d54:	200015b0 	.word	0x200015b0

08009d58 <_close_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4d06      	ldr	r5, [pc, #24]	; (8009d74 <_close_r+0x1c>)
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4608      	mov	r0, r1
 8009d62:	602b      	str	r3, [r5, #0]
 8009d64:	f7fa fa83 	bl	800426e <_close>
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	d102      	bne.n	8009d72 <_close_r+0x1a>
 8009d6c:	682b      	ldr	r3, [r5, #0]
 8009d6e:	b103      	cbz	r3, 8009d72 <_close_r+0x1a>
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
 8009d74:	200015b0 	.word	0x200015b0

08009d78 <_fstat_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	4d07      	ldr	r5, [pc, #28]	; (8009d98 <_fstat_r+0x20>)
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	4604      	mov	r4, r0
 8009d80:	4608      	mov	r0, r1
 8009d82:	4611      	mov	r1, r2
 8009d84:	602b      	str	r3, [r5, #0]
 8009d86:	f7fa fa7e 	bl	8004286 <_fstat>
 8009d8a:	1c43      	adds	r3, r0, #1
 8009d8c:	d102      	bne.n	8009d94 <_fstat_r+0x1c>
 8009d8e:	682b      	ldr	r3, [r5, #0]
 8009d90:	b103      	cbz	r3, 8009d94 <_fstat_r+0x1c>
 8009d92:	6023      	str	r3, [r4, #0]
 8009d94:	bd38      	pop	{r3, r4, r5, pc}
 8009d96:	bf00      	nop
 8009d98:	200015b0 	.word	0x200015b0

08009d9c <_isatty_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4d06      	ldr	r5, [pc, #24]	; (8009db8 <_isatty_r+0x1c>)
 8009da0:	2300      	movs	r3, #0
 8009da2:	4604      	mov	r4, r0
 8009da4:	4608      	mov	r0, r1
 8009da6:	602b      	str	r3, [r5, #0]
 8009da8:	f7fa fa7d 	bl	80042a6 <_isatty>
 8009dac:	1c43      	adds	r3, r0, #1
 8009dae:	d102      	bne.n	8009db6 <_isatty_r+0x1a>
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	b103      	cbz	r3, 8009db6 <_isatty_r+0x1a>
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	200015b0 	.word	0x200015b0

08009dbc <_lseek_r>:
 8009dbc:	b538      	push	{r3, r4, r5, lr}
 8009dbe:	4d07      	ldr	r5, [pc, #28]	; (8009ddc <_lseek_r+0x20>)
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	4608      	mov	r0, r1
 8009dc4:	4611      	mov	r1, r2
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	602a      	str	r2, [r5, #0]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	f7fa fa76 	bl	80042bc <_lseek>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d102      	bne.n	8009dda <_lseek_r+0x1e>
 8009dd4:	682b      	ldr	r3, [r5, #0]
 8009dd6:	b103      	cbz	r3, 8009dda <_lseek_r+0x1e>
 8009dd8:	6023      	str	r3, [r4, #0]
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
 8009ddc:	200015b0 	.word	0x200015b0

08009de0 <_read_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	4d07      	ldr	r5, [pc, #28]	; (8009e00 <_read_r+0x20>)
 8009de4:	4604      	mov	r4, r0
 8009de6:	4608      	mov	r0, r1
 8009de8:	4611      	mov	r1, r2
 8009dea:	2200      	movs	r2, #0
 8009dec:	602a      	str	r2, [r5, #0]
 8009dee:	461a      	mov	r2, r3
 8009df0:	f7fa fa04 	bl	80041fc <_read>
 8009df4:	1c43      	adds	r3, r0, #1
 8009df6:	d102      	bne.n	8009dfe <_read_r+0x1e>
 8009df8:	682b      	ldr	r3, [r5, #0]
 8009dfa:	b103      	cbz	r3, 8009dfe <_read_r+0x1e>
 8009dfc:	6023      	str	r3, [r4, #0]
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	200015b0 	.word	0x200015b0

08009e04 <_init>:
 8009e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e06:	bf00      	nop
 8009e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e0a:	bc08      	pop	{r3}
 8009e0c:	469e      	mov	lr, r3
 8009e0e:	4770      	bx	lr

08009e10 <_fini>:
 8009e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e12:	bf00      	nop
 8009e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e16:	bc08      	pop	{r3}
 8009e18:	469e      	mov	lr, r3
 8009e1a:	4770      	bx	lr
